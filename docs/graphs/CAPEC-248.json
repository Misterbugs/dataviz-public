{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-228: DTD Injection</b><br>An attacker injects malicious content into an application's DTD in an attempt to<br>produce a negative technical impact. DTDs are used to describe how XML documents<br>are processed. Certain malformed DTDs (for example, those with excessive entity<br>expansion as described in CAPEC 197) can cause the XML parsers that process the<br>DTDs to consume excessive resources resulting in resource depletion.",
      "color": "#94ebff",
      "size": 10,
      "label": "DTD Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/228.html",
      "id": "228"
    },
    {
      "Description": "<b>CAPEC-250: XML Injection</b><br>An attacker utilizes crafted XML user-controllable input to probe, attack, and<br>inject data into the XML database, using techniques similar to SQL injection.<br>The user-controllable input can allow for unauthorized viewing of data,<br>bypassing authentication or the front-end application for direct XML database<br>access, and possibly altering database information.",
      "color": "#75aaff",
      "size": 18,
      "label": "XML Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/250.html",
      "id": "250"
    },
    {
      "Description": "<b>CAPEC-84: XQuery Injection</b><br>This attack utilizes XQuery to probe and attack server systems; in a similar<br>manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS,<br>XQuery Injection uses improperly validated data that is passed to XQuery<br>commands to traverse and execute commands that the XQuery routines have access<br>to. XQuery injection can be used to enumerate elements on the victim's<br>environment, inject commands to the local host, or execute queries to remote<br>files and data sources.",
      "color": "#94ebff",
      "size": 10,
      "label": "XQuery Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/84.html",
      "id": "84"
    },
    {
      "Description": "<b>CAPEC-470: Expanding Control over the Operating System from the Database</b><br>An attacker is able to leverage access gained to the database to read / write<br>data to the file system, compromise the operating system, create a tunnel for<br>accessing the host machine, and use this access to potentially attack other<br>machines on the same network as the database machine. Traditionally SQL<br>injections attacks are viewed as a way to gain unauthorized read access to the<br>data stored in the database, modify the data in the database, delete the data,<br>etc. However, almost every data base management system (DBMS) system includes<br>facilities that if compromised allow an attacker complete access to the file<br>system, operating system, and full access to the host running the database. The<br>attacker can then use this privileged access to launch subsequent attacks. These<br>facilities include dropping into a command shell, creating user defined<br>functions that can call system level libraries present on the host machine,<br>stored procedures, etc.",
      "color": "#94ebff",
      "size": 10,
      "label": "Expanding Control over the Operating System from the Database",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/470.html",
      "id": "470"
    },
    {
      "Description": "<b>CAPEC-40: Manipulating Writeable Terminal Devices</b><br>This attack exploits terminal devices that allow themselves to be written to by<br>other users. The attacker sends command strings to the target terminal device<br>hoping that the target user will hit enter and thereby execute the malicious<br>command with their privileges. The attacker can send the results (such as<br>copying /etc/passwd) to a known directory and collect once the attack has<br>succeeded.",
      "color": "#75aaff",
      "size": 18,
      "label": "Manipulating Writeable Terminal Devices",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/40.html",
      "id": "40"
    },
    {
      "Description": "<b>CAPEC-66: SQL Injection</b><br>This attack exploits target software that constructs SQL statements based on<br>user input. An attacker crafts input strings so that when the target software<br>constructs SQL statements based on the input, the resulting SQL statement<br>performs actions other than those the application intended. SQL Injection<br>results from failure of the application to appropriately validate input.",
      "color": "#75aaff",
      "size": 18,
      "label": "SQL Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/66.html",
      "id": "66"
    },
    {
      "Description": "<b>CAPEC-676: NoSQL Injection</b><br>An adversary targets software that constructs NoSQL statements based on user<br>input or with parameters vulnerable to operator replacement in order to achieve<br>a variety of technical impacts such as escalating privileges, bypassing<br>authentication, and/or executing code.",
      "color": "#75aaff",
      "size": 18,
      "label": "NoSQL Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/676.html",
      "id": "676"
    },
    {
      "Description": "<b>CAPEC-88: OS Command Injection</b><br>In this type of an attack, an adversary injects operating system commands into<br>existing application functions. An application that uses untrusted input to<br>build command strings is vulnerable. An adversary can leverage OS command<br>injection in an application to elevate privileges, execute arbitrary commands<br>and compromise the underlying operating system.",
      "color": "#75aaff",
      "size": 18,
      "label": "OS Command Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/88.html",
      "id": "88"
    },
    {
      "Description": "<b>CAPEC-109: Object Relational Mapping Injection</b><br>An attacker leverages a weakness present in the database access layer code<br>generated with an Object Relational Mapping (ORM) tool or a weakness in the way<br>that a developer used a persistence framework to inject their own SQL commands<br>to be executed against the underlying database. The attack here is similar to<br>plain SQL injection, except that the application does not use JDBC to directly<br>talk to the database, but instead it uses a data access layer generated by an<br>ORM tool or framework (e.g. Hibernate). While most of the time code generated by<br>an ORM tool contains safe access methods that are immune to SQL injection,<br>sometimes either due to some weakness in the generated code or due to the fact<br>that the developer failed to use the generated access methods properly, SQL<br>injection is still possible.",
      "color": "#94ebff",
      "size": 10,
      "label": "Object Relational Mapping Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/109.html",
      "id": "109"
    },
    {
      "Description": "<b>CAPEC-136: LDAP Injection</b><br>An attacker manipulates or crafts an LDAP query for the purpose of undermining<br>the security of the target. Some applications use user input to create LDAP<br>queries that are processed by an LDAP server. For example, a user might provide<br>their username during authentication and the username might be inserted in an<br>LDAP query during the authentication process. An attacker could use this input<br>to inject additional commands into an LDAP query that could disclose sensitive<br>information. For example, entering a * in the aforementioned query might return<br>information about all users on the system. This attack is very similar to an SQL<br>injection attack in that it manipulates a query to gather additional information<br>or coerce a particular return value.",
      "color": "#75aaff",
      "size": 18,
      "label": "LDAP Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/136.html",
      "id": "136"
    },
    {
      "Description": "<b>CAPEC-83: XPath Injection</b><br>An attacker can craft special user-controllable input consisting of XPath<br>expressions to inject the XML database and bypass authentication or glean<br>information that they normally would not be able to. XPath Injection enables an<br>attacker to talk directly to the XML database, thus bypassing the application<br>completely. XPath Injection results from the failure of an application to<br>properly sanitize input used as part of dynamic XPath expressions used to query<br>an XML database.",
      "color": "#94ebff",
      "size": 10,
      "label": "XPath Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/83.html",
      "id": "83"
    },
    {
      "Description": "<b>CAPEC-248: Command Injection</b><br>An adversary looking to execute a command of their choosing, injects new items<br>into an existing command thus modifying interpretation away from what was<br>intended. Commands in this context are often standalone strings that are<br>interpreted by a downstream component and cause specific responses. This type of<br>attack is possible when untrusted values are used to build these command<br>strings. Weaknesses in input validation or command construction can enable the<br>attack and lead to successful exploitation.",
      "color": "#2176ff",
      "size": 30,
      "label": "Command Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/248.html",
      "id": "248"
    },
    {
      "Description": "<b>CAPEC-7: Blind SQL Injection</b><br>Blind SQL Injection results from an insufficient mitigation for SQL Injection.<br>Although suppressing database error messages are considered best practice, the<br>suppression alone is not sufficient to prevent SQL Injection. Blind SQL<br>Injection is a form of SQL Injection that overcomes the lack of error messages.<br>Without the error messages that facilitate SQL Injection, the adversary<br>constructs input strings that probe the target through simple Boolean SQL<br>expressions. The adversary can determine if the syntax and structure of the<br>injection was successful based on whether the query was executed or not. Applied<br>iteratively, the adversary determines how and where the target is vulnerable to<br>SQL Injection.",
      "color": "#94ebff",
      "size": 10,
      "label": "Blind SQL Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/7.html",
      "id": "7"
    },
    {
      "Description": "<b>CAPEC-183: IMAP/SMTP Command Injection</b><br>An adversary exploits weaknesses in input validation on web-mail servers to<br>execute commands on the IMAP/SMTP server. Web-mail servers often sit between the<br>Internet and the IMAP or SMTP mail server. User requests are received by the<br>web-mail servers which then query the back-end mail server for the requested<br>information and return this response to the user. In an IMAP/SMTP command<br>injection attack, mail-server commands are embedded in parts of the request sent<br>to the web-mail server. If the web-mail server fails to adequately sanitize<br>these requests, these commands are then sent to the back-end mail server when it<br>is queried by the web-mail server, where the commands are then executed. This<br>attack can be especially dangerous since administrators may assume that the<br>back-end server is protected against direct Internet access and therefore may<br>not secure it adequately against the execution of malicious commands.",
      "color": "#75aaff",
      "size": 18,
      "label": "IMAP/SMTP Command Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/183.html",
      "id": "183"
    },
    {
      "Description": "<b>CAPEC-108: Command Line Execution through SQL Injection</b><br>An attacker uses standard SQL injection methods to inject data into the command<br>line for execution. This could be done directly through misuse of directives<br>such as MSSQL_xp_cmdshell or indirectly through injection of data into the<br>database that would be interpreted as shell commands. Sometime later, an<br>unscrupulous backend application (or could be part of the functionality of the<br>same application) fetches the injected data stored in the database and uses this<br>data as command line arguments without performing proper validation. The<br>malicious data escapes that data plane by spawning new commands to be executed<br>on the host.",
      "color": "#94ebff",
      "size": 10,
      "label": "Command Line Execution through SQL Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/108.html",
      "id": "108"
    },
    {
      "Description": "<b>CAPEC-110: SQL Injection through SOAP Parameter Tampering</b><br>An attacker modifies the parameters of the SOAP message that is sent from the<br>service consumer to the service provider to initiate a SQL injection attack. On<br>the service provider side, the SOAP message is parsed and parameters are not<br>properly validated before being used to access a database in a way that does not<br>use parameter binding, thus enabling the attacker to control the structure of<br>the executed SQL query. This pattern describes a SQL injection attack with the<br>delivery mechanism being a SOAP message.",
      "color": "#94ebff",
      "size": 10,
      "label": "SQL Injection through SOAP Parameter Tampering",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/110.html",
      "id": "110"
    }
  ],
  "links": [
    {
      "source": "228",
      "target": "250"
    },
    {
      "source": "250",
      "target": "248"
    },
    {
      "source": "84",
      "target": "250"
    },
    {
      "source": "470",
      "target": "66"
    },
    {
      "source": "40",
      "target": "248"
    },
    {
      "source": "66",
      "target": "248"
    },
    {
      "source": "676",
      "target": "248"
    },
    {
      "source": "88",
      "target": "248"
    },
    {
      "source": "109",
      "target": "66"
    },
    {
      "source": "136",
      "target": "248"
    },
    {
      "source": "83",
      "target": "250"
    },
    {
      "source": "7",
      "target": "66"
    },
    {
      "source": "183",
      "target": "248"
    },
    {
      "source": "108",
      "target": "66"
    },
    {
      "source": "110",
      "target": "66"
    }
  ]
}