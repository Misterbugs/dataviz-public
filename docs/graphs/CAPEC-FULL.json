{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-1: Accessing Functionality Not Properly Constrained by ACLs</b><br>In applications, particularly web applications, access to functionality is<br>mitigated by an authorization framework. This framework maps Access Control<br>Lists (ACLs) to elements of the application's functionality; particularly URL's<br>for web apps. In the case that the administrator failed to specify an ACL for a<br>particular element, an attacker may be able to access it with impunity. An<br>attacker with the ability to access functionality not properly constrained by<br>ACLs can obtain sensitive information and possibly compromise the entire<br>application. Such an attacker can access resources that must be available only<br>to users at a higher privilege level, can access management sections of the<br>application, or can run queries for data that they otherwise not supposed to.",
      "color": "#75aaff",
      "size": 18,
      "label": "Accessing Functionality Not Properly Constrained by ACLs",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/1.html",
      "id": "1"
    },
    {
      "Description": "<b>CAPEC-122: Privilege Abuse</b><br>An adversary is able to exploit features of the target that should be reserved<br>for privileged users or administrators but are exposed to use by lower or<br>non-privileged accounts. Access to sensitive information and functionality must<br>be controlled to ensure that only authorized users are able to access these<br>resources.",
      "color": "#2176ff",
      "size": 30,
      "label": "Privilege Abuse",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/122.html",
      "id": "122"
    },
    {
      "Description": "<b>CAPEC-10: Buffer Overflow via Environment Variables</b><br>This attack pattern involves causing a buffer overflow through manipulation of<br>environment variables. Once the adversary finds that they can modify an<br>environment variable, they may try to overflow associated buffers. This attack<br>leverages implicit trust often placed in environment variables.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow via Environment Variables",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/10.html",
      "id": "10"
    },
    {
      "Description": "<b>CAPEC-100: Overflow Buffers</b><br>Buffer Overflow attacks target improper or missing bounds checking on buffer<br>operations, typically triggered by input injected by an adversary. As a<br>consequence, an adversary is able to write past the boundaries of allocated<br>buffer regions in memory, causing a program crash or potentially redirection of<br>execution as per the adversaries' choice.",
      "color": "#75aaff",
      "size": 18,
      "label": "Overflow Buffers",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/100.html",
      "id": "100"
    },
    {
      "Description": "<b>CAPEC-123: Buffer Manipulation</b><br>An adversary manipulates an application's interaction with a buffer in an<br>attempt to read or modify data they shouldn't have access to. Buffer attacks are<br>distinguished in that it is the buffer space itself that is the target of the<br>attack rather than any code responsible for interpreting the content of the<br>buffer. In virtually all buffer attacks the content that is placed in the buffer<br>is immaterial. Instead, most buffer attacks involve retrieving or providing more<br>input than can be stored in the allocated buffer, resulting in the reading or<br>overwriting of other unintended program memory.",
      "color": "#2176ff",
      "size": 30,
      "label": "Buffer Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/123.html",
      "id": "123"
    },
    {
      "Description": "<b>CAPEC-101: Server Side Include (SSI) Injection</b><br>An attacker can use Server Side Include (SSI) Injection to send code to a web<br>application that then gets executed by the web server. Doing so enables the<br>attacker to achieve similar results to Cross Site Scripting, viz., arbitrary<br>code execution and information disclosure, albeit on a more limited scale, since<br>the SSI directives are nowhere near as powerful as a full-fledged scripting<br>language. Nonetheless, the attacker can conveniently gain access to sensitive<br>files, such as password files, and execute shell commands.",
      "color": "#94ebff",
      "size": 10,
      "label": "Server Side Include (SSI) Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/101.html",
      "id": "101"
    },
    {
      "Description": "<b>CAPEC-253: Remote Code Inclusion</b><br>The attacker forces an application to load arbitrary code files from a remote<br>location. The attacker could use this to try to load old versions of library<br>files that have known vulnerabilities, to load malicious files that the attacker<br>placed on the remote machine, or to otherwise change the functionality of the<br>targeted application in unexpected ways.",
      "color": "#75aaff",
      "size": 18,
      "label": "Remote Code Inclusion",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/253.html",
      "id": "253"
    },
    {
      "Description": "<b>CAPEC-102: Session Sidejacking</b><br>Session sidejacking takes advantage of an unencrypted communication channel<br>between a victim and target system. The attacker sniffs traffic on a network<br>looking for session tokens in unencrypted traffic. Once a session token is<br>captured, the attacker performs malicious actions by using the stolen token with<br>the targeted application to impersonate the victim. This attack is a specific<br>method of session hijacking, which is exploiting a valid session token to gain<br>unauthorized access to a target system or information. Other methods to perform<br>a session hijacking are session fixation, cross-site scripting, or compromising<br>a user or server machine and stealing the session token.",
      "color": "#94ebff",
      "size": 10,
      "label": "Session Sidejacking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/102.html",
      "id": "102"
    },
    {
      "Description": "<b>CAPEC-593: Session Hijacking</b><br>This type of attack involves an adversary that exploits weaknesses in an<br>application's use of sessions in performing authentication. The adversary is<br>able to steal or manipulate an active session and use it to gain unathorized<br>access to the application.",
      "color": "#75aaff",
      "size": 18,
      "label": "Session Hijacking",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/593.html",
      "id": "593"
    },
    {
      "Description": "<b>CAPEC-103: Clickjacking</b><br>An adversary tricks a victim into unknowingly initiating some action in one<br>system while interacting with the UI from a seemingly completely different,<br>usually an adversary controlled or intended, system.",
      "color": "#75aaff",
      "size": 18,
      "label": "Clickjacking",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/103.html",
      "id": "103"
    },
    {
      "Description": "<b>CAPEC-173: Action Spoofing</b><br>An adversary is able to disguise one action for another and therefore trick a<br>user into initiating one type of action when they intend to initiate a different<br>action. For example, a user might be led to believe that clicking a button will<br>submit a query, but in fact it downloads software. Adversaries may perform this<br>attack through social means, such as by simply convincing a victim to perform<br>the action or relying on a user's natural inclination to do so, or through<br>technical means, such as a clickjacking attack where a user sees one interface<br>but is actually interacting with a second, invisible, interface.",
      "color": "#2176ff",
      "size": 30,
      "label": "Action Spoofing",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/173.html",
      "id": "173"
    },
    {
      "Description": "<b>CAPEC-104: Cross Zone Scripting</b><br>An attacker is able to cause a victim to load content into their web-browser<br>that bypasses security zone controls and gain access to increased privileges to<br>execute scripting code or other web objects such as unsigned ActiveX controls or<br>applets. This is a privilege elevation attack targeted at zone-based web-browser<br>security.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cross Zone Scripting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/104.html",
      "id": "104"
    },
    {
      "Description": "<b>CAPEC-233: Privilege Escalation</b><br>An adversary exploits a weakness enabling them to elevate their privilege and<br>perform an action that they are not supposed to be authorized to perform.",
      "color": "#2176ff",
      "size": 30,
      "label": "Privilege Escalation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/233.html",
      "id": "233"
    },
    {
      "Description": "<b>CAPEC-105: HTTP Request Splitting</b><br>An adversary abuses the flexibility and discrepancies in the parsing and<br>interpretation of HTTP Request messages by different intermediary HTTP agents<br>(e.g., load balancer, reverse proxy, web caching proxies, application firewalls,<br>etc.) to split a single HTTP request into multiple unauthorized and malicious<br>HTTP requests to a back-end HTTP agent (e.g., web server). See CanPrecede<br>relationships for possible consequences.",
      "color": "#94ebff",
      "size": 10,
      "label": "HTTP Request Splitting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/105.html",
      "id": "105"
    },
    {
      "Description": "<b>CAPEC-220: Client-Server Protocol Manipulation</b><br>An adversary takes advantage of weaknesses in the protocol by which a client and<br>server are communicating to perform unexpected actions. Communication protocols<br>are necessary to transfer messages between client and server applications.<br>Moreover, different protocols may be used for different types of interactions.",
      "color": "#75aaff",
      "size": 18,
      "label": "Client-Server Protocol Manipulation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/220.html",
      "id": "220"
    },
    {
      "Description": "<b>CAPEC-107: Cross Site Tracing</b><br>Cross Site Tracing (XST) enables an adversary to steal the victim's session<br>cookie and possibly other authentication credentials transmitted in the header<br>of the HTTP request when the victim's browser communicates to a destination<br>system's web server.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cross Site Tracing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/107.html",
      "id": "107"
    },
    {
      "Description": "<b>CAPEC-108: Command Line Execution through SQL Injection</b><br>An attacker uses standard SQL injection methods to inject data into the command<br>line for execution. This could be done directly through misuse of directives<br>such as MSSQL_xp_cmdshell or indirectly through injection of data into the<br>database that would be interpreted as shell commands. Sometime later, an<br>unscrupulous backend application (or could be part of the functionality of the<br>same application) fetches the injected data stored in the database and uses this<br>data as command line arguments without performing proper validation. The<br>malicious data escapes that data plane by spawning new commands to be executed<br>on the host.",
      "color": "#94ebff",
      "size": 10,
      "label": "Command Line Execution through SQL Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/108.html",
      "id": "108"
    },
    {
      "Description": "<b>CAPEC-66: SQL Injection</b><br>This attack exploits target software that constructs SQL statements based on<br>user input. An attacker crafts input strings so that when the target software<br>constructs SQL statements based on the input, the resulting SQL statement<br>performs actions other than those the application intended. SQL Injection<br>results from failure of the application to appropriately validate input.",
      "color": "#75aaff",
      "size": 18,
      "label": "SQL Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/66.html",
      "id": "66"
    },
    {
      "Description": "<b>CAPEC-109: Object Relational Mapping Injection</b><br>An attacker leverages a weakness present in the database access layer code<br>generated with an Object Relational Mapping (ORM) tool or a weakness in the way<br>that a developer used a persistence framework to inject their own SQL commands<br>to be executed against the underlying database. The attack here is similar to<br>plain SQL injection, except that the application does not use JDBC to directly<br>talk to the database, but instead it uses a data access layer generated by an<br>ORM tool or framework (e.g. Hibernate). While most of the time code generated by<br>an ORM tool contains safe access methods that are immune to SQL injection,<br>sometimes either due to some weakness in the generated code or due to the fact<br>that the developer failed to use the generated access methods properly, SQL<br>injection is still possible.",
      "color": "#94ebff",
      "size": 10,
      "label": "Object Relational Mapping Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/109.html",
      "id": "109"
    },
    {
      "Description": "<b>CAPEC-11: Cause Web Server Misclassification</b><br>An attack of this type exploits a Web server's decision to take action based on<br>filename or file extension. Because different file types are handled by<br>different server processes, misclassification may force the Web server to take<br>unexpected action, or expected actions in an unexpected sequence. This may cause<br>the server to exhaust resources, supply debug or system data to the attacker, or<br>bind an attacker to a remote process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cause Web Server Misclassification",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/11.html",
      "id": "11"
    },
    {
      "Description": "<b>CAPEC-635: Alternative Execution Due to Deceptive Filenames</b><br>The extension of a file name is often used in various contexts to determine the<br>application that is used to open and use it. If an attacker can cause an<br>alternative application to be used, it may be able to execute malicious code,<br>cause a denial of service or expose sensitive information.",
      "color": "#75aaff",
      "size": 18,
      "label": "Alternative Execution Due to Deceptive Filenames",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/635.html",
      "id": "635"
    },
    {
      "Description": "<b>CAPEC-110: SQL Injection through SOAP Parameter Tampering</b><br>An attacker modifies the parameters of the SOAP message that is sent from the<br>service consumer to the service provider to initiate a SQL injection attack. On<br>the service provider side, the SOAP message is parsed and parameters are not<br>properly validated before being used to access a database in a way that does not<br>use parameter binding, thus enabling the attacker to control the structure of<br>the executed SQL query. This pattern describes a SQL injection attack with the<br>delivery mechanism being a SOAP message.",
      "color": "#94ebff",
      "size": 10,
      "label": "SQL Injection through SOAP Parameter Tampering",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/110.html",
      "id": "110"
    },
    {
      "Description": "<b>CAPEC-111: JSON Hijacking (aka JavaScript Hijacking)</b><br>An attacker targets a system that uses JavaScript Object Notation (JSON) as a<br>transport mechanism between the client and the server (common in Web 2.0 systems<br>using AJAX) to steal possibly confidential information transmitted from the<br>server back to the client inside the JSON object by taking advantage of the<br>loophole in the browser's Same Origin Policy that does not prohibit JavaScript<br>from one website to be included and executed in the context of another website.",
      "color": "#75aaff",
      "size": 18,
      "label": "JSON Hijacking (aka JavaScript Hijacking)",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/111.html",
      "id": "111"
    },
    {
      "Description": "<b>CAPEC-212: Functionality Misuse</b><br>An adversary leverages a legitimate capability of an application in such a way<br>as to achieve a negative technical impact. The system functionality is not<br>altered or modified but used in a way that was not intended. This is often<br>accomplished through the overuse of a specific functionality or by leveraging<br>functionality with design flaws that enables the adversary to gain access to<br>unauthorized, sensitive data.",
      "color": "#2176ff",
      "size": 30,
      "label": "Functionality Misuse",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/212.html",
      "id": "212"
    },
    {
      "Description": "<b>CAPEC-112: Brute Force</b><br>In this attack, some asset (information, functionality, identity, etc.) is<br>protected by a finite secret value. The attacker attempts to gain access to this<br>asset by using trial-and-error to exhaustively explore all the possible secret<br>values in the hope of finding the secret (or a value that is functionally<br>equivalent) that will unlock the asset.",
      "color": "#2176ff",
      "size": 30,
      "label": "Brute Force",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/112.html",
      "id": "112"
    },
    {
      "Description": "<b>CAPEC-113: Interface Manipulation</b><br>An adversary manipulates the use or processing of an interface (e.g. Application<br>Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse<br>impact upon the security of the system implementing the interface. This can<br>allow the adversary to bypass access control and/or execute functionality not<br>intended by the interface implementation, possibly compromising the system which<br>integrates the interface. Interface manipulation can take on a number of forms<br>including forcing the unexpected use of an interface or the use of an interface<br>in an unintended way.",
      "color": "#2176ff",
      "size": 30,
      "label": "Interface Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/113.html",
      "id": "113"
    },
    {
      "Description": "<b>CAPEC-114: Authentication Abuse</b><br>An attacker obtains unauthorized access to an application, service or device<br>either through knowledge of the inherent weaknesses of an authentication<br>mechanism, or by exploiting a flaw in the authentication scheme's<br>implementation. In such an attack an authentication mechanism is functioning but<br>a carefully controlled sequence of events causes the mechanism to grant access<br>to the attacker.",
      "color": "#2176ff",
      "size": 30,
      "label": "Authentication Abuse",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/114.html",
      "id": "114"
    },
    {
      "Description": "<b>CAPEC-115: Authentication Bypass</b><br>An attacker gains access to application, service, or device with the privileges<br>of an authorized or privileged user by evading or circumventing an<br>authentication mechanism. The attacker is therefore able to access protected<br>data without authentication ever having taken place.",
      "color": "#2176ff",
      "size": 30,
      "label": "Authentication Bypass",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/115.html",
      "id": "115"
    },
    {
      "Description": "<b>CAPEC-116: Excavation</b><br>An adversary actively probes the target in a manner that is designed to solicit<br>information that could be leveraged for malicious purposes.",
      "color": "#2176ff",
      "size": 30,
      "label": "Excavation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/116.html",
      "id": "116"
    },
    {
      "Description": "<b>CAPEC-117: Interception</b><br>An adversary monitors data streams to or from the target for information<br>gathering purposes. This attack may be undertaken to solely gather sensitive<br>information or to support a further attack against the target. This attack<br>pattern can involve sniffing network traffic as well as other types of data<br>streams (e.g. radio). The adversary can attempt to initiate the establishment of<br>a data stream or passively observe the communications as they unfold. In all<br>variants of this attack, the adversary is not the intended recipient of the data<br>stream. In contrast to other means of gathering information (e.g., targeting<br>data leaks), the adversary must actively position themself so as to observe<br>explicit data channels (e.g. network traffic) and read the content. However,<br>this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the<br>adversary does not alter the content of the communications nor forward data to<br>the intended recipient.",
      "color": "#2176ff",
      "size": 30,
      "label": "Interception",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/117.html",
      "id": "117"
    },
    {
      "Description": "<b>CAPEC-12: Choosing Message Identifier</b><br>This pattern of attack is defined by the selection of messages distributed via<br>multicast or public information channels that are intended for another client by<br>determining the parameter value assigned to that client. This attack allows the<br>adversary to gain access to potentially privileged information, and to possibly<br>perpetrate other attacks through the distribution means by impersonation. If the<br>channel/message being manipulated is an input rather than output mechanism for<br>the system, (such as a command bus), this style of attack could be used to<br>change the adversary's identifier to more a privileged one.",
      "color": "#75aaff",
      "size": 18,
      "label": "Choosing Message Identifier",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/12.html",
      "id": "12"
    },
    {
      "Description": "<b>CAPEC-216: Communication Channel Manipulation</b><br>An adversary manipulates a setting or parameter on communications channel in<br>order to compromise its security. This can result in information exposure,<br>insertion/removal of information from the communications stream, and/or<br>potentially system compromise.",
      "color": "#2176ff",
      "size": 30,
      "label": "Communication Channel Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/216.html",
      "id": "216"
    },
    {
      "Description": "<b>CAPEC-120: Double Encoding</b><br>The adversary utilizes a repeating of the encoding process for a set of<br>characters (that is, character encoding a character encoding of a character) to<br>obfuscate the payload of a particular request. This may allow the adversary to<br>bypass filters that attempt to detect illegal characters or strings, such as<br>those that might be used in traversal or injection attacks. Filters may be able<br>to catch illegal encoded strings, but may not catch doubly encoded strings. For<br>example, a dot (.), often used in path traversal attacks and therefore often<br>blocked by filters, could be URL encoded as %2E. However, many filters recognize<br>this encoding and would still block the request. In a double encoding, the % in<br>the above URL encoding would be encoded again as %25, resulting in %252E which<br>some filters might not catch, but which could still be interpreted as a dot (.)<br>by interpreters on the target.",
      "color": "#94ebff",
      "size": 10,
      "label": "Double Encoding",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/120.html",
      "id": "120"
    },
    {
      "Description": "<b>CAPEC-267: Leverage Alternate Encoding</b><br>An adversary leverages the possibility to encode potentially harmful input or<br>content used by applications such that the applications are ineffective at<br>validating this encoding standard.",
      "color": "#75aaff",
      "size": 18,
      "label": "Leverage Alternate Encoding",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/267.html",
      "id": "267"
    },
    {
      "Description": "<b>CAPEC-121: Exploit Non-Production Interfaces</b><br>An adversary exploits a sample, demonstration, test, or debug interface that is<br>unintentionally enabled on a production system, with the goal of gleaning<br>information or leveraging functionality that would otherwise be unavailable.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploit Non-Production Interfaces",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/121.html",
      "id": "121"
    },
    {
      "Description": "<b>CAPEC-124: Shared Resource Manipulation</b><br>An adversary exploits a resource shared between multiple applications, an<br>application pool or hardware pin multiplexing to affect behavior. Resources may<br>be shared between multiple applications or between multiple threads of a single<br>application. Resource sharing is usually accomplished through mutual access to a<br>single memory location or multiplexed hardware pins. If an adversary can<br>manipulate this shared resource (usually by co-opting one of the applications or<br>threads) the other applications or threads using the shared resource will often<br>continue to trust the validity of the compromised shared resource and use it in<br>their calculations. This can result in invalid trust assumptions, corruption of<br>additional data through the normal operations of the other users of the shared<br>resource, or even cause a crash or compromise of the sharing applications.",
      "color": "#2176ff",
      "size": 30,
      "label": "Shared Resource Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/124.html",
      "id": "124"
    },
    {
      "Description": "<b>CAPEC-125: Flooding</b><br>An adversary consumes the resources of a target by rapidly engaging in a large<br>number of interactions with the target. This type of attack generally exposes a<br>weakness in rate limiting or flow. When successful this attack prevents<br>legitimate users from accessing the service and can cause the target to crash.<br>This attack differs from resource depletion through leaks or allocations in that<br>the latter attacks do not rely on the volume of requests made to the target but<br>instead focus on manipulation of the target's operations. The key factor in a<br>flooding attack is the number of requests the adversary can make in a given<br>period of time. The greater this number, the more likely an attack is to succeed<br>against a given target.",
      "color": "#2176ff",
      "size": 30,
      "label": "Flooding",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/125.html",
      "id": "125"
    },
    {
      "Description": "<b>CAPEC-126: Path Traversal</b><br>An adversary uses path manipulation methods to exploit insufficient input<br>validation of a target to obtain access to data that should be not be<br>retrievable by ordinary well-formed requests. A typical variety of this attack<br>involves specifying a path to a desired file together with dot-dot-slash<br>characters, resulting in the file access API or function traversing out of the<br>intended directory structure and into the root file system. By replacing or<br>modifying the expected path information the access function or API retrieves the<br>file desired by the attacker. These attacks either involve the attacker<br>providing a complete path to a targeted file or using control characters (e.g.<br>path separators (/ or \\) and/or dots (.)) to reach desired directories or files.",
      "color": "#75aaff",
      "size": 18,
      "label": "Path Traversal",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/126.html",
      "id": "126"
    },
    {
      "Description": "<b>CAPEC-153: Input Data Manipulation</b><br>An attacker exploits a weakness in input validation by controlling the format,<br>structure, and composition of data to an input-processing interface. By<br>supplying input of a non-standard or unexpected form an attacker can adversely<br>impact the security of the target.",
      "color": "#2176ff",
      "size": 30,
      "label": "Input Data Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/153.html",
      "id": "153"
    },
    {
      "Description": "<b>CAPEC-127: Directory Indexing</b><br>An adversary crafts a request to a target that results in the target<br>listing/indexing the content of a directory as output. One common method of<br>triggering directory contents as output is to construct a request containing a<br>path that terminates in a directory name rather than a file name since many<br>applications are configured to provide a list of the directory's contents when<br>such a request is received. An adversary can use this to explore the directory<br>tree on a target as well as learn the names of files. This can often end up<br>revealing test files, backup files, temporary files, hidden files, configuration<br>files, user accounts, script contents, as well as naming conventions, all of<br>which can be used by an attacker to mount additional attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "Directory Indexing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/127.html",
      "id": "127"
    },
    {
      "Description": "<b>CAPEC-54: Query System for Information</b><br>An adversary, aware of an application's location (and possibly authorized to use<br>the application), probes an application's structure and evaluates its robustness<br>by submitting requests and examining responses. Often, this is accomplished by<br>sending variants of expected queries in the hope that these modified queries<br>might return information beyond what the expected set of queries would provide.",
      "color": "#75aaff",
      "size": 18,
      "label": "Query System for Information",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/54.html",
      "id": "54"
    },
    {
      "Description": "<b>CAPEC-128: Integer Attacks</b><br>An attacker takes advantage of the structure of integer variables to cause these<br>variables to assume values that are not expected by an application. For example,<br>adding one to the largest positive integer in a signed integer variable results<br>in a negative number. Negative numbers may be illegal in an application and the<br>application may prevent an attacker from providing them directly, but the<br>application may not consider that adding two positive numbers can create a<br>negative number do to the structure of integer storage formats.",
      "color": "#75aaff",
      "size": 18,
      "label": "Integer Attacks",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/128.html",
      "id": "128"
    },
    {
      "Description": "<b>CAPEC-129: Pointer Manipulation</b><br>This attack pattern involves an adversary manipulating a pointer within a target<br>application resulting in the application accessing an unintended memory<br>location. This can result in the crashing of the application or, for certain<br>pointer values, access to data that would not normally be possible or the<br>execution of arbitrary code. Since pointers are simply integer variables,<br>Integer Attacks may often be used in Pointer Attacks.",
      "color": "#2176ff",
      "size": 30,
      "label": "Pointer Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/129.html",
      "id": "129"
    },
    {
      "Description": "<b>CAPEC-13: Subverting Environment Variable Values</b><br>The adversary directly or indirectly modifies environment variables used by or<br>controlling the target software. The adversary's goal is to cause the target<br>software to deviate from its expected operation in a manner that benefits the<br>adversary.",
      "color": "#94ebff",
      "size": 10,
      "label": "Subverting Environment Variable Values",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/13.html",
      "id": "13"
    },
    {
      "Description": "<b>CAPEC-77: Manipulating User-Controlled Variables</b><br>This attack targets user controlled variables (DEBUG=1, PHP Globals, and So<br>Forth). An adversary can override variables leveraging user-supplied, untrusted<br>query variables directly used on the application server without any data<br>sanitization. In extreme cases, the adversary can change variables controlling<br>the business logic of the application. For instance, in languages like PHP, a<br>number of poorly set default configurations may allow the user to override<br>variables.",
      "color": "#75aaff",
      "size": 18,
      "label": "Manipulating User-Controlled Variables",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/77.html",
      "id": "77"
    },
    {
      "Description": "<b>CAPEC-130: Excessive Allocation</b><br>An adversary causes the target to allocate excessive resources to servicing the<br>attackers' request, thereby reducing the resources available for legitimate<br>services and degrading or denying services. Usually, this attack focuses on<br>memory allocation, but any finite resource on the target could be the attacked,<br>including bandwidth, processing cycles, or other resources. This attack does not<br>attempt to force this allocation through a large number of requests (that would<br>be Resource Depletion through Flooding) but instead uses one or a small number<br>of requests that are carefully formatted to force the target to allocate<br>excessive resources to service this request(s). Often this attack takes<br>advantage of a bug in the target to cause the target to allocate resources<br>vastly beyond what would be needed for a normal request.",
      "color": "#2176ff",
      "size": 30,
      "label": "Excessive Allocation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/130.html",
      "id": "130"
    },
    {
      "Description": "<b>CAPEC-131: Resource Leak Exposure</b><br>An adversary utilizes a resource leak on the target to deplete the quantity of<br>the resource available to service legitimate requests.",
      "color": "#2176ff",
      "size": 30,
      "label": "Resource Leak Exposure",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/131.html",
      "id": "131"
    },
    {
      "Description": "<b>CAPEC-132: Symlink Attack</b><br>An adversary positions a symbolic link in such a manner that the targeted user<br>or application accesses the link's endpoint, assuming that it is accessing a<br>file with the link's name.",
      "color": "#94ebff",
      "size": 10,
      "label": "Symlink Attack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/132.html",
      "id": "132"
    },
    {
      "Description": "<b>CAPEC-159: Redirect Access to Libraries</b><br>An adversary exploits a weakness in the way an application searches for external<br>libraries to manipulate the execution flow to point to an adversary supplied<br>library or code base. This pattern of attack allows the adversary to compromise<br>the application or server via the execution of unauthorized code. An application<br>typically makes calls to functions that are a part of libraries external to the<br>application. These libraries may be part of the operating system or they may be<br>third party libraries. If an adversary can redirect an application's attempts to<br>access these libraries to other libraries that the adversary supplies, the<br>adversary will be able to force the targeted application to execute arbitrary<br>code. This is especially dangerous if the targeted application has enhanced<br>privileges. Access can be redirected through a number of techniques, including<br>the use of symbolic links, search path modification, and relative path<br>manipulation.",
      "color": "#75aaff",
      "size": 18,
      "label": "Redirect Access to Libraries",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/159.html",
      "id": "159"
    },
    {
      "Description": "<b>CAPEC-133: Try All Common Switches</b><br>An attacker attempts to invoke all common switches and options in the target<br>application for the purpose of discovering weaknesses in the target. For<br>example, in some applications, adding a --debug switch causes debugging<br>information to be displayed, which can sometimes reveal sensitive processing or<br>configuration information to an attacker. This attack differs from other forms<br>of API abuse in that the attacker is indiscriminately attempting to invoke<br>options in the hope that one of them will work rather than specifically<br>targeting a known option. Nonetheless, even if the attacker is familiar with the<br>published options of a targeted application this attack method may still be<br>fruitful as it might discover unpublicized functionality.",
      "color": "#75aaff",
      "size": 18,
      "label": "Try All Common Switches",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/133.html",
      "id": "133"
    },
    {
      "Description": "<b>CAPEC-134: Email Injection</b><br>An adversary manipulates the headers and content of an email message by<br>injecting data via the use of delimiter characters native to the protocol.",
      "color": "#75aaff",
      "size": 18,
      "label": "Email Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/134.html",
      "id": "134"
    },
    {
      "Description": "<b>CAPEC-137: Parameter Injection</b><br>An adversary manipulates the content of request parameters for the purpose of<br>undermining the security of the target. Some parameter encodings use text<br>characters as separators. For example, parameters in a HTTP GET message are<br>encoded as name-value pairs separated by an ampersand (&). If an attacker can<br>supply text strings that are used to fill in these parameters, then they can<br>inject special characters used in the encoding scheme to add or modify<br>parameters. For example, if user input is fed directly into an HTTP GET request<br>and the user provides the value \"myInput&new_param=myValue\", then the input<br>parameter is set to myInput, but a new parameter (new_param) is also added with<br>a value of myValue. This can significantly change the meaning of the query that<br>is processed by the server. Any encoding scheme where parameters are identified<br>and separated by text characters is potentially vulnerable to this attack - the<br>HTTP GET encoding used above is just one example.",
      "color": "#2176ff",
      "size": 30,
      "label": "Parameter Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/137.html",
      "id": "137"
    },
    {
      "Description": "<b>CAPEC-135: Format String Injection</b><br>An adversary includes formatting characters in a string input field on the<br>target application. Most applications assume that users will provide static text<br>and may respond unpredictably to the presence of formatting character. For<br>example, in certain functions of the C programming languages such as printf, the<br>formatting character %s will print the contents of a memory location expecting<br>this location to identify a string and the formatting character %n prints the<br>number of DWORD written in the memory. An adversary can use this to read or<br>write to memory locations or files, or simply to manipulate the value of the<br>resulting text in unexpected ways. Reading or writing memory may result in<br>program crashes and writing memory could result in the execution of arbitrary<br>code if the adversary can write to the program stack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Format String Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/135.html",
      "id": "135"
    },
    {
      "Description": "<b>CAPEC-136: LDAP Injection</b><br>An attacker manipulates or crafts an LDAP query for the purpose of undermining<br>the security of the target. Some applications use user input to create LDAP<br>queries that are processed by an LDAP server. For example, a user might provide<br>their username during authentication and the username might be inserted in an<br>LDAP query during the authentication process. An attacker could use this input<br>to inject additional commands into an LDAP query that could disclose sensitive<br>information. For example, entering a * in the aforementioned query might return<br>information about all users on the system. This attack is very similar to an SQL<br>injection attack in that it manipulates a query to gather additional information<br>or coerce a particular return value.",
      "color": "#75aaff",
      "size": 18,
      "label": "LDAP Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/136.html",
      "id": "136"
    },
    {
      "Description": "<b>CAPEC-248: Command Injection</b><br>An adversary looking to execute a command of their choosing, injects new items<br>into an existing command thus modifying interpretation away from what was<br>intended. Commands in this context are often standalone strings that are<br>interpreted by a downstream component and cause specific responses. This type of<br>attack is possible when untrusted values are used to build these command<br>strings. Weaknesses in input validation or command construction can enable the<br>attack and lead to successful exploitation.",
      "color": "#2176ff",
      "size": 30,
      "label": "Command Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/248.html",
      "id": "248"
    },
    {
      "Description": "<b>CAPEC-138: Reflection Injection</b><br>An adversary supplies a value to the target application which is then used by<br>reflection methods to identify a class, method, or field. For example, in the<br>Java programming language the reflection libraries permit an application to<br>inspect, load, and invoke classes and their components by name. If an adversary<br>can control the input into these methods including the name of the<br>class/method/field or the parameters passed to methods, they can cause the<br>targeted application to invoke incorrect methods, read random fields, or even to<br>load and utilize malicious classes that the adversary created. This can lead to<br>the application revealing sensitive information, returning incorrect results, or<br>even having the adversary take control of the targeted application.",
      "color": "#75aaff",
      "size": 18,
      "label": "Reflection Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/138.html",
      "id": "138"
    },
    {
      "Description": "<b>CAPEC-139: Relative Path Traversal</b><br>An attacker exploits a weakness in input validation on the target by supplying a<br>specially constructed path utilizing dot and slash characters for the purpose of<br>obtaining access to arbitrary files or resources. An attacker modifies a known<br>path on the target in order to reach material that is not available through<br>intended channels. These attacks normally involve adding additional path<br>separators (/ or \\) and/or dots (.), or encodings thereof, in various<br>combinations in order to reach parent directories or entirely separate trees of<br>the target's directory structure.",
      "color": "#94ebff",
      "size": 10,
      "label": "Relative Path Traversal",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/139.html",
      "id": "139"
    },
    {
      "Description": "<b>CAPEC-14: Client-side Injection-induced Buffer Overflow</b><br>This type of attack exploits a buffer overflow vulnerability in targeted client<br>software through injection of malicious content from a custom-built hostile<br>service. This hostile service is created to deliver the correct content to the<br>client software. For example, if the client-side application is a browser, the<br>service will host a webpage that the browser loads.",
      "color": "#94ebff",
      "size": 10,
      "label": "Client-side Injection-induced Buffer Overflow",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/14.html",
      "id": "14"
    },
    {
      "Description": "<b>CAPEC-140: Bypassing of Intermediate Forms in Multiple-Form Sets</b><br>Some web applications require users to submit information through an ordered<br>sequence of web forms. This is often done if there is a very large amount of<br>information being collected or if information on earlier forms is used to<br>pre-populate fields or determine which additional information the application<br>needs to collect. An attacker who knows the names of the various forms in the<br>sequence may be able to explicitly type in the name of a later form and navigate<br>to it without first going through the previous forms. This can result in<br>incomplete collection of information, incorrect assumptions about the<br>information submitted by the attacker, or other problems that can impair the<br>functioning of the application.",
      "color": "#75aaff",
      "size": 18,
      "label": "Bypassing of Intermediate Forms in Multiple-Form Sets",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/140.html",
      "id": "140"
    },
    {
      "Description": "<b>CAPEC-74: Manipulating State</b><br>The adversary modifies state information maintained by the target software or<br>causes a state transition in hardware. If successful, the target will use this<br>tainted state and execute in an unintended manner. State management is an<br>important function within a software application. User state maintained by the<br>application can include usernames, payment information, browsing history as well<br>as application-specific contents such as items in a shopping cart. Manipulating<br>user state can be employed by an adversary to elevate privilege, conduct<br>fraudulent transactions or otherwise modify the flow of the application to<br>derive certain benefits. If there is a hardware logic error in a finite state<br>machine, the adversary can use this to put the system in an undefined state<br>which could cause a denial of service or exposure of secure data.",
      "color": "#2176ff",
      "size": 30,
      "label": "Manipulating State",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/74.html",
      "id": "74"
    },
    {
      "Description": "<b>CAPEC-141: Cache Poisoning</b><br>An attacker exploits the functionality of cache technologies to cause specific<br>data to be cached that aids the attackers' objectives. This describes any attack<br>whereby an attacker places incorrect or harmful material in cache. The targeted<br>cache can be an application's cache (e.g. a web browser cache) or a public cache<br>(e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or<br>clients will treat the corrupted cache value as valid. This can lead to a wide<br>range of exploits including redirecting web browsers towards sites that install<br>malware and repeatedly incorrect calculations based on the incorrect value.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cache Poisoning",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/141.html",
      "id": "141"
    },
    {
      "Description": "<b>CAPEC-161: Infrastructure Manipulation</b><br>An attacker exploits characteristics of the infrastructure of a network entity<br>in order to perpetrate attacks or information gathering on network objects or<br>effect a change in the ordinary information flow between network objects. Most<br>often, this involves manipulation of the routing of network messages so, instead<br>of arriving at their proper destination, they are directed towards an entity of<br>the attackers' choosing, usually a server controlled by the attacker. The victim<br>is often unaware that their messages are not being processed correctly. For<br>example, a targeted client may believe they are connecting to their own bank<br>but, in fact, be connecting to a Pharming site controlled by the attacker which<br>then collects the user's login information in order to hijack the actual bank<br>account.",
      "color": "#2176ff",
      "size": 30,
      "label": "Infrastructure Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/161.html",
      "id": "161"
    },
    {
      "Description": "<b>CAPEC-142: DNS Cache Poisoning</b><br>A domain name server translates a domain name (such as www.example.com) into an<br>IP address that Internet hosts use to contact Internet resources. An adversary<br>modifies a public DNS cache to cause certain names to resolve to incorrect<br>addresses that the adversary specifies. The result is that client applications<br>that rely upon the targeted cache for domain name resolution will be directed<br>not to the actual address of the specified domain name but to some other<br>address. Adversaries can use this to herd clients to sites that install malware<br>on the victim's computer or to masquerade as part of a Pharming attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "DNS Cache Poisoning",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/142.html",
      "id": "142"
    },
    {
      "Description": "<b>CAPEC-143: Detect Unpublicized Web Pages</b><br>An adversary searches a targeted web site for web pages that have not been<br>publicized. In doing this, the adversary may be able to gain access to<br>information that the targeted site did not intend to make public.",
      "color": "#94ebff",
      "size": 10,
      "label": "Detect Unpublicized Web Pages",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/143.html",
      "id": "143"
    },
    {
      "Description": "<b>CAPEC-150: Collect Data from Common Resource Locations</b><br>An adversary exploits well-known locations for resources for the purposes of<br>undermining the security of the target. In many, if not most systems, files and<br>resources are organized in a default tree structure. This can be useful for<br>adversaries because they often know where to look for resources or files that<br>are necessary for attacks. Even when the precise location of a targeted resource<br>may not be known, naming conventions may indicate a small area of the target<br>machine's file tree where the resources are typically located. For example,<br>configuration files are normally stored in the /etc director on Unix systems.<br>Adversaries can take advantage of this to commit other types of attacks.",
      "color": "#75aaff",
      "size": 18,
      "label": "Collect Data from Common Resource Locations",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/150.html",
      "id": "150"
    },
    {
      "Description": "<b>CAPEC-144: Detect Unpublicized Web Services</b><br>An adversary searches a targeted web site for web services that have not been<br>publicized. This attack can be especially dangerous since unpublished but<br>available services may not have adequate security controls placed upon them<br>given that an administrator may believe they are unreachable.",
      "color": "#94ebff",
      "size": 10,
      "label": "Detect Unpublicized Web Services",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/144.html",
      "id": "144"
    },
    {
      "Description": "<b>CAPEC-145: Checksum Spoofing</b><br>An adversary spoofs a checksum message for the purpose of making a payload<br>appear to have a valid corresponding checksum. Checksums are used to verify<br>message integrity. They consist of some value based on the value of the message<br>they are protecting. Hash codes are a common checksum mechanism. Both the sender<br>and recipient are able to compute the checksum based on the contents of the<br>message. If the message contents change between the sender and recipient, the<br>sender and recipient will compute different checksum values. Since the sender's<br>checksum value is transmitted with the message, the recipient would know that a<br>modification occurred. In checksum spoofing an adversary modifies the message<br>body and then modifies the corresponding checksum so that the recipient's<br>checksum calculation will match the checksum (created by the adversary) in the<br>message. This would prevent the recipient from realizing that a change occurred.",
      "color": "#94ebff",
      "size": 10,
      "label": "Checksum Spoofing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/145.html",
      "id": "145"
    },
    {
      "Description": "<b>CAPEC-148: Content Spoofing</b><br>An adversary modifies content to make it contain something other than what the<br>original content producer intended while keeping the apparent source of the<br>content unchanged. The term content spoofing is most often used to describe<br>modification of web pages hosted by a target to display the adversary's content<br>instead of the owner's content. However, any content can be spoofed, including<br>the content of email messages, file transfers, or the content of other network<br>communication protocols. Content can be modified at the source (e.g. modifying<br>the source file for a web page) or in transit (e.g. intercepting and modifying a<br>message between the sender and recipient). Usually, the adversary will attempt<br>to hide the fact that the content has been modified, but in some cases, such as<br>with web site defacement, this is not necessary. Content Spoofing can lead to<br>malware exposure, financial fraud (if the content governs financial<br>transactions), privacy violations, and other unwanted outcomes.",
      "color": "#2176ff",
      "size": 30,
      "label": "Content Spoofing",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/148.html",
      "id": "148"
    },
    {
      "Description": "<b>CAPEC-146: XML Schema Poisoning</b><br>An adversary corrupts or modifies the content of XML schema information passed<br>between a client and server for the purpose of undermining the security of the<br>target. XML Schemas provide the structure and content definitions for XML<br>documents. Schema poisoning is the ability to manipulate a schema either by<br>replacing or modifying it to compromise the programs that process documents that<br>use this schema.",
      "color": "#94ebff",
      "size": 10,
      "label": "XML Schema Poisoning",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/146.html",
      "id": "146"
    },
    {
      "Description": "<b>CAPEC-271: Schema Poisoning</b><br>An adversary corrupts or modifies the content of a schema for the purpose of<br>undermining the security of the target. Schemas provide the structure and<br>content definitions for resources used by an application. By replacing or<br>modifying a schema, the adversary can affect how the application handles or<br>interprets a resource, often leading to possible denial of service, entering<br>into an unexpected state, or recording incomplete data.",
      "color": "#75aaff",
      "size": 18,
      "label": "Schema Poisoning",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/271.html",
      "id": "271"
    },
    {
      "Description": "<b>CAPEC-147: XML Ping of the Death</b><br>An attacker initiates a resource depletion attack where a large number of small<br>XML messages are delivered at a sufficiently rapid rate to cause a denial of<br>service or crash of the target. Transactions such as repetitive SOAP<br>transactions can deplete resources faster than a simple flooding attack because<br>of the additional resources used by the SOAP protocol and the resources<br>necessary to process SOAP messages. The transactions used are immaterial as long<br>as they cause resource utilization on the target. In other words, this is a<br>normal flooding attack augmented by using messages that will require extra<br>processing on the target.",
      "color": "#94ebff",
      "size": 10,
      "label": "XML Ping of the Death",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/147.html",
      "id": "147"
    },
    {
      "Description": "<b>CAPEC-528: XML Flood</b><br>An adversary may execute a flooding attack using XML messages with the intent to<br>deny legitimate users access to a web service. These attacks are accomplished by<br>sending a large number of XML based requests and letting the service attempt to<br>parse each one. In many cases this type of an attack will result in a XML Denial<br>of Service (XDoS) due to an application becoming unstable, freezing, or<br>crashing.",
      "color": "#75aaff",
      "size": 18,
      "label": "XML Flood",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/528.html",
      "id": "528"
    },
    {
      "Description": "<b>CAPEC-149: Explore for Predictable Temporary File Names</b><br>An attacker explores a target to identify the names and locations of predictable<br>temporary files for the purpose of launching further attacks against the target.<br>This involves analyzing naming conventions and storage locations of the<br>temporary files created by a target application. If an attacker can predict the<br>names of temporary files they can use this information to mount other attacks,<br>such as information gathering and symlink attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "Explore for Predictable Temporary File Names",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/149.html",
      "id": "149"
    },
    {
      "Description": "<b>CAPEC-497: File Discovery</b><br>An adversary engages in probing and exploration activities to determine if<br>common key files exists. Such files often contain configuration and security<br>parameters of the targeted application, system or network. Using this knowledge<br>may often pave the way for more damaging attacks.",
      "color": "#75aaff",
      "size": 18,
      "label": "File Discovery",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/497.html",
      "id": "497"
    },
    {
      "Description": "<b>CAPEC-15: Command Delimiters</b><br>An attack of this type exploits a programs' vulnerabilities that allows an<br>attacker's commands to be concatenated onto a legitimate command with the intent<br>of targeting other resources such as the file system or database. The system<br>that uses a filter or denylist input validation, as opposed to allowlist<br>validation is vulnerable to an attacker who predicts delimiters (or combinations<br>of delimiters) not present in the filter or denylist. As with other injection<br>attacks, the attacker uses the command delimiter payload as an entry point to<br>tunnel through the application and activate additional attacks through SQL<br>queries, shell commands, network scanning, and so on.",
      "color": "#75aaff",
      "size": 18,
      "label": "Command Delimiters",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/15.html",
      "id": "15"
    },
    {
      "Description": "<b>CAPEC-151: Identity Spoofing</b><br>Identity Spoofing refers to the action of assuming (i.e., taking on) the<br>identity of some other entity (human or non-human) and then using that identity<br>to accomplish a goal. An adversary may craft messages that appear to come from a<br>different principle or use stolen / spoofed authentication credentials.",
      "color": "#2176ff",
      "size": 30,
      "label": "Identity Spoofing",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/151.html",
      "id": "151"
    },
    {
      "Description": "<b>CAPEC-154: Resource Location Spoofing</b><br>An adversary deceives an application or user and convinces them to request a<br>resource from an unintended location. By spoofing the location, the adversary<br>can cause an alternate resource to be used, often one that the adversary<br>controls and can be used to help them achieve their malicious goals.",
      "color": "#2176ff",
      "size": 30,
      "label": "Resource Location Spoofing",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/154.html",
      "id": "154"
    },
    {
      "Description": "<b>CAPEC-155: Screen Temporary Files for Sensitive Information</b><br>An adversary exploits the temporary, insecure storage of information by<br>monitoring the content of files used to store temp data during an application's<br>routine execution flow. Many applications use temporary files to accelerate<br>processing or to provide records of state across multiple executions of the<br>application. Sometimes, however, these temporary files may end up storing<br>sensitive information. By screening an application's temporary files, an<br>adversary might be able to discover such sensitive information. For example, web<br>browsers often cache content to accelerate subsequent lookups. If the content<br>contains sensitive information then the adversary could recover this from the<br>web cache.",
      "color": "#94ebff",
      "size": 10,
      "label": "Screen Temporary Files for Sensitive Information",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/155.html",
      "id": "155"
    },
    {
      "Description": "<b>CAPEC-157: Sniffing Attacks</b><br>In this attack pattern, the adversary intercepts information transmitted between<br>two third parties. The adversary must be able to observe, read, and/or hear the<br>communication traffic, but not necessarily block the communication or change its<br>content. Any transmission medium can theoretically be sniffed if the adversary<br>can examine the contents between the sender and recipient. Sniffing Attacks are<br>similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive.<br>AiTM attacks are predominantly active and often alter the content of the<br>communications themselves.",
      "color": "#75aaff",
      "size": 18,
      "label": "Sniffing Attacks",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/157.html",
      "id": "157"
    },
    {
      "Description": "<b>CAPEC-158: Sniffing Network Traffic</b><br>In this attack pattern, the adversary monitors network traffic between nodes of<br>a public or multicast network in an attempt to capture sensitive information at<br>the protocol level. Network sniffing applications can reveal TCP/IP, DNS,<br>Ethernet, and other low-level network communication information. The adversary<br>takes a passive role in this attack pattern and simply observes and analyzes the<br>traffic. The adversary may precipitate or indirectly influence the content of<br>the observed transaction, but is never the intended recipient of the target<br>information.",
      "color": "#94ebff",
      "size": 10,
      "label": "Sniffing Network Traffic",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/158.html",
      "id": "158"
    },
    {
      "Description": "<b>CAPEC-16: Dictionary-based Password Attack</b><br>An attacker tries each of the words in a dictionary as passwords to gain access<br>to the system via some user's account. If the password chosen by the user was a<br>word within the dictionary, this attack will be successful (in the absence of<br>other mitigations). This is a specific instance of the password brute forcing<br>attack pattern. Dictionary Attacks differ from similar attacks such as Password<br>Spraying (CAPEC-565) and Credential Stuffing (CAPEC-600), since they leverage<br>unknown username/password combinations and don't care about inducing account<br>lockouts.",
      "color": "#94ebff",
      "size": 10,
      "label": "Dictionary-based Password Attack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/16.html",
      "id": "16"
    },
    {
      "Description": "<b>CAPEC-49: Password Brute Forcing</b><br>An adversary tries every possible value for a password until they succeed. A<br>brute force attack, if feasible computationally, will always be successful<br>because it will essentially go through all possible passwords given the alphabet<br>used (lower case letters, upper case letters, numbers, symbols, etc.) and the<br>maximum length of the password.",
      "color": "#75aaff",
      "size": 18,
      "label": "Password Brute Forcing",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/49.html",
      "id": "49"
    },
    {
      "Description": "<b>CAPEC-160: Exploit Script-Based APIs</b><br>Some APIs support scripting instructions as arguments. Methods that take<br>scripted instructions (or references to scripted instructions) can be very<br>flexible and powerful. However, if an attacker can specify the script that<br>serves as input to these methods they can gain access to a great deal of<br>functionality. For example, HTML pages support <script> tags that allow<br>scripting languages to be embedded in the page and then interpreted by the<br>receiving web browser. If the content provider is malicious, these scripts can<br>compromise the client application. Some applications may even execute the<br>scripts under their own identity (rather than the identity of the user providing<br>the script) which can allow attackers to perform activities that would otherwise<br>be denied to them.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploit Script-Based APIs",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/160.html",
      "id": "160"
    },
    {
      "Description": "<b>CAPEC-162: Manipulating Hidden Fields</b><br>An adversary exploits a weakness in the server's trust of client-side processing<br>by modifying data on the client-side, such as price information, and then<br>submitting this data to the server, which processes the modified data. For<br>example, eShoplifting is a data manipulation attack against an on-line merchant<br>during a purchasing transaction. The manipulation of price, discount or quantity<br>fields in the transaction message allows the adversary to acquire items at a<br>lower cost than the merchant intended. The adversary performs a normal<br>purchasing transaction but edits hidden fields within the HTML form response<br>that store price or other information to give themselves a better deal. The<br>merchant then uses the modified pricing information in calculating the cost of<br>the selected items.",
      "color": "#94ebff",
      "size": 10,
      "label": "Manipulating Hidden Fields",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/162.html",
      "id": "162"
    },
    {
      "Description": "<b>CAPEC-163: Spear Phishing</b><br>An adversary targets a specific user or group with a Phishing (CAPEC-98) attack<br>tailored to a category of users in order to have maximum relevance and deceptive<br>capability. Spear Phishing is an enhanced version of the Phishing attack<br>targeted to a specific user or group. The quality of the targeted email is<br>usually enhanced by appearing to come from a known or trusted entity. If the<br>email account of some trusted entity has been compromised the message may be<br>digitally signed. The message will contain information specific to the targeted<br>users that will enhance the probability that they will follow the URL to the<br>compromised site. For example, the message may indicate knowledge of the targets<br>employment, residence, interests, or other information that suggests<br>familiarity. As soon as the user follows the instructions in the message, the<br>attack proceeds as a standard Phishing attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "Spear Phishing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/163.html",
      "id": "163"
    },
    {
      "Description": "<b>CAPEC-98: Phishing</b><br>Phishing is a social engineering technique where an attacker masquerades as a<br>legitimate entity with which the victim might do business in order to prompt the<br>user to reveal some confidential information (very frequently authentication<br>credentials) that can later be used by an attacker. Phishing is essentially a<br>form of information gathering or \"fishing\" for information.",
      "color": "#75aaff",
      "size": 18,
      "label": "Phishing",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/98.html",
      "id": "98"
    },
    {
      "Description": "<b>CAPEC-164: Mobile Phishing</b><br>An adversary targets mobile phone users with a phishing attack for the purpose<br>of soliciting account passwords or sensitive information from the user. Mobile<br>Phishing is a variation of the Phishing social engineering technique where the<br>attack is initiated via a text or SMS message, rather than email. The user is<br>enticed to provide information or visit a compromised web site via this message.<br>Apart from the manner in which the attack is initiated, the attack proceeds as a<br>standard Phishing attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "Mobile Phishing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/164.html",
      "id": "164"
    },
    {
      "Description": "<b>CAPEC-165: File Manipulation</b><br>An attacker modifies file contents or attributes (such as extensions or names)<br>of files in a manner to cause incorrect processing by an application. Attackers<br>use this class of attacks to cause applications to enter unstable states,<br>overwrite or expose sensitive information, and even execute arbitrary code with<br>the application's privileges. This class of attacks differs from attacks on<br>configuration information (even if file-based) in that file manipulation causes<br>the file processing to result in non-standard behaviors, such as buffer<br>overflows or use of the incorrect interpreter. Configuration attacks rely on the<br>application interpreting files correctly in order to insert harmful<br>configuration information. Likewise, resource location attacks rely on<br>controlling an application's ability to locate files, whereas File Manipulation<br>attacks do not require the application to look in a non-default location,<br>although the two classes of attacks are often combined.",
      "color": "#2176ff",
      "size": 30,
      "label": "File Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/165.html",
      "id": "165"
    },
    {
      "Description": "<b>CAPEC-166: Force the System to Reset Values</b><br>An attacker forces the target into a previous state in order to leverage<br>potential weaknesses in the target dependent upon a prior configuration or<br>state-dependent factors. Even in cases where an attacker may not be able to<br>directly control the configuration of the targeted application, they may be able<br>to reset the configuration to a prior state since many applications implement<br>reset functions.",
      "color": "#75aaff",
      "size": 18,
      "label": "Force the System to Reset Values",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/166.html",
      "id": "166"
    },
    {
      "Description": "<b>CAPEC-167: White Box Reverse Engineering</b><br>An attacker discovers the structure, function, and composition of a type of<br>computer software through white box analysis techniques. White box techniques<br>involve methods which can be applied to a piece of software when an executable<br>or some other compiled object can be directly subjected to analysis, revealing<br>at least a portion of its machine instructions that can be observed upon<br>execution.",
      "color": "#75aaff",
      "size": 18,
      "label": "White Box Reverse Engineering",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/167.html",
      "id": "167"
    },
    {
      "Description": "<b>CAPEC-188: Reverse Engineering</b><br>An adversary discovers the structure, function, and composition of an object,<br>resource, or system by using a variety of analysis techniques to effectively<br>determine how the analyzed entity was constructed or operates. The goal of<br>reverse engineering is often to duplicate the function, or a part of the<br>function, of an object in order to duplicate or \"back engineer\" some aspect of<br>its functioning. Reverse engineering techniques can be applied to mechanical<br>objects, electronic devices, or software, although the methodology and<br>techniques involved in each type of analysis differ widely.",
      "color": "#2176ff",
      "size": 30,
      "label": "Reverse Engineering",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/188.html",
      "id": "188"
    },
    {
      "Description": "<b>CAPEC-168: Windows ::DATA Alternate Data Stream</b><br>An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams<br>(ADS) to undermine system security. ADS allows multiple \"files\" to be stored in<br>one directory entry referenced as filename:streamname. One or more alternate<br>data streams may be stored in any file or directory. Normal Microsoft utilities<br>do not show the presence of an ADS stream attached to a file. The additional<br>space for the ADS is not recorded in the displayed file size. The additional<br>space for ADS is accounted for in the used space on the volume. An ADS can be<br>any type of file. ADS are copied by standard Microsoft utilities between NTFS<br>volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and<br>data from detection by normal system utilities. Many anti-virus programs do not<br>check for or scan ADS. Windows Vista does have a switch (-R) on the command line<br>DIR command that will display alternate streams.",
      "color": "#94ebff",
      "size": 10,
      "label": "Windows ::DATA Alternate Data Stream",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/168.html",
      "id": "168"
    },
    {
      "Description": "<b>CAPEC-636: Hiding Malicious Data or Code within Files</b><br>Files on various operating systems can have a complex format which allows for<br>the storage of other data, in addition to its contents. Often this is metadata<br>about the file, such as a cached thumbnail for an image file. Unless utilities<br>are invoked in a particular way, this data is not visible during the normal use<br>of the file. It is possible for an attacker to store malicious data or code<br>using these facilities, which would be difficult to discover.",
      "color": "#75aaff",
      "size": 18,
      "label": "Hiding Malicious Data or Code within Files",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/636.html",
      "id": "636"
    },
    {
      "Description": "<b>CAPEC-169: Footprinting</b><br>An adversary engages in probing and exploration activities to identify<br>constituents and properties of the target.",
      "color": "#2176ff",
      "size": 30,
      "label": "Footprinting",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/169.html",
      "id": "169"
    },
    {
      "Description": "<b>CAPEC-17: Using Malicious Files</b><br>An attack of this type exploits a system's configuration that allows an<br>adversary to either directly access an executable file, for example through<br>shell access; or in a possible worst case allows an adversary to upload a file<br>and then execute it. Web servers, ftp servers, and message oriented middleware<br>systems which have many integration points are particularly vulnerable, because<br>both the programmers and the administrators must be in synch regarding the<br>interfaces and the correct privileges for each interface.",
      "color": "#75aaff",
      "size": 18,
      "label": "Using Malicious Files",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/17.html",
      "id": "17"
    },
    {
      "Description": "<b>CAPEC-170: Web Application Fingerprinting</b><br>An attacker sends a series of probes to a web application in order to elicit<br>version-dependent and type-dependent behavior that assists in identifying the<br>target. An attacker could learn information such as software versions, error<br>pages, and response headers, variations in implementations of the HTTP protocol,<br>directory structures, and other similar information about the targeted service.<br>This information can then be used by an attacker to formulate a targeted attack<br>plan. While web application fingerprinting is not intended to be damaging<br>(although certain activities, such as network scans, can sometimes cause<br>disruptions to vulnerable applications inadvertently) it may often pave the way<br>for more damaging attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "Web Application Fingerprinting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/170.html",
      "id": "170"
    },
    {
      "Description": "<b>CAPEC-541: Application Fingerprinting</b><br>An adversary engages in fingerprinting activities to determine the type or<br>version of an application installed on a remote target.",
      "color": "#75aaff",
      "size": 18,
      "label": "Application Fingerprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/541.html",
      "id": "541"
    },
    {
      "Description": "<b>CAPEC-174: Flash Parameter Injection</b><br>An adversary takes advantage of improper data validation to inject malicious<br>global parameters into a Flash file embedded within an HTML document. Flash<br>files can leverage user-submitted data to configure the Flash document and<br>access the embedding HTML document.",
      "color": "#94ebff",
      "size": 10,
      "label": "Flash Parameter Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/174.html",
      "id": "174"
    },
    {
      "Description": "<b>CAPEC-182: Flash Injection</b><br>An attacker tricks a victim to execute malicious flash content that executes<br>commands or makes flash calls specified by the attacker. One example of this<br>attack is cross-site flashing, an attacker controlled parameter to a reference<br>call loads from content specified by the attacker.",
      "color": "#75aaff",
      "size": 18,
      "label": "Flash Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/182.html",
      "id": "182"
    },
    {
      "Description": "<b>CAPEC-175: Code Inclusion</b><br>An adversary exploits a weakness on the target to force arbitrary code to be<br>retrieved locally or from a remote location and executed. This differs from code<br>injection in that code injection involves the direct inclusion of code while<br>code inclusion involves the addition or replacement of a reference to a code<br>file, which is subsequently loaded by the target and used as part of the code of<br>some application.",
      "color": "#2176ff",
      "size": 30,
      "label": "Code Inclusion",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/175.html",
      "id": "175"
    },
    {
      "Description": "<b>CAPEC-176: Configuration/Environment Manipulation</b><br>An attacker manipulates files or settings external to a target application which<br>affect the behavior of that application. For example, many applications use<br>external configuration files and libraries - modification of these entities or<br>otherwise affecting the application's ability to use them would constitute a<br>configuration/environment manipulation attack.",
      "color": "#2176ff",
      "size": 30,
      "label": "Configuration/Environment Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/176.html",
      "id": "176"
    },
    {
      "Description": "<b>CAPEC-177: Create files with the same name as files protected with a higher classification</b><br>An attacker exploits file location algorithms in an operating system or<br>application by creating a file with the same name as a protected or privileged<br>file. The attacker could manipulate the system if the attacker-created file is<br>trusted by the operating system or an application component that attempts to<br>load the original file. Applications often load or include external files, such<br>as libraries or configuration files. These files should be protected against<br>malicious manipulation. However, if the application only uses the name of the<br>file when locating it, an attacker may be able to create a file with the same<br>name and place it in a directory that the application will search before the<br>directory with the legitimate file is searched. Because the attackers' file is<br>discovered first, it would be used by the target application. This attack can be<br>extremely destructive if the referenced file is executable and/or is granted<br>special privileges based solely on having a particular name.",
      "color": "#94ebff",
      "size": 10,
      "label": "Create files with the same name as files protected with a higher classification",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/177.html",
      "id": "177"
    },
    {
      "Description": "<b>CAPEC-178: Cross-Site Flashing</b><br>An attacker is able to trick the victim into executing a Flash document that<br>passes commands or calls to a Flash player browser plugin, allowing the attacker<br>to exploit native Flash functionality in the client browser. This attack pattern<br>occurs where an attacker can provide a crafted link to a Flash document (SWF<br>file) which, when followed, will cause additional malicious instructions to be<br>executed. The attacker does not need to serve or control the Flash document. The<br>attack takes advantage of the fact that Flash files can reference external URLs.<br>If variables that serve as URLs that the Flash application references can be<br>controlled through parameters, then by creating a link that includes values for<br>those parameters, an attacker can cause arbitrary content to be referenced and<br>possibly executed by the targeted Flash application.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cross-Site Flashing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/178.html",
      "id": "178"
    },
    {
      "Description": "<b>CAPEC-179: Calling Micro-Services Directly</b><br>An attacker is able to discover and query Micro-services at a web location and<br>thereby expose the Micro-services to further exploitation by gathering<br>information about their implementation and function. Micro-services in web pages<br>allow portions of a page to connect to the server and update content without<br>needing to cause the entire page to update. This allows user activity to change<br>portions of the page more quickly without causing disruptions elsewhere.",
      "color": "#75aaff",
      "size": 18,
      "label": "Calling Micro-Services Directly",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/179.html",
      "id": "179"
    },
    {
      "Description": "<b>CAPEC-554: Functionality Bypass</b><br>An adversary attacks a system by bypassing some or all functionality intended to<br>protect it. Often, a system user will think that protection is in place, but the<br>functionality behind those protections has been disabled by the adversary.",
      "color": "#2176ff",
      "size": 30,
      "label": "Functionality Bypass",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/554.html",
      "id": "554"
    },
    {
      "Description": "<b>CAPEC-18: XSS Targeting Non-Script Elements</b><br>This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are<br>embedded in elements that are not expected to host scripts such as image tags<br>(<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be<br>subject to the same input validation, output validation, and other content<br>filtering and checking routines, so this can create an opportunity for an<br>adversary to tunnel through the application's elements and launch a XSS attack<br>through other elements. As with all remote attacks, it is important to<br>differentiate the ability to launch an attack (such as probing an internal<br>network for unpatched servers) and the ability of the remote adversary to<br>collect and interpret the output of said attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting Non-Script Elements",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/18.html",
      "id": "18"
    },
    {
      "Description": "<b>CAPEC-591: Reflected XSS</b><br>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious<br>script is \"reflected\" off a vulnerable web application and then executed by a<br>victim's browser. The process starts with an adversary delivering a malicious<br>script to a victim and convincing the victim to send the script to the<br>vulnerable web application.",
      "color": "#94ebff",
      "size": 10,
      "label": "Reflected XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/591.html",
      "id": "591"
    },
    {
      "Description": "<b>CAPEC-592: Stored XSS</b><br>An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious<br>script is persistently \"stored\" within the data storage of a vulnerable web<br>application as valid input.",
      "color": "#94ebff",
      "size": 10,
      "label": "Stored XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/592.html",
      "id": "592"
    },
    {
      "Description": "<b>CAPEC-588: DOM-Based XSS</b><br>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious<br>script is inserted into the client-side HTML being parsed by a web browser.<br>Content served by a vulnerable web application includes script code used to<br>manipulate the Document Object Model (DOM). This script code either does not<br>properly validate input, or does not perform proper output encoding, thus<br>creating an opportunity for an adversary to inject a malicious script launch a<br>XSS attack. A key distinction between other XSS attacks and DOM-based attacks is<br>that in other XSS attacks, the malicious script runs when the vulnerable web<br>page is initially loaded, while a DOM-based attack executes sometime after the<br>page loads. Another distinction of DOM-based attacks is that in some cases, the<br>malicious script is never sent to the vulnerable web server at all. An attack<br>like this is guaranteed to bypass any server-side filtering attempts to protect<br>users.",
      "color": "#94ebff",
      "size": 10,
      "label": "DOM-Based XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/588.html",
      "id": "588"
    },
    {
      "Description": "<b>CAPEC-180: Exploiting Incorrectly Configured Access Control Security Levels</b><br>An attacker exploits a weakness in the configuration of access controls and is<br>able to bypass the intended protection that these measures guard against and<br>thereby obtain unauthorized access to the system or network. Sensitive<br>functionality should always be protected with access controls. However<br>configuring all but the most trivial access control systems can be very<br>complicated and there are many opportunities for mistakes. If an attacker can<br>learn of incorrectly configured access security settings, they may be able to<br>exploit this in an attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploiting Incorrectly Configured Access Control Security Levels",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/180.html",
      "id": "180"
    },
    {
      "Description": "<b>CAPEC-181: Flash File Overlay</b><br>An attacker creates a transparent overlay using flash in order to intercept user<br>actions for the purpose of performing a clickjacking attack. In this technique,<br>the Flash file provides a transparent overlay over HTML content. Because the<br>Flash application is on top of the content, user actions, such as clicks, are<br>caught by the Flash application rather than the underlying HTML. The action is<br>then interpreted by the overlay to perform the actions the attacker wishes.",
      "color": "#94ebff",
      "size": 10,
      "label": "Flash File Overlay",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/181.html",
      "id": "181"
    },
    {
      "Description": "<b>CAPEC-183: IMAP/SMTP Command Injection</b><br>An adversary exploits weaknesses in input validation on web-mail servers to<br>execute commands on the IMAP/SMTP server. Web-mail servers often sit between the<br>Internet and the IMAP or SMTP mail server. User requests are received by the<br>web-mail servers which then query the back-end mail server for the requested<br>information and return this response to the user. In an IMAP/SMTP command<br>injection attack, mail-server commands are embedded in parts of the request sent<br>to the web-mail server. If the web-mail server fails to adequately sanitize<br>these requests, these commands are then sent to the back-end mail server when it<br>is queried by the web-mail server, where the commands are then executed. This<br>attack can be especially dangerous since administrators may assume that the<br>back-end server is protected against direct Internet access and therefore may<br>not secure it adequately against the execution of malicious commands.",
      "color": "#75aaff",
      "size": 18,
      "label": "IMAP/SMTP Command Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/183.html",
      "id": "183"
    },
    {
      "Description": "<b>CAPEC-184: Software Integrity Attack</b><br>An attacker initiates a series of events designed to cause a user, program,<br>server, or device to perform actions which undermine the integrity of software<br>code, device data structures, or device firmware, achieving the modification of<br>the target's integrity to achieve an insecure state.",
      "color": "#2176ff",
      "size": 30,
      "label": "Software Integrity Attack",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/184.html",
      "id": "184"
    },
    {
      "Description": "<b>CAPEC-185: Malicious Software Download</b><br>An attacker uses deceptive methods to cause a user or an automated process to<br>download and install dangerous code that originates from an attacker controlled<br>source. There are several variations to this strategy of attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Malicious Software Download",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/185.html",
      "id": "185"
    },
    {
      "Description": "<b>CAPEC-186: Malicious Software Update</b><br>An adversary uses deceptive methods to cause a user or an automated process to<br>download and install dangerous code believed to be a valid update that<br>originates from an adversary controlled source.",
      "color": "#75aaff",
      "size": 18,
      "label": "Malicious Software Update",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/186.html",
      "id": "186"
    },
    {
      "Description": "<b>CAPEC-187: Malicious Automated Software Update via Redirection</b><br>An attacker exploits two layers of weaknesses in server or client software for<br>automated update mechanisms to undermine the integrity of the target code-base.<br>The first weakness involves a failure to properly authenticate a server as a<br>source of update or patch content. This type of weakness typically results from<br>authentication mechanisms which can be defeated, allowing a hostile server to<br>satisfy the criteria that establish a trust relationship. The second weakness is<br>a systemic failure to validate the identity and integrity of code downloaded<br>from a remote location, hence the inability to distinguish malicious code from a<br>legitimate update.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Automated Software Update via Redirection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/187.html",
      "id": "187"
    },
    {
      "Description": "<b>CAPEC-189: Black Box Reverse Engineering</b><br>An adversary discovers the structure, function, and composition of a type of<br>computer software through black box analysis techniques. 'Black Box' methods<br>involve interacting with the software indirectly, in the absence of direct<br>access to the executable object. Such analysis typically involves interacting<br>with the software at the boundaries of where the software interfaces with a<br>larger execution environment, such as input-output vectors, libraries, or APIs.<br>Black Box Reverse Engineering also refers to gathering physical side effects of<br>a hardware device, such as electromagnetic radiation or sounds.",
      "color": "#75aaff",
      "size": 18,
      "label": "Black Box Reverse Engineering",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/189.html",
      "id": "189"
    },
    {
      "Description": "<b>CAPEC-19: Embedding Scripts within Scripts</b><br>An adversary leverages the capability to execute their own script by embedding<br>it within other scripts that the target software is likely to execute due to<br>programs' vulnerabilities that are brought on by allowing remote hosts to<br>execute scripts.",
      "color": "#75aaff",
      "size": 18,
      "label": "Embedding Scripts within Scripts",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/19.html",
      "id": "19"
    },
    {
      "Description": "<b>CAPEC-242: Code Injection</b><br>An adversary exploits a weakness in input validation on the target to inject new<br>code into that which is currently executing. This differs from code inclusion in<br>that code inclusion involves the addition or replacement of a reference to a<br>code file, which is subsequently loaded by the target and used as part of the<br>code of some application.",
      "color": "#2176ff",
      "size": 30,
      "label": "Code Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/242.html",
      "id": "242"
    },
    {
      "Description": "<b>CAPEC-190: Reverse Engineer an Executable to Expose Assumed Hidden Functionality</b><br>An attacker analyzes a binary file or executable for the purpose of discovering<br>the structure, function, and possibly source-code of the file by using a variety<br>of analysis techniques to effectively determine how the software functions and<br>operates. This type of analysis is also referred to as Reverse Code Engineering,<br>as techniques exist for extracting source code from an executable. Several<br>techniques are often employed for this purpose, both black box and white box.<br>The use of computer bus analyzers and packet sniffers allows the binary to be<br>studied at a level of interactions with its computing environment, such as a<br>host OS, inter-process communication, and/or network communication. This type of<br>analysis falls into the 'black box' category because it involves behavioral<br>analysis of the software without reference to source code, object code, or<br>protocol specifications.",
      "color": "#94ebff",
      "size": 10,
      "label": "Reverse Engineer an Executable to Expose Assumed Hidden Functionality",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/190.html",
      "id": "190"
    },
    {
      "Description": "<b>CAPEC-191: Read Sensitive Constants Within an Executable</b><br>An adversary engages in activities to discover any sensitive constants present<br>within the compiled code of an executable. These constants may include literal<br>ASCII strings within the file itself, or possibly strings hard-coded into<br>particular routines that can be revealed by code refactoring methods including<br>static and dynamic analysis.",
      "color": "#94ebff",
      "size": 10,
      "label": "Read Sensitive Constants Within an Executable",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/191.html",
      "id": "191"
    },
    {
      "Description": "<b>CAPEC-192: Protocol Analysis</b><br>An adversary engages in activities to decipher and/or decode protocol<br>information for a network or application communication protocol used for<br>transmitting information between interconnected nodes or systems on a<br>packet-switched data network. While this type of analysis involves the analysis<br>of a networking protocol inherently, it does not require the presence of an<br>actual or physical network.",
      "color": "#2176ff",
      "size": 30,
      "label": "Protocol Analysis",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/192.html",
      "id": "192"
    },
    {
      "Description": "<b>CAPEC-193: PHP Remote File Inclusion</b><br>In this pattern the adversary is able to load and execute arbitrary code<br>remotely available from the application. This is usually accomplished through an<br>insecurely configured PHP runtime environment and an improperly sanitized<br>\"include\" or \"require\" call, which the user can then control to point to any<br>web-accessible file. This allows adversaries to hijack the targeted application<br>and force it to execute their own instructions.",
      "color": "#94ebff",
      "size": 10,
      "label": "PHP Remote File Inclusion",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/193.html",
      "id": "193"
    },
    {
      "Description": "<b>CAPEC-194: Fake the Source of Data</b><br>An adversary takes advantage of improper authentication to provide data or<br>services under a falsified identity. The purpose of using the falsified identity<br>may be to prevent traceability of the provided data or to assume the rights<br>granted to another individual. One of the simplest forms of this attack would be<br>the creation of an email message with a modified \"From\" field in order to appear<br>that the message was sent from someone other than the actual sender. The root of<br>the attack (in this case the email system) fails to properly authenticate the<br>source and this results in the reader incorrectly performing the instructed<br>action. Results of the attack vary depending on the details of the attack, but<br>common results include privilege escalation, obfuscation of other attacks, and<br>data corruption/manipulation.",
      "color": "#75aaff",
      "size": 18,
      "label": "Fake the Source of Data",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/194.html",
      "id": "194"
    },
    {
      "Description": "<b>CAPEC-195: Principal Spoof</b><br>A Principal Spoof is a form of Identity Spoofing where an adversary pretends to<br>be some other person in an interaction. This is often accomplished by crafting a<br>message (either written, verbal, or visual) that appears to come from a person<br>other than the adversary. Phishing and Pharming attacks often attempt to do this<br>so that their attempts to gather sensitive information appear to come from a<br>legitimate source. A Principal Spoof does not use stolen or spoofed<br>authentication credentials, instead relying on the appearance and content of the<br>message to reflect identity.",
      "color": "#75aaff",
      "size": 18,
      "label": "Principal Spoof",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/195.html",
      "id": "195"
    },
    {
      "Description": "<b>CAPEC-196: Session Credential Falsification through Forging</b><br>An attacker creates a false but functional session credential in order to gain<br>or usurp access to a service. Session credentials allow users to identify<br>themselves to a service after an initial authentication without needing to<br>resend the authentication information (usually a username and password) with<br>every message. If an attacker is able to forge valid session credentials they<br>may be able to bypass authentication or piggy-back off some other authenticated<br>user's session. This attack differs from Reuse of Session IDs and Session<br>Sidejacking attacks in that in the latter attacks an attacker uses a previous or<br>existing credential without modification while, in a forging attack, the<br>attacker must create their own credential, although it may be based on<br>previously observed credentials.",
      "color": "#75aaff",
      "size": 18,
      "label": "Session Credential Falsification through Forging",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/196.html",
      "id": "196"
    },
    {
      "Description": "<b>CAPEC-21: Exploitation of Trusted Identifiers</b><br>An adversary guesses, obtains, or \"rides\" a trusted identifier (e.g. session ID,<br>resource ID, cookie, etc.) to perform authorized actions under the guise of an<br>authenticated user or service.",
      "color": "#2176ff",
      "size": 30,
      "label": "Exploitation of Trusted Identifiers",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/21.html",
      "id": "21"
    },
    {
      "Description": "<b>CAPEC-197: Exponential Data Expansion</b><br>An adversary submits data to a target application which contains nested<br>exponential data expansion to produce excessively large output. Many data format<br>languages allow the definition of macro-like structures that can be used to<br>simplify the creation of complex structures. However, this capability can be<br>abused to create excessive demands on a processor's CPU and memory. A small<br>number of nested expansions can result in an exponential growth in demands on<br>memory.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exponential Data Expansion",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/197.html",
      "id": "197"
    },
    {
      "Description": "<b>CAPEC-230: Serialized Data with Nested Payloads</b><br>Applications often need to transform data in and out of a data format (e.g., XML<br>and YAML) by using a parser. It may be possible for an adversary to inject data<br>that may have an adverse effect on the parser when it is being processed. Many<br>data format languages allow the definition of macro-like structures that can be<br>used to simplify the creation of complex structures. By nesting these<br>structures, causing the data to be repeatedly substituted, an adversary can<br>cause the parser to consume more resources while processing, causing excessive<br>memory consumption and CPU utilization.",
      "color": "#75aaff",
      "size": 18,
      "label": "Serialized Data with Nested Payloads",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/230.html",
      "id": "230"
    },
    {
      "Description": "<b>CAPEC-198: XSS Targeting Error Pages</b><br>An adversary distributes a link (or possibly some other query structure) with a<br>request to a third party web server that is malformed and also contains a block<br>of exploit code in order to have the exploit become live code in the resulting<br>error page.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting Error Pages",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/198.html",
      "id": "198"
    },
    {
      "Description": "<b>CAPEC-199: XSS Using Alternate Syntax</b><br>An adversary uses alternate forms of keywords or commands that result in the<br>same action as the primary form but which may not be caught by filters. For<br>example, many keywords are processed in a case insensitive manner. If the site's<br>web filtering algorithm does not convert all tags into a consistent case before<br>the comparison with forbidden keywords it is possible to bypass filters (e.g.,<br>incomplete black lists) by using an alternate case structure. For example, the<br>\"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass<br>filters where \"script\" is the only form tested. Other variants using different<br>syntax representations are also possible as well as using pollution<br>meta-characters or entities that are eventually ignored by the rendering engine.<br>The attack can result in the execution of otherwise prohibited functionality.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Alternate Syntax",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/199.html",
      "id": "199"
    },
    {
      "Description": "<b>CAPEC-2: Inducing Account Lockout</b><br>An attacker leverages the security functionality of the system aimed at<br>thwarting potential attacks to launch a denial of service attack against a<br>legitimate system user. Many systems, for instance, implement a password<br>throttling mechanism that locks an account after a certain number of incorrect<br>log in attempts. An attacker can leverage this throttling mechanism to lock a<br>legitimate user out of their own account. The weakness that is being leveraged<br>by an attacker is the very security feature that has been put in place to<br>counteract attacks.",
      "color": "#75aaff",
      "size": 18,
      "label": "Inducing Account Lockout",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/2.html",
      "id": "2"
    },
    {
      "Description": "<b>CAPEC-20: Encryption Brute Forcing</b><br>An attacker, armed with the cipher text and the encryption algorithm used,<br>performs an exhaustive (brute force) search on the key space to determine the<br>key that decrypts the cipher text to obtain the plaintext.",
      "color": "#75aaff",
      "size": 18,
      "label": "Encryption Brute Forcing",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/20.html",
      "id": "20"
    },
    {
      "Description": "<b>CAPEC-200: Removal of filters: Input filters, output filters, data masking</b><br>An attacker removes or disables filtering mechanisms on the target application.<br>Input filters prevent invalid data from being sent to an application (for<br>example, overly large inputs that might cause a buffer overflow or other<br>malformed inputs that may not be correctly handled by an application). Input<br>filters might also be designed to constrained executable content.",
      "color": "#94ebff",
      "size": 10,
      "label": "Removal of filters: Input filters, output filters, data masking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/200.html",
      "id": "200"
    },
    {
      "Description": "<b>CAPEC-207: Removing Important Client Functionality</b><br>An adversary removes or disables functionality on the client that the server<br>assumes to be present and trustworthy.",
      "color": "#75aaff",
      "size": 18,
      "label": "Removing Important Client Functionality",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/207.html",
      "id": "207"
    },
    {
      "Description": "<b>CAPEC-201: Serialized Data External Linking</b><br>An adversary creates a serialized data file (e.g. XML, YAML, etc...) that<br>contains an external data reference. Because serialized data parsers may not<br>validate documents with external references, there may be no checks on the<br>nature of the reference in the external data. This can allow an adversary to<br>open arbitrary files or connections, which may further lead to the adversary<br>gaining access to information on the system that they would normally be unable<br>to obtain.",
      "color": "#94ebff",
      "size": 10,
      "label": "Serialized Data External Linking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/201.html",
      "id": "201"
    },
    {
      "Description": "<b>CAPEC-278: Web Services Protocol Manipulation</b><br>An adversary manipulates a web service related protocol to cause a web<br>application or service to react differently than intended. This can either be<br>performed through the manipulation of call parameters to include unexpected<br>values, or by changing the called function to one that should normally be<br>restricted or limited. By leveraging this pattern of attack, the adversary is<br>able to gain access to data or resources normally restricted, or to cause the<br>application or service to crash.",
      "color": "#75aaff",
      "size": 18,
      "label": "Web Services Protocol Manipulation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/278.html",
      "id": "278"
    },
    {
      "Description": "<b>CAPEC-202: Create Malicious Client</b><br>An adversary creates a client application to interface with a target service<br>where the client violates assumptions the service makes about clients. Services<br>that have designated client applications (as opposed to services that use<br>general client applications, such as IMAP or POP mail servers which can interact<br>with any IMAP or POP client) may assume that the client will follow specific<br>procedures.",
      "color": "#75aaff",
      "size": 18,
      "label": "Create Malicious Client",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/202.html",
      "id": "202"
    },
    {
      "Description": "<b>CAPEC-22: Exploiting Trust in Client</b><br>An attack of this type exploits vulnerabilities in client/server communication<br>channel authentication and data integrity. It leverages the implicit trust a<br>server places in the client, or more importantly, that which the server believes<br>is the client. An attacker executes this type of attack by communicating<br>directly with the server where the server believes it is communicating only with<br>a valid client. There are numerous variations of this type of attack.",
      "color": "#2176ff",
      "size": 30,
      "label": "Exploiting Trust in Client",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/22.html",
      "id": "22"
    },
    {
      "Description": "<b>CAPEC-203: Manipulate Registry Information</b><br>An adversary exploits a weakness in authorization in order to modify content<br>within a registry (e.g., Windows Registry, Mac plist, application registry).<br>Editing registry information can permit the adversary to hide configuration<br>information or remove indicators of compromise to cover up activity. Many<br>applications utilize registries to store configuration and service information.<br>As such, modification of registry information can affect individual services<br>(affecting billing, authorization, or even allowing for identity spoofing) or<br>the overall configuration of a targeted application. For example, both Java RMI<br>and SOAP use registries to track available services. Changing registry values is<br>sometimes a preliminary step towards completing another attack pattern, but<br>given the long term usage of many registry values, manipulation of registry<br>information could be its own end.",
      "color": "#75aaff",
      "size": 18,
      "label": "Manipulate Registry Information",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/203.html",
      "id": "203"
    },
    {
      "Description": "<b>CAPEC-204: Lifting Sensitive Data Embedded in Cache</b><br>An adversary examines a target application's cache, or a browser cache, for<br>sensitive information. Many applications that communicate with remote entities<br>or which perform intensive calculations utilize caches to improve efficiency.<br>However, if the application computes or receives sensitive information and the<br>cache is not appropriately protected, an attacker can browse the cache and<br>retrieve this information. This can result in the disclosure of sensitive<br>information.",
      "color": "#94ebff",
      "size": 10,
      "label": "Lifting Sensitive Data Embedded in Cache",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/204.html",
      "id": "204"
    },
    {
      "Description": "<b>CAPEC-206: Signing Malicious Code</b><br>The adversary extracts credentials used for code signing from a production<br>environment and then uses these credentials to sign malicious content with the<br>developer's key. Many developers use signing keys to sign code or hashes of<br>code. When users or applications verify the signatures are accurate they are led<br>to believe that the code came from the owner of the signing key and that the<br>code has not been modified since the signature was applied. If the adversary has<br>extracted the signing credentials then they can use those credentials to sign<br>their own code bundles. Users or tools that verify the signatures attached to<br>the code will likely assume the code came from the legitimate developer and<br>install or run the code, effectively allowing the adversary to execute arbitrary<br>code on the victim's computer. This differs from CAPEC-673, because the<br>adversary is performing the code signing.",
      "color": "#94ebff",
      "size": 10,
      "label": "Signing Malicious Code",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/206.html",
      "id": "206"
    },
    {
      "Description": "<b>CAPEC-444: Development Alteration</b><br>An adversary modifies a technology, product, or component during its development<br>to acheive a negative impact once the system is deployed. The goal of the<br>adversary is to modify the system in such a way that the negative impact can be<br>leveraged when the system is later deployed. Development alteration attacks may<br>include attacks that insert malicious logic into the system's software, modify<br>or replace hardware components, and other attacks which negatively impact the<br>system during development. These attacks generally require insider access to<br>modify source code or to tamper with hardware components. The product is then<br>delivered to the user where the negative impact can be leveraged at a later<br>time.",
      "color": "#75aaff",
      "size": 18,
      "label": "Development Alteration",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/444.html",
      "id": "444"
    },
    {
      "Description": "<b>CAPEC-208: Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements</b><br>An attacker removes or modifies the logic on a client associated with monetary<br>calculations resulting in incorrect information being sent to the server. A<br>server may rely on a client to correctly compute monetary information. For<br>example, a server might supply a price for an item and then rely on the client<br>to correctly compute the total cost of a purchase given the number of items the<br>user is buying. If the attacker can remove or modify the logic that controls<br>these calculations, they can return incorrect values to the server. The attacker<br>can use this to make purchases for a fraction of the legitimate cost or<br>otherwise avoid correct billing for activities.",
      "color": "#94ebff",
      "size": 10,
      "label": "Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/208.html",
      "id": "208"
    },
    {
      "Description": "<b>CAPEC-209: XSS Using MIME Type Mismatch</b><br>An adversary creates a file with scripting content but where the specified MIME<br>type of the file is such that scripting is not expected. The adversary tricks<br>the victim into accessing a URL that responds with the script file. Some<br>browsers will detect that the specified MIME type of the file does not match the<br>actual type of its content and will automatically switch to using an interpreter<br>for the real content type. If the browser does not invoke script filters before<br>doing this, the adversary's script may run on the target unsanitized, possibly<br>revealing the victim's cookies or executing arbitrary script in their browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using MIME Type Mismatch",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/209.html",
      "id": "209"
    },
    {
      "Description": "<b>CAPEC-215: Fuzzing for application mapping</b><br>An attacker sends random, malformed, or otherwise unexpected messages to a<br>target application and observes the application's log or error messages<br>returned. The attacker does not initially know how a target will respond to<br>individual messages but by attempting a large number of message variants they<br>may find a variant that trigger's desired behavior. In this attack, the purpose<br>of the fuzzing is to observe the application's log and error messages, although<br>fuzzing a target can also sometimes cause the target to enter an unstable state,<br>causing a crash.",
      "color": "#94ebff",
      "size": 10,
      "label": "Fuzzing for application mapping",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/215.html",
      "id": "215"
    },
    {
      "Description": "<b>CAPEC-28: Fuzzing</b><br>In this attack pattern, the adversary leverages fuzzing to try to identify<br>weaknesses in the system. Fuzzing is a software security and functionality<br>testing method that feeds randomly constructed input to the system and looks for<br>an indication that a failure in response to that input has occurred. Fuzzing<br>treats the system as a black box and is totally free from any preconceptions or<br>assumptions about the system. Fuzzing can help an attacker discover certain<br>assumptions made about user input in the system. Fuzzing gives an attacker a<br>quick way of potentially uncovering some of these assumptions despite not<br>necessarily knowing anything about the internals of the system. These<br>assumptions can then be turned against the system by specially crafting user<br>input that may allow an attacker to achieve their goals.",
      "color": "#2176ff",
      "size": 30,
      "label": "Fuzzing",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/28.html",
      "id": "28"
    },
    {
      "Description": "<b>CAPEC-217: Exploiting Incorrectly Configured SSL/TLS</b><br>An adversary takes advantage of incorrectly configured SSL/TLS communications<br>that enables access to data intended to be encrypted. The adversary may also use<br>this type of attack to inject commands or other traffic into the encrypted<br>stream to cause compromise of either the client or server.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploiting Incorrectly Configured SSL/TLS",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/217.html",
      "id": "217"
    },
    {
      "Description": "<b>CAPEC-218: Spoofing of UDDI/ebXML Messages</b><br>An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a<br>service provider in an e-business transaction. UDDI, ebXML, and similar<br>standards are used to identify businesses in e-business transactions. Among<br>other things, they identify a particular participant, WSDL information for SOAP<br>transactions, and supported communication protocols, including security<br>protocols. By spoofing one of these messages an attacker could impersonate a<br>legitimate business in a transaction or could manipulate the protocols used<br>between a client and business. This could result in disclosure of sensitive<br>information, loss of message integrity, or even financial fraud.",
      "color": "#94ebff",
      "size": 10,
      "label": "Spoofing of UDDI/ebXML Messages",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/218.html",
      "id": "218"
    },
    {
      "Description": "<b>CAPEC-219: XML Routing Detour Attacks</b><br>An attacker subverts an intermediate system used to process XML content and<br>forces the intermediate to modify and/or re-route the processing of the content.<br>XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94).<br>The attacker compromises or inserts an intermediate system in the processing of<br>the XML message. For example, WS-Routing can be used to specify a series of<br>nodes or intermediaries through which content is passed. If any of the<br>intermediate nodes in this route are compromised by an attacker they could be<br>used for a routing detour attack. From the compromised system the attacker is<br>able to route the XML process to other nodes of their choice and modify the<br>responses so that the normal chain of processing is unaware of the interception.<br>This system can forward the message to an outside entity and hide the forwarding<br>and processing from the legitimate processing systems by altering the header<br>information.",
      "color": "#75aaff",
      "size": 18,
      "label": "XML Routing Detour Attacks",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/219.html",
      "id": "219"
    },
    {
      "Description": "<b>CAPEC-94: Adversary in the Middle (AiTM)</b><br>An adversary targets the communication between two components (typically client<br>and server), in order to alter or obtain data from transactions. A general<br>approach entails the adversary placing themself within the communication channel<br>between the two components.",
      "color": "#2176ff",
      "size": 30,
      "label": "Adversary in the Middle (AiTM)",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/94.html",
      "id": "94"
    },
    {
      "Description": "<b>CAPEC-272: Protocol Manipulation</b><br>An adversary subverts a communications protocol to perform an attack. This type<br>of attack can allow an adversary to impersonate others, discover sensitive<br>information, control the outcome of a session, or perform other attacks. This<br>type of attack targets invalid assumptions that may be inherent in implementers<br>of the protocol, incorrect implementations of the protocol, or vulnerabilities<br>in the protocol itself.",
      "color": "#2176ff",
      "size": 30,
      "label": "Protocol Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/272.html",
      "id": "272"
    },
    {
      "Description": "<b>CAPEC-221: Data Serialization External Entities Blowup</b><br>This attack takes advantage of the entity replacement property of certain data<br>serialization languages (e.g., XML, YAML, etc.) where the value of the<br>replacement is a URI. A well-crafted file could have the entity refer to a URI<br>that consumes a large amount of resources to create a denial of service<br>condition. This can cause the system to either freeze, crash, or execute<br>arbitrary code depending on the URI.",
      "color": "#94ebff",
      "size": 10,
      "label": "Data Serialization External Entities Blowup",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/221.html",
      "id": "221"
    },
    {
      "Description": "<b>CAPEC-231: Oversized Serialized Data Payloads</b><br>An adversary injects oversized serialized data payloads into a parser during<br>data processing to produce adverse effects upon the parser such as exhausting<br>system resources and arbitrary code execution.",
      "color": "#75aaff",
      "size": 18,
      "label": "Oversized Serialized Data Payloads",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/231.html",
      "id": "231"
    },
    {
      "Description": "<b>CAPEC-222: iFrame Overlay</b><br>In an iFrame overlay attack the victim is tricked into unknowingly initiating<br>some action in one system while interacting with the UI from seemingly<br>completely different system.",
      "color": "#94ebff",
      "size": 10,
      "label": "iFrame Overlay",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/222.html",
      "id": "222"
    },
    {
      "Description": "<b>CAPEC-224: Fingerprinting</b><br>An adversary compares output from a target system to known indicators that<br>uniquely identify specific details about the target. Most commonly,<br>fingerprinting is done to determine operating system and application versions.<br>Fingerprinting can be done passively as well as actively. Fingerprinting by<br>itself is not usually detrimental to the target. However, the information<br>gathered through fingerprinting often enables an adversary to discover existing<br>weaknesses in the target.",
      "color": "#2176ff",
      "size": 30,
      "label": "Fingerprinting",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/224.html",
      "id": "224"
    },
    {
      "Description": "<b>CAPEC-226: Session Credential Falsification through Manipulation</b><br>An attacker manipulates an existing credential in order to gain access to a<br>target application. Session credentials allow users to identify themselves to a<br>service after an initial authentication without needing to resend the<br>authentication information (usually a username and password) with every message.<br>An attacker may be able to manipulate a credential sniffed from an existing<br>connection in order to gain access to a target server.",
      "color": "#94ebff",
      "size": 10,
      "label": "Session Credential Falsification through Manipulation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/226.html",
      "id": "226"
    },
    {
      "Description": "<b>CAPEC-227: Sustained Client Engagement</b><br>An adversary attempts to deny legitimate users access to a resource by<br>continually engaging a specific resource in an attempt to keep the resource tied<br>up as long as possible. The adversary's primary goal is not to crash or flood<br>the target, which would alert defenders; rather it is to repeatedly perform<br>actions or abuse algorithmic flaws such that a given resource is tied up and not<br>available to a legitimate user. By carefully crafting a requests that keep the<br>resource engaged through what is seemingly benign requests, legitimate users are<br>limited or completely denied access to the resource.",
      "color": "#2176ff",
      "size": 30,
      "label": "Sustained Client Engagement",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/227.html",
      "id": "227"
    },
    {
      "Description": "<b>CAPEC-228: DTD Injection</b><br>An attacker injects malicious content into an application's DTD in an attempt to<br>produce a negative technical impact. DTDs are used to describe how XML documents<br>are processed. Certain malformed DTDs (for example, those with excessive entity<br>expansion as described in CAPEC 197) can cause the XML parsers that process the<br>DTDs to consume excessive resources resulting in resource depletion.",
      "color": "#94ebff",
      "size": 10,
      "label": "DTD Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/228.html",
      "id": "228"
    },
    {
      "Description": "<b>CAPEC-250: XML Injection</b><br>An attacker utilizes crafted XML user-controllable input to probe, attack, and<br>inject data into the XML database, using techniques similar to SQL injection.<br>The user-controllable input can allow for unauthorized viewing of data,<br>bypassing authentication or the front-end application for direct XML database<br>access, and possibly altering database information.",
      "color": "#75aaff",
      "size": 18,
      "label": "XML Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/250.html",
      "id": "250"
    },
    {
      "Description": "<b>CAPEC-229: Serialized Data Parameter Blowup</b><br>This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.)<br>which manage data in an inefficient manner. The attacker crafts an serialized<br>data file with multiple configuration parameters in the same dataset. In a<br>vulnerable parser, this results in a denial of service condition where CPU<br>resources are exhausted because of the parsing algorithm. The weakness being<br>exploited is tied to parser implementation and not language specific.",
      "color": "#94ebff",
      "size": 10,
      "label": "Serialized Data Parameter Blowup",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/229.html",
      "id": "229"
    },
    {
      "Description": "<b>CAPEC-23: File Content Injection</b><br>An adversary poisons files with a malicious payload (targeting the file systems<br>accessible by the target software), which may be passed through by standard<br>channels such as via email, and standard web content like PDF and multimedia<br>files. The adversary exploits known vulnerabilities or handling routines in the<br>target processes, in order to exploit the host's trust in executing remote<br>content, including binary files.",
      "color": "#75aaff",
      "size": 18,
      "label": "File Content Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/23.html",
      "id": "23"
    },
    {
      "Description": "<b>CAPEC-234: Hijacking a privileged process</b><br>An adversary gains control of a process that is assigned elevated privileges in<br>order to execute arbitrary code with those privileges. Some processes are<br>assigned elevated privileges on an operating system, usually through association<br>with a particular user, group, or role. If an attacker can hijack this process,<br>they will be able to assume its level of privilege in order to execute their own<br>code.",
      "color": "#75aaff",
      "size": 18,
      "label": "Hijacking a privileged process",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/234.html",
      "id": "234"
    },
    {
      "Description": "<b>CAPEC-237: Escaping a Sandbox by Calling Code in Another Language</b><br>The attacker may submit malicious code of another language to obtain access to<br>privileges that were not intentionally exposed by the sandbox, thus escaping the<br>sandbox. For instance, Java code cannot perform unsafe operations, such as<br>modifying arbitrary memory locations, due to restrictions placed on it by the<br>Byte code Verifier and the JVM. If allowed, Java code can call directly into<br>native C code, which may perform unsafe operations, such as call system calls<br>and modify arbitrary memory locations on their behalf. To provide isolation,<br>Java does not grant untrusted code with unmediated access to native C code.<br>Instead, the sandboxed code is typically allowed to call some subset of the<br>pre-existing native code that is part of standard libraries.",
      "color": "#94ebff",
      "size": 10,
      "label": "Escaping a Sandbox by Calling Code in Another Language",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/237.html",
      "id": "237"
    },
    {
      "Description": "<b>CAPEC-480: Escaping Virtualization</b><br>An adversary gains access to an application, service, or device with the<br>privileges of an authorized or privileged user by escaping the confines of a<br>virtualized environment. The adversary is then able to access resources or<br>execute unauthorized code within the host environment, generally with the<br>privileges of the user running the virtualized process. Successfully executing<br>an attack of this type is often the first step in executing more complex<br>attacks.",
      "color": "#75aaff",
      "size": 18,
      "label": "Escaping Virtualization",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/480.html",
      "id": "480"
    },
    {
      "Description": "<b>CAPEC-24: Filter Failure through Buffer Overflow</b><br>In this attack, the idea is to cause an active filter to fail by causing an<br>oversized transaction. An attacker may try to feed overly long input strings to<br>the program in an attempt to overwhelm the filter (by causing a buffer overflow)<br>and hoping that the filter does not fail securely (i.e. the user input is let<br>into the system unfiltered).",
      "color": "#94ebff",
      "size": 10,
      "label": "Filter Failure through Buffer Overflow",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/24.html",
      "id": "24"
    },
    {
      "Description": "<b>CAPEC-240: Resource Injection</b><br>An adversary exploits weaknesses in input validation by manipulating resource<br>identifiers enabling the unintended modification or specification of a resource.",
      "color": "#2176ff",
      "size": 30,
      "label": "Resource Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/240.html",
      "id": "240"
    },
    {
      "Description": "<b>CAPEC-243: XSS Targeting HTML Attributes</b><br>An adversary inserts commands to perform cross-site scripting (XSS) actions in<br>HTML attributes. Many filters do not adequately sanitize attributes against the<br>presence of potentially dangerous commands even if they adequately sanitize<br>tags. For example, dangerous expressions could be inserted into a style<br>attribute in an anchor tag, resulting in the execution of malicious code when<br>the resulting page is rendered. If a victim is tricked into viewing the rendered<br>page the attack proceeds like a normal XSS attack, possibly resulting in the<br>loss of sensitive cookies or other malicious activities.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting HTML Attributes",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/243.html",
      "id": "243"
    },
    {
      "Description": "<b>CAPEC-244: XSS Targeting URI Placeholders</b><br>An attack of this type exploits the ability of most browsers to interpret<br>\"data\", \"javascript\" or other URI schemes as client-side executable content<br>placeholders. This attack consists of passing a malicious URI in an anchor tag<br>HREF attribute or any other similar attributes in other HTML tags. Such<br>malicious URI contains, for example, a base64 encoded HTML content with an<br>embedded cross-site scripting payload. The attack is executed when the browser<br>interprets the malicious content i.e., for example, when the victim clicks on<br>the malicious link.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting URI Placeholders",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/244.html",
      "id": "244"
    },
    {
      "Description": "<b>CAPEC-245: XSS Using Doubled Characters</b><br>The adversary bypasses input validation by using doubled characters in order to<br>perform a cross-site scripting attack. Some filters fail to recognize dangerous<br>sequences if they are preceded by repeated characters. For example, by doubling<br>the < before a script command, (<<script or %3C%3script using URI encoding) the<br>filters of some web applications may fail to recognize the presence of a script<br>tag. If the targeted server is vulnerable to this type of bypass, the adversary<br>can create a crafted URL or other trap to cause a victim to view a page on the<br>targeted server where the malicious content is executed, as per a normal XSS<br>attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Doubled Characters",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/245.html",
      "id": "245"
    },
    {
      "Description": "<b>CAPEC-247: XSS Using Invalid Characters</b><br>An adversary inserts invalid characters in identifiers to bypass application<br>filtering of input. Filters may not scan beyond invalid characters but during<br>later stages of processing content that follows these invalid characters may<br>still be processed. This allows the adversary to sneak prohibited commands past<br>filters and perform normally prohibited operations. Invalid characters may<br>include null, carriage return, line feed or tab in an identifier. Successful<br>bypassing of the filter can result in a XSS attack, resulting in the disclosure<br>of web cookies or possibly other results.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Invalid Characters",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/247.html",
      "id": "247"
    },
    {
      "Description": "<b>CAPEC-25: Forced Deadlock</b><br>The adversary triggers and exploits a deadlock condition in the target software<br>to cause a denial of service. A deadlock can occur when two or more competing<br>actions are waiting for each other to finish, and thus neither ever does.<br>Deadlock conditions can be difficult to detect.",
      "color": "#2176ff",
      "size": 30,
      "label": "Forced Deadlock",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/25.html",
      "id": "25"
    },
    {
      "Description": "<b>CAPEC-251: Local Code Inclusion</b><br>The attacker forces an application to load arbitrary code files from the local<br>machine. The attacker could use this to try to load old versions of library<br>files that have known vulnerabilities, to load files that the attacker placed on<br>the local machine during a prior attack, or to otherwise change the<br>functionality of the targeted application in unexpected ways.",
      "color": "#75aaff",
      "size": 18,
      "label": "Local Code Inclusion",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/251.html",
      "id": "251"
    },
    {
      "Description": "<b>CAPEC-252: PHP Local File Inclusion</b><br>The attacker loads and executes an arbitrary local PHP file on a target machine.<br>The attacker could use this to try to load old versions of PHP files that have<br>known vulnerabilities, to load PHP files that the attacker placed on the local<br>machine during a prior attack, or to otherwise change the functionality of the<br>targeted application in unexpected ways.",
      "color": "#94ebff",
      "size": 10,
      "label": "PHP Local File Inclusion",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/252.html",
      "id": "252"
    },
    {
      "Description": "<b>CAPEC-256: SOAP Array Overflow</b><br>An attacker sends a SOAP request with an array whose actual length exceeds the<br>length indicated in the request. If the server processing the transmission<br>naively trusts the specified size, then an attacker can intentionally understate<br>the size of the array, possibly resulting in a buffer overflow if the server<br>attempts to read the entire data set into the memory it allocated for a smaller<br>array.",
      "color": "#94ebff",
      "size": 10,
      "label": "SOAP Array Overflow",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/256.html",
      "id": "256"
    },
    {
      "Description": "<b>CAPEC-26: Leveraging Race Conditions</b><br>The adversary targets a race condition occurring when multiple processes access<br>and manipulate the same resource concurrently, and the outcome of the execution<br>depends on the particular order in which the access takes place. The adversary<br>can leverage a race condition by \"running the race\", modifying the resource and<br>modifying the normal execution flow. For instance, a race condition can occur<br>while accessing a file: the adversary can trick the system by replacing the<br>original file with their version and cause the system to read the malicious<br>file.",
      "color": "#2176ff",
      "size": 30,
      "label": "Leveraging Race Conditions",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/26.html",
      "id": "26"
    },
    {
      "Description": "<b>CAPEC-261: Fuzzing for garnering other adjacent user/sensitive data</b><br>An adversary who is authorized to send queries to a target sends variants of<br>expected queries in the hope that these modified queries might return<br>information (directly or indirectly through error logs) beyond what the expected<br>set of queries should provide.",
      "color": "#94ebff",
      "size": 10,
      "label": "Fuzzing for garnering other adjacent user/sensitive data",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/261.html",
      "id": "261"
    },
    {
      "Description": "<b>CAPEC-263: Force Use of Corrupted Files</b><br>This describes an attack where an application is forced to use a file that an<br>attacker has corrupted. The result is often a denial of service caused by the<br>application being unable to process the corrupted file, but other results,<br>including the disabling of filters or access controls (if the application fails<br>in an unsafe way rather than failing by locking down) or buffer overflows are<br>possible.",
      "color": "#94ebff",
      "size": 10,
      "label": "Force Use of Corrupted Files",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/263.html",
      "id": "263"
    },
    {
      "Description": "<b>CAPEC-268: Audit Log Manipulation</b><br>The attacker injects, manipulates, deletes, or forges malicious log entries into<br>the log file, in an attempt to mislead an audit of the log file or cover tracks<br>of an attack. Due to either insufficient access controls of the log files or the<br>logging mechanism, the attacker is able to perform such actions.",
      "color": "#75aaff",
      "size": 18,
      "label": "Audit Log Manipulation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/268.html",
      "id": "268"
    },
    {
      "Description": "<b>CAPEC-27: Leveraging Race Conditions via Symbolic Links</b><br>This attack leverages the use of symbolic links (Symlinks) in order to write to<br>sensitive files. An attacker can create a Symlink link to a target file not<br>otherwise accessible to them. When the privileged program tries to create a<br>temporary file with the same name as the Symlink link, it will actually write to<br>the target file pointed to by the attackers' Symlink link. If the attacker can<br>insert malicious content in the temporary file they will be writing to the<br>sensitive file by using the Symlink. The race occurs because the system checks<br>if the temporary file exists, then creates the file. The attacker would<br>typically create the Symlink during the interval between the check and the<br>creation of the temporary file.",
      "color": "#94ebff",
      "size": 10,
      "label": "Leveraging Race Conditions via Symbolic Links",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/27.html",
      "id": "27"
    },
    {
      "Description": "<b>CAPEC-29: Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions</b><br>This attack targets a race condition occurring between the time of check (state)<br>for a resource and the time of use of a resource. A typical example is file<br>access. The adversary can leverage a file access race condition by \"running the<br>race\", meaning that they would modify the resource between the first time the<br>target program accesses the file and the time the target program uses the file.<br>During that period of time, the adversary could replace or modify the file,<br>causing the application to behave unexpectedly.",
      "color": "#75aaff",
      "size": 18,
      "label": "Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/29.html",
      "id": "29"
    },
    {
      "Description": "<b>CAPEC-270: Modification of Registry Run Keys</b><br>An adversary adds a new entry to the \"run keys\" in the Windows registry so that<br>an application of their choosing is executed when a user logs in. In this way,<br>the adversary can get their executable to operate and run on the target system<br>with the authorized user's level of permissions. This attack is a good way for<br>an adversary to run persistent spyware on a user's machine, such as a keylogger.",
      "color": "#94ebff",
      "size": 10,
      "label": "Modification of Registry Run Keys",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/270.html",
      "id": "270"
    },
    {
      "Description": "<b>CAPEC-273: HTTP Response Smuggling</b><br>An adversary manipulates and injects malicious content in the form of secret<br>unauthorized HTTP responses, into a single HTTP response from a vulnerable or<br>compromised back-end HTTP agent (e.g., server). See CanPrecede relationships for<br>possible consequences.",
      "color": "#94ebff",
      "size": 10,
      "label": "HTTP Response Smuggling",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/273.html",
      "id": "273"
    },
    {
      "Description": "<b>CAPEC-274: HTTP Verb Tampering</b><br>An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to<br>bypass access restrictions. Some web environments allow administrators to<br>restrict access based on the HTTP Verb used with requests. However, attackers<br>can often provide a different HTTP Verb, or even provide a random string as a<br>verb in order to bypass these protections. This allows the attacker to access<br>data that should otherwise be protected.",
      "color": "#94ebff",
      "size": 10,
      "label": "HTTP Verb Tampering",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/274.html",
      "id": "274"
    },
    {
      "Description": "<b>CAPEC-275: DNS Rebinding</b><br>An adversary serves content whose IP address is resolved by a DNS server that<br>the adversary controls. After initial contact by a web browser (or similar<br>client), the adversary changes the IP address to which its name resolves, to an<br>address within the target organization that is not publicly accessible. This<br>allows the web browser to examine this internal address on behalf of the<br>adversary.",
      "color": "#94ebff",
      "size": 10,
      "label": "DNS Rebinding",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/275.html",
      "id": "275"
    },
    {
      "Description": "<b>CAPEC-276: Inter-component Protocol Manipulation</b><br>Inter-component protocols are used to communicate between different software and<br>hardware modules within a single computer. Common examples are: interrupt<br>signals and data pipes. Subverting the protocol can allow an adversary to<br>impersonate others, discover sensitive information, control the outcome of a<br>session, or perform other attacks. This type of attack targets invalid<br>assumptions that may be inherent in implementers of the protocol, incorrect<br>implementations of the protocol, or vulnerabilities in the protocol itself.",
      "color": "#75aaff",
      "size": 18,
      "label": "Inter-component Protocol Manipulation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/276.html",
      "id": "276"
    },
    {
      "Description": "<b>CAPEC-277: Data Interchange Protocol Manipulation</b><br>Data Interchange Protocols are used to transmit structured data between<br>entities. These protocols are often specific to a particular domain (B2B:<br>purchase orders, invoices, transport logistics and waybills, medical records).<br>They are often, but not always, XML-based. Subverting the protocol can allow an<br>adversary to impersonate others, discover sensitive information, control the<br>outcome of a session, or perform other attacks. This type of attack targets<br>invalid assumptions that may be inherent in implementers of the protocol,<br>incorrect implementations of the protocol, or vulnerabilities in the protocol<br>itself.",
      "color": "#75aaff",
      "size": 18,
      "label": "Data Interchange Protocol Manipulation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/277.html",
      "id": "277"
    },
    {
      "Description": "<b>CAPEC-279: SOAP Manipulation</b><br>Simple Object Access Protocol (SOAP) is used as a communication protocol between<br>a client and server to invoke web services on the server. It is an XML-based<br>protocol, and therefore suffers from many of the same shortcomings as other<br>XML-based protocols. Adversaries can make use of these shortcomings and<br>manipulate the content of SOAP paramters, leading to undesirable behavior on the<br>server and allowing the adversary to carry out a number of further attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "SOAP Manipulation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/279.html",
      "id": "279"
    },
    {
      "Description": "<b>CAPEC-285: ICMP Echo Request Ping</b><br>An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping',<br>in order to determine if a target system is responsive. If the request is not<br>blocked by a firewall or ACL, the target host will respond with an ICMP Type 0<br>Echo Reply datagram. This type of exchange is usually referred to as a 'Ping'<br>due to the Ping utility present in almost all operating systems. Ping, as<br>commonly implemented, allows a user to test for alive hosts, measure round-trip<br>time, and measure the percentage of packet loss.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP Echo Request Ping",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/285.html",
      "id": "285"
    },
    {
      "Description": "<b>CAPEC-292: Host Discovery</b><br>An adversary sends a probe to an IP address to determine if the host is alive.<br>Host discovery is one of the earliest phases of network reconnaissance. The<br>adversary usually starts with a range of IP addresses belonging to a target<br>network and uses various methods to determine if a host is present at that IP<br>address. Host discovery is usually referred to as 'Ping' scanning using a sonar<br>analogy. The goal is to send a packet through to the IP address and solicit a<br>response from the host. As such, a 'ping' can be virtually any crafted packet<br>whatsoever, provided the adversary can identify a functional host based on its<br>response. An attack of this nature is usually carried out with a 'ping sweep,'<br>where a particular kind of ping is sent to a range of IP addresses.",
      "color": "#75aaff",
      "size": 18,
      "label": "Host Discovery",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/292.html",
      "id": "292"
    },
    {
      "Description": "<b>CAPEC-287: TCP SYN Scan</b><br>An adversary uses a SYN scan to determine the status of ports on the remote<br>target. SYN scanning is the most common type of port scanning that is used<br>because of its many advantages and few drawbacks. As a result, novice attackers<br>tend to overly rely on the SYN scan while performing system reconnaissance. As a<br>scanning method, the primary advantages of SYN scanning are its universality and<br>speed.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP SYN Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/287.html",
      "id": "287"
    },
    {
      "Description": "<b>CAPEC-300: Port Scanning</b><br>An adversary uses a combination of techniques to determine the state of the<br>ports on a remote target. Any service or application available for TCP or UDP<br>networking will have a port open for communications over the network.",
      "color": "#75aaff",
      "size": 18,
      "label": "Port Scanning",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/300.html",
      "id": "300"
    },
    {
      "Description": "<b>CAPEC-290: Enumerate Mail Exchange (MX) Records</b><br>An adversary enumerates the MX records for a given via a DNS query. This type of<br>information gathering returns the names of mail servers on the network. Mail<br>servers are often not exposed to the Internet but are located within the DMZ of<br>a network protected by a firewall. A side effect of this configuration is that<br>enumerating the MX records for an organization my reveal the IP address of the<br>firewall or possibly other internal systems. Attackers often resort to MX record<br>enumeration when a DNS Zone Transfer is not possible.",
      "color": "#94ebff",
      "size": 10,
      "label": "Enumerate Mail Exchange (MX) Records",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/290.html",
      "id": "290"
    },
    {
      "Description": "<b>CAPEC-309: Network Topology Mapping</b><br>An adversary engages in scanning activities to map network nodes, hosts,<br>devices, and routes. Adversaries usually perform this type of network<br>reconnaissance during the early stages of attack against an external network.<br>Many types of scanning utilities are typically employed, including ICMP tools,<br>network mappers, port scanners, and route testing utilities such as traceroute.",
      "color": "#75aaff",
      "size": 18,
      "label": "Network Topology Mapping",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/309.html",
      "id": "309"
    },
    {
      "Description": "<b>CAPEC-291: DNS Zone Transfers</b><br>An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some<br>external DNS servers will return a list of IP address and valid hostnames. Under<br>certain conditions, it may even be possible to obtain Zone data about the<br>organization's internal network. When successful the attacker learns valuable<br>information about the topology of the target organization, including information<br>about particular servers, their role within the IT structure, and possibly<br>information about the operating systems running upon the network. This is<br>configuration dependent behavior so it may also be required to search out<br>multiple DNS servers while attempting to find one with ZONE transfers allowed.",
      "color": "#94ebff",
      "size": 10,
      "label": "DNS Zone Transfers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/291.html",
      "id": "291"
    },
    {
      "Description": "<b>CAPEC-293: Traceroute Route Enumeration</b><br>An adversary uses a traceroute utility to map out the route which data flows<br>through the network in route to a target destination. Tracerouting can allow the<br>adversary to construct a working topology of systems and routers by listing the<br>systems through which data passes through on their way to the targeted machine.<br>This attack can return varied results depending upon the type of traceroute that<br>is performed. Traceroute works by sending packets to a target while incrementing<br>the Time-to-Live field in the packet header. As the packet traverses each hop<br>along its way to the destination, its TTL expires generating an ICMP diagnostic<br>message that identifies where the packet expired. Traditional techniques for<br>tracerouting involved the use of ICMP and UDP, but as more firewalls began to<br>filter ingress ICMP, methods of traceroute using TCP were developed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Traceroute Route Enumeration",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/293.html",
      "id": "293"
    },
    {
      "Description": "<b>CAPEC-294: ICMP Address Mask Request</b><br>An adversary sends an ICMP Type 17 Address Mask Request to gather information<br>about a target's networking configuration. ICMP Address Mask Requests are<br>defined by RFC-950, \"Internet Standard Subnetting Procedure.\" An Address Mask<br>Request is an ICMP type 17 message that triggers a remote system to respond with<br>a list of its related subnets, as well as its default gateway and broadcast<br>address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of<br>information helps the adversary plan router-based attacks as well as<br>denial-of-service attacks against the broadcast address.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP Address Mask Request",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/294.html",
      "id": "294"
    },
    {
      "Description": "<b>CAPEC-295: Timestamp Request</b><br>This pattern of attack leverages standard requests to learn the exact time<br>associated with a target system. An adversary may be able to use the timestamp<br>returned from the target to attack time-based security algorithms, such as<br>random number generators, or time-based authentication mechanisms.",
      "color": "#94ebff",
      "size": 10,
      "label": "Timestamp Request",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/295.html",
      "id": "295"
    },
    {
      "Description": "<b>CAPEC-296: ICMP Information Request</b><br>An adversary sends an ICMP Information Request to a host to determine if it will<br>respond to this deprecated mechanism. ICMP Information Requests are a deprecated<br>message type. Information Requests were originally used for diskless machines to<br>automatically obtain their network configuration, but this message type has been<br>superseded by more robust protocol implementations like DHCP.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP Information Request",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/296.html",
      "id": "296"
    },
    {
      "Description": "<b>CAPEC-297: TCP ACK Ping</b><br>An adversary sends a TCP segment with the ACK flag set to a remote host for the<br>purpose of determining if the host is alive. This is one of several TCP 'ping'<br>types. The RFC 793 expected behavior for a service is to respond with a RST<br>'reset' packet to any unsolicited ACK segment that is not part of an existing<br>connection. So by sending an ACK segment to a port, the adversary can identify<br>that the host is alive by looking for a RST packet. Typically, a remote server<br>will respond with a RST regardless of whether a port is open or closed. In this<br>way, TCP ACK pings cannot discover the state of a remote port because the<br>behavior is the same in either case. The firewall will look up the ACK packet in<br>its state-table and discard the segment because it does not correspond to any<br>active connection. A TCP ACK Ping can be used to discover if a host is alive via<br>RST response packets sent from the host.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP ACK Ping",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/297.html",
      "id": "297"
    },
    {
      "Description": "<b>CAPEC-298: UDP Ping</b><br>An adversary sends a UDP datagram to the remote host to determine if the host is<br>alive. If a UDP datagram is sent to an open UDP port there is very often no<br>response, so a typical strategy for using a UDP ping is to send the datagram to<br>a random high port on the target. The goal is to solicit an 'ICMP port<br>unreachable' message from the target, indicating that the host is alive. UDP<br>pings are useful because some firewalls are not configured to block UDP<br>datagrams sent to strange or typically unused ports, like ports in the 65K<br>range. Additionally, while some firewalls may filter incoming ICMP, weaknesses<br>in firewall rule-sets may allow certain types of ICMP (host unreachable, port<br>unreachable) which are useful for UDP ping attempts.",
      "color": "#94ebff",
      "size": 10,
      "label": "UDP Ping",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/298.html",
      "id": "298"
    },
    {
      "Description": "<b>CAPEC-299: TCP SYN Ping</b><br>An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC<br>793 behavior specifies that when a TCP port is open, a host must respond to an<br>incoming SYN \"synchronize\" packet by completing stage two of the 'three-way<br>handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793<br>behavior is to respond with a RST \"reset\" packet. This behavior can be used to<br>'ping' a target to see if it is alive by sending a TCP SYN packet to a port and<br>then looking for a RST or an ACK packet in response.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP SYN Ping",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/299.html",
      "id": "299"
    },
    {
      "Description": "<b>CAPEC-3: Using Leading 'Ghost' Character Sequences to Bypass Input Filters</b><br>Some APIs will strip certain leading characters from a string of parameters. An<br>adversary can intentionally introduce leading \"ghost\" characters (extra<br>characters that don't affect the validity of the request at the API layer) that<br>enable the input to pass the filters and therefore process the adversary's<br>input. This occurs when the targeted API will accept input data in several<br>syntactic forms and interpret it in the equivalent semantic way, while the<br>filter does not take into account the full spectrum of the syntactic forms<br>acceptable to the targeted API.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Leading 'Ghost' Character Sequences to Bypass Input Filters",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/3.html",
      "id": "3"
    },
    {
      "Description": "<b>CAPEC-30: Hijacking a Privileged Thread of Execution</b><br>An adversary hijacks a privileged thread of execution by injecting malicious<br>code into a running process. By using a privleged thread to do their bidding,<br>adversaries can evade process-based detection that would stop an attack that<br>creates a new process. This can lead to an adversary gaining access to the<br>process's memory and can also enable elevated privileges. The most common way to<br>perform this attack is by suspending an existing thread and manipulating its<br>memory.",
      "color": "#75aaff",
      "size": 18,
      "label": "Hijacking a Privileged Thread of Execution",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/30.html",
      "id": "30"
    },
    {
      "Description": "<b>CAPEC-301: TCP Connect Scan</b><br>An adversary uses full TCP connection attempts to determine if a port is open on<br>the target system. The scanning process involves completing a 'three-way<br>handshake' with a remote port, and reports the port as closed if the full<br>handshake cannot be established. An advantage of TCP connect scanning is that it<br>works against any TCP/IP stack.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Connect Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/301.html",
      "id": "301"
    },
    {
      "Description": "<b>CAPEC-302: TCP FIN Scan</b><br>An adversary uses a TCP FIN scan to determine if ports are closed on the target<br>machine. This scan type is accomplished by sending TCP segments with the FIN bit<br>set in the packet header. The RFC 793 expected behavior is that any TCP segment<br>with an out-of-state Flag sent to an open port is discarded, whereas segments<br>with out-of-state flags sent to closed ports should be handled with a RST in<br>response. This behavior should allow the adversary to scan for closed ports by<br>sending certain types of rule-breaking packets (out of sync or disallowed by the<br>TCB) and detect closed ports via RST packets.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP FIN Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/302.html",
      "id": "302"
    },
    {
      "Description": "<b>CAPEC-303: TCP Xmas Scan</b><br>An adversary uses a TCP XMAS scan to determine if ports are closed on the target<br>machine. This scan type is accomplished by sending TCP segments with all<br>possible flags set in the packet header, generating packets that are illegal<br>based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an<br>out-of-state Flag sent to an open port is discarded, whereas segments with<br>out-of-state flags sent to closed ports should be handled with a RST in<br>response. This behavior should allow an attacker to scan for closed ports by<br>sending certain types of rule-breaking packets (out of sync or disallowed by the<br>TCB) and detect closed ports via RST packets.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Xmas Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/303.html",
      "id": "303"
    },
    {
      "Description": "<b>CAPEC-304: TCP Null Scan</b><br>An adversary uses a TCP NULL scan to determine if ports are closed on the target<br>machine. This scan type is accomplished by sending TCP segments with no flags in<br>the packet header, generating packets that are illegal based on RFC 793. The RFC<br>793 expected behavior is that any TCP segment with an out-of-state Flag sent to<br>an open port is discarded, whereas segments with out-of-state flags sent to<br>closed ports should be handled with a RST in response. This behavior should<br>allow an attacker to scan for closed ports by sending certain types of<br>rule-breaking packets (out of sync or disallowed by the TCB) and detect closed<br>ports via RST packets.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Null Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/304.html",
      "id": "304"
    },
    {
      "Description": "<b>CAPEC-305: TCP ACK Scan</b><br>An adversary uses TCP ACK segments to gather information about firewall or ACL<br>configuration. The purpose of this type of scan is to discover information about<br>filter configurations rather than port state. This type of scanning is rarely<br>useful alone, but when combined with SYN scanning, gives a more complete picture<br>of the type of firewall rules that are present.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP ACK Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/305.html",
      "id": "305"
    },
    {
      "Description": "<b>CAPEC-306: TCP Window Scan</b><br>An adversary engages in TCP Window scanning to analyze port status and operating<br>system type. TCP Window scanning uses the ACK scanning method but examine the<br>TCP Window Size field of response RST packets to make certain inferences. While<br>TCP Window Scans are fast and relatively stealthy, they work against fewer TCP<br>stack implementations than any other type of scan. Some operating systems return<br>a positive TCP window size when a RST packet is sent from an open port, and a<br>negative value when the RST originates from a closed port. TCP Window scanning<br>is one of the most complex scan types, and its results are difficult to<br>interpret. Window scanning alone rarely yields useful information, but when<br>combined with other types of scanning is more useful. It is a generally more<br>reliable means of making inference about operating system versions than port<br>status.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Window Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/306.html",
      "id": "306"
    },
    {
      "Description": "<b>CAPEC-307: TCP RPC Scan</b><br>An adversary scans for RPC services listing on a Unix/Linux host.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP RPC Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/307.html",
      "id": "307"
    },
    {
      "Description": "<b>CAPEC-308: UDP Scan</b><br>An adversary engages in UDP scanning to gather information about UDP port status<br>on the target system. UDP scanning methods involve sending a UDP datagram to the<br>target port and looking for evidence that the port is closed. Open UDP ports<br>usually do not respond to UDP datagrams as there is no stateful mechanism within<br>the protocol that requires building or establishing a session. Responses to UDP<br>datagrams are therefore application specific and cannot be relied upon as a<br>method of detecting an open port. UDP scanning relies heavily upon ICMP<br>diagnostic messages in order to determine the status of a remote port.",
      "color": "#94ebff",
      "size": 10,
      "label": "UDP Scan",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/308.html",
      "id": "308"
    },
    {
      "Description": "<b>CAPEC-31: Accessing/Intercepting/Modifying HTTP Cookies</b><br>This attack relies on the use of HTTP Cookies to store credentials, state<br>information and other critical data on client systems. There are several<br>different forms of this attack. The first form of this attack involves accessing<br>HTTP Cookies to mine for potentially sensitive data contained therein. The<br>second form involves intercepting this data as it is transmitted from client to<br>server. This intercepted information is then used by the adversary to<br>impersonate the remote user/session. The third form is when the cookie's content<br>is modified by the adversary before it is sent back to the server. Here the<br>adversary seeks to convince the target server to operate on this falsified<br>information.",
      "color": "#94ebff",
      "size": 10,
      "label": "Accessing/Intercepting/Modifying HTTP Cookies",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/31.html",
      "id": "31"
    },
    {
      "Description": "<b>CAPEC-39: Manipulating Opaque Client-based Data Tokens</b><br>In circumstances where an application holds important data client-side in tokens<br>(cookies, URLs, data files, and so forth) that data can be manipulated. If<br>client or server-side application components reinterpret that data as<br>authentication tokens or data (such as store item pricing or wallet information)<br>then even opaquely manipulating that data may bear fruit for an Attacker. In<br>this pattern an attacker undermines the assumption that client side tokens have<br>been adequately protected from tampering through use of encryption or<br>obfuscation.",
      "color": "#75aaff",
      "size": 18,
      "label": "Manipulating Opaque Client-based Data Tokens",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/39.html",
      "id": "39"
    },
    {
      "Description": "<b>CAPEC-310: Scanning for Vulnerable Software</b><br>An attacker engages in scanning activity to find vulnerable software versions or<br>types, such as operating system versions or network services. Vulnerable or<br>exploitable network configurations, such as improperly firewalled systems, or<br>misconfigured systems in the DMZ or external network, provide windows of<br>opportunity for an attacker. Common types of vulnerable software include<br>unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on<br>open ports that the attacker has identified. Attackers usually begin probing for<br>vulnerable software once the external network has been port scanned and<br>potential targets have been revealed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Scanning for Vulnerable Software",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/310.html",
      "id": "310"
    },
    {
      "Description": "<b>CAPEC-312: Active OS Fingerprinting</b><br>An adversary engages in activity to detect the operating system or firmware<br>version of a remote target by interrogating a device, server, or platform with a<br>probe designed to solicit behavior that will reveal information about the<br>operating systems or firmware in the environment. Operating System detection is<br>possible because implementations of common protocols (Such as IP or TCP) differ<br>in distinct ways. While the implementation differences are not sufficient to<br>'break' compatibility with the protocol the differences are detectable because<br>the target will respond in unique ways to specific probing activity that breaks<br>the semantic or logical rules of packet construction for a protocol. Different<br>operating systems will have a unique response to the anomalous input, providing<br>the basis to fingerprint the OS behavior. This type of OS fingerprinting can<br>distinguish between operating system types and versions.",
      "color": "#75aaff",
      "size": 18,
      "label": "Active OS Fingerprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/312.html",
      "id": "312"
    },
    {
      "Description": "<b>CAPEC-313: Passive OS Fingerprinting</b><br>An adversary engages in activity to detect the version or type of OS software in<br>a an environment by passively monitoring communication between devices, nodes,<br>or applications. Passive techniques for operating system detection send no<br>actual probes to a target, but monitor network or client-server communication<br>between nodes in order to identify operating systems based on observed behavior<br>as compared to a database of known signatures or values. While passive OS<br>fingerprinting is not usually as reliable as active methods, it is generally<br>better able to evade detection.",
      "color": "#75aaff",
      "size": 18,
      "label": "Passive OS Fingerprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/313.html",
      "id": "313"
    },
    {
      "Description": "<b>CAPEC-317: IP ID Sequencing Probe</b><br>This OS fingerprinting probe analyzes the IP 'ID' field sequence number<br>generation algorithm of a remote host. Operating systems generate IP 'ID'<br>numbers differently, allowing an attacker to identify the operating system of<br>the host by examining how is assigns ID numbers when generating response<br>packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so<br>ID sequence generation differs from implementation to implementation. There are<br>two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing<br>the IP 'ID' sequence generation algorithm for one protocol used by a host and<br>Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values<br>spanning multiple protocols, such as between ICMP and TCP.",
      "color": "#94ebff",
      "size": 10,
      "label": "IP ID Sequencing Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/317.html",
      "id": "317"
    },
    {
      "Description": "<b>CAPEC-318: IP 'ID' Echoed Byte-Order Probe</b><br>This OS fingerprinting probe tests to determine if the remote host echoes back<br>the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with<br>an arbitrary IP 'ID' value to a closed port on the remote host to observe the<br>manner in which this bit is echoed back in the ICMP error message. The<br>identification field (ID) is typically utilized for reassembling a fragmented<br>packet. Some operating systems or router firmware reverse the bit order of the<br>ID field when echoing the IP Header portion of the original datagram within an<br>ICMP error message.",
      "color": "#94ebff",
      "size": 10,
      "label": "IP 'ID' Echoed Byte-Order Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/318.html",
      "id": "318"
    },
    {
      "Description": "<b>CAPEC-319: IP (DF) 'Don't Fragment Bit' Echoing Probe</b><br>This OS fingerprinting probe tests to determine if the remote host echoes back<br>the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP<br>datagram with the DF bit set to a closed port on the remote host to observe<br>whether the 'DF' bit is set in the response packet. Some operating systems will<br>echo the bit in the ICMP error message while others will zero out the bit in the<br>response packet.",
      "color": "#94ebff",
      "size": 10,
      "label": "IP (DF) 'Don't Fragment Bit' Echoing Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/319.html",
      "id": "319"
    },
    {
      "Description": "<b>CAPEC-32: XSS Through HTTP Query Strings</b><br>An adversary embeds malicious script code in the parameters of an HTTP query<br>string and convinces a victim to submit the HTTP request that contains the query<br>string to a vulnerable web application. The web application then procedes to use<br>the values parameters without properly validation them first and generates the<br>HTML code that will be executed by the victim's browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Through HTTP Query Strings",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/32.html",
      "id": "32"
    },
    {
      "Description": "<b>CAPEC-320: TCP Timestamp Probe</b><br>This OS fingerprinting probe examines the remote server's implementation of TCP<br>timestamps. Not all operating systems implement timestamps within the TCP<br>header, but when timestamps are used then this provides the attacker with a<br>means to guess the operating system of the target. The attacker begins by<br>probing any active TCP service in order to get response which contains a TCP<br>timestamp. Different Operating systems update the timestamp value using<br>different intervals. This type of analysis is most accurate when multiple<br>timestamp responses are received and then analyzed. TCP timestamps can be found<br>in the TCP Options field of the TCP header.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Timestamp Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/320.html",
      "id": "320"
    },
    {
      "Description": "<b>CAPEC-321: TCP Sequence Number Probe</b><br>This OS fingerprinting probe tests the target system's assignment of TCP<br>sequence numbers. One common way to test TCP Sequence Number generation is to<br>send a probe packet to an open port on the target and then compare the how the<br>Sequence Number generated by the target relates to the Acknowledgement Number in<br>the probe packet. Different operating systems assign Sequence Numbers<br>differently, so a fingerprint of the operating system can be obtained by<br>categorizing the relationship between the acknowledgement number and sequence<br>number as follows: 1) the Sequence Number generated by the target is Zero, 2)<br>the Sequence Number generated by the target is the same as the acknowledgement<br>number in the probe, 3) the Sequence Number generated by the target is the<br>acknowledgement number plus one, or 4) the Sequence Number is any other non-zero<br>number.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Sequence Number Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/321.html",
      "id": "321"
    },
    {
      "Description": "<b>CAPEC-322: TCP (ISN) Greatest Common Divisor Probe</b><br>This OS fingerprinting probe sends a number of TCP SYN packets to an open port<br>of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK<br>response packets is analyzed to determine the smallest number that the target<br>host uses when incrementing sequence numbers. This information can be useful for<br>identifying an operating system because particular operating systems and<br>versions increment sequence numbers using different values. The result of the<br>analysis is then compared against a database of OS behaviors to determine the OS<br>type and/or version.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP (ISN) Greatest Common Divisor Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/322.html",
      "id": "322"
    },
    {
      "Description": "<b>CAPEC-323: TCP (ISN) Counter Rate Probe</b><br>This OS detection probe measures the average rate of initial sequence number<br>increments during a period of time. Sequence numbers are incremented using a<br>time-based algorithm and are susceptible to a timing analysis that can determine<br>the number of increments per unit time. The result of this analysis is then<br>compared against a database of operating systems and versions to determine<br>likely operation system matches.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP (ISN) Counter Rate Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/323.html",
      "id": "323"
    },
    {
      "Description": "<b>CAPEC-324: TCP (ISN) Sequence Predictability Probe</b><br>This type of operating system probe attempts to determine an estimate for how<br>predictable the sequence number generation algorithm is for a remote host.<br>Statistical techniques, such as standard deviation, can be used to determine how<br>predictable the sequence number generation is for a system. This result can then<br>be compared to a database of operating system behaviors to determine a likely<br>match for operating system and version.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP (ISN) Sequence Predictability Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/324.html",
      "id": "324"
    },
    {
      "Description": "<b>CAPEC-325: TCP Congestion Control Flag (ECN) Probe</b><br>This OS fingerprinting probe checks to see if the remote host supports explicit<br>congestion notification (ECN) messaging. ECN messaging was designed to allow<br>routers to notify a remote host when signal congestion problems are occurring.<br>Explicit Congestion Notification messaging is defined by RFC 3168. Different<br>operating systems and versions may or may not implement ECN notifications, or<br>may respond uniquely to particular ECN flag types.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Congestion Control Flag (ECN) Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/325.html",
      "id": "325"
    },
    {
      "Description": "<b>CAPEC-326: TCP Initial Window Size Probe</b><br>This OS fingerprinting probe checks the initial TCP Window size. TCP stacks<br>limit the range of sequence numbers allowable within a session to maintain the<br>\"connected\" state within TCP protocol logic. The initial window size specifies a<br>range of acceptable sequence numbers that will qualify as a response to an ACK<br>packet within a session. Various operating systems use different Initial window<br>sizes. The initial window size can be sampled by establishing an ordinary TCP<br>connection.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Initial Window Size Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/326.html",
      "id": "326"
    },
    {
      "Description": "<b>CAPEC-327: TCP Options Probe</b><br>This OS fingerprinting probe analyzes the type and order of any TCP header<br>options present within a response segment. Most operating systems use unique<br>ordering and different option sets when options are present. RFC 793 does not<br>specify a required order when options are present, so different implementations<br>use unique ways of ordering or structuring TCP options. TCP options can be<br>generated by ordinary TCP traffic.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Options Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/327.html",
      "id": "327"
    },
    {
      "Description": "<b>CAPEC-328: TCP 'RST' Flag Checksum Probe</b><br>This OS fingerprinting probe performs a checksum on any ASCII data contained<br>within the data portion or a RST packet. Some operating systems will report a<br>human-readable text message in the payload of a 'RST' (reset) packet when<br>specific types of connection errors occur. RFC 1122 allows text payloads within<br>reset packets but not all operating systems or routers implement this<br>functionality.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP 'RST' Flag Checksum Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/328.html",
      "id": "328"
    },
    {
      "Description": "<b>CAPEC-329: ICMP Error Message Quoting Probe</b><br>An adversary uses a technique to generate an ICMP Error message (Port<br>Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded,<br>Parameter Problem) from a target and then analyze the amount of data returned or<br>\"Quoted\" from the originating request that generated the ICMP error message.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP Error Message Quoting Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/329.html",
      "id": "329"
    },
    {
      "Description": "<b>CAPEC-33: HTTP Request Smuggling</b><br>An adversary abuses the flexibility and discrepancies in the parsing and<br>interpretation of HTTP Request messages using various HTTP headers, request-line<br>and body parameters as well as message sizes (denoted by the end of message<br>signaled by a given HTTP header) by different intermediary HTTP agents (e.g.,<br>load balancer, reverse proxy, web caching proxies, application firewalls, etc.)<br>to secretly send unauthorized and malicious HTTP requests to a back-end HTTP<br>agent (e.g., web server). See CanPrecede relationships for possible<br>consequences.",
      "color": "#94ebff",
      "size": 10,
      "label": "HTTP Request Smuggling",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/33.html",
      "id": "33"
    },
    {
      "Description": "<b>CAPEC-330: ICMP Error Message Echoing Integrity Probe</b><br>An adversary uses a technique to generate an ICMP Error message (Port<br>Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded,<br>Parameter Problem) from a target and then analyze the integrity of data returned<br>or \"Quoted\" from the originating request that generated the error message.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP Error Message Echoing Integrity Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/330.html",
      "id": "330"
    },
    {
      "Description": "<b>CAPEC-331: ICMP IP Total Length Field Probe</b><br>An adversary sends a UDP packet to a closed port on the target machine to<br>solicit an IP Header's total length field value within the echoed 'Port<br>Unreachable\" error message. This type of behavior is useful for building a<br>signature-base of operating system responses, particularly when error messages<br>contain other types of information that is useful identifying specific operating<br>system responses.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP IP Total Length Field Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/331.html",
      "id": "331"
    },
    {
      "Description": "<b>CAPEC-332: ICMP IP 'ID' Field Error Message Probe</b><br>An adversary sends a UDP datagram having an assigned value to its internet<br>identification field (ID) to a closed port on a target to observe the manner in<br>which this bit is echoed back in the ICMP error message. This allows the<br>attacker to construct a fingerprint of specific OS behaviors.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP IP 'ID' Field Error Message Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/332.html",
      "id": "332"
    },
    {
      "Description": "<b>CAPEC-34: HTTP Response Splitting</b><br>An adversary manipulates and injects malicious content, in the form of secret<br>unauthorized HTTP responses, into a single HTTP response from a vulnerable or<br>compromised back-end HTTP agent (e.g., web server) or into an already spoofed<br>HTTP response from an adversary controlled domain/site. See CanPrecede<br>relationships for possible consequences.",
      "color": "#94ebff",
      "size": 10,
      "label": "HTTP Response Splitting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/34.html",
      "id": "34"
    },
    {
      "Description": "<b>CAPEC-35: Leverage Executable Code in Non-Executable Files</b><br>An attack of this type exploits a system's trust in configuration and resource<br>files. When the executable loads the resource (such as an image file or<br>configuration file) the attacker has modified the file to either execute<br>malicious code directly or manipulate the target process (e.g. application<br>server) to execute based on the malicious configuration parameters. Since<br>systems are increasingly interrelated mashing up resources from local and remote<br>sources the possibility of this attack occurring is high.",
      "color": "#94ebff",
      "size": 10,
      "label": "Leverage Executable Code in Non-Executable Files",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/35.html",
      "id": "35"
    },
    {
      "Description": "<b>CAPEC-36: Using Unpublished Interfaces or Functionality</b><br>An adversary searches for and invokes interfaces or functionality that the<br>target system designers did not intend to be publicly available. If interfaces<br>fail to authenticate requests, the attacker may be able to invoke functionality<br>they are not authorized for.",
      "color": "#75aaff",
      "size": 18,
      "label": "Using Unpublished Interfaces or Functionality",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/36.html",
      "id": "36"
    },
    {
      "Description": "<b>CAPEC-37: Retrieve Embedded Sensitive Data</b><br>An attacker examines a target system to find sensitive data that has been<br>embedded within it. This information can reveal confidential contents, such as<br>account numbers or individual keys/credentials that can be used as an<br>intermediate step in a larger attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "Retrieve Embedded Sensitive Data",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/37.html",
      "id": "37"
    },
    {
      "Description": "<b>CAPEC-38: Leveraging/Manipulating Configuration File Search Paths</b><br>This pattern of attack sees an adversary load a malicious resource into a<br>program's standard path so that when a known command is executed then the system<br>instead executes the malicious component. The adversary can either modify the<br>search path a program uses, like a PATH variable or classpath, or they can<br>manipulate resources on the path to point to their malicious components. J2EE<br>applications and other component based applications that are built from multiple<br>binaries can have very long list of dependencies to execute. If one of these<br>libraries and/or references is controllable by the attacker then application<br>controls can be circumvented by the attacker.",
      "color": "#94ebff",
      "size": 10,
      "label": "Leveraging/Manipulating Configuration File Search Paths",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/38.html",
      "id": "38"
    },
    {
      "Description": "<b>CAPEC-383: Harvesting Information via API Event Monitoring</b><br>An adversary hosts an event within an application framework and then monitors<br>the data exchanged during the course of the event for the purpose of harvesting<br>any important data leaked during the transactions. One example could be<br>harvesting lists of usernames or userIDs for the purpose of sending spam<br>messages to those users. One example of this type of attack involves the<br>adversary creating an event within the sub-application. Assume the adversary<br>hosts a \"virtual sale\" of rare items. As other users enter the event, the<br>attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of<br>everyone who attends. The adversary would then be able to spam those users<br>within the application using an automated script.",
      "color": "#94ebff",
      "size": 10,
      "label": "Harvesting Information via API Event Monitoring",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/383.html",
      "id": "383"
    },
    {
      "Description": "<b>CAPEC-407: Pretexting</b><br>An adversary engages in pretexting behavior to solicit information from target<br>persons, or manipulate the target into performing some action that serves the<br>adversary's interests. During a pretexting attack, the adversary creates an<br>invented scenario, assuming an identity or role to persuade a targeted victim to<br>release information or perform some action. It is more than just creating a lie;<br>in some cases it can be creating a whole new identity and then using that<br>identity to manipulate the receipt of information.",
      "color": "#75aaff",
      "size": 18,
      "label": "Pretexting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/407.html",
      "id": "407"
    },
    {
      "Description": "<b>CAPEC-384: Application API Message Manipulation via Man-in-the-Middle</b><br>An attacker manipulates either egress or ingress data from a client within an<br>application framework in order to change the content of messages. Performing<br>this attack can allow the attacker to gain unauthorized privileges within the<br>application, or conduct attacks such as phishing, deceptive strategies to spread<br>malware, or traditional web-application attacks. The techniques require use of<br>specialized software that allow the attacker to perform adversary-in-the-middle<br>(CAPEC-94) communications between the web browser and the remote system. Despite<br>the use of AiTH software, the attack is actually directed at the server, as the<br>client is one node in a series of content brokers that pass information along to<br>the application framework. Additionally, it is not true<br>\"Adversary-in-the-Middle\" attack at the network layer, but an application-layer<br>attack the root cause of which is the master applications trust in the integrity<br>of code supplied by the client.",
      "color": "#75aaff",
      "size": 18,
      "label": "Application API Message Manipulation via Man-in-the-Middle",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/384.html",
      "id": "384"
    },
    {
      "Description": "<b>CAPEC-385: Transaction or Event Tampering via Application API Manipulation</b><br>An attacker hosts or joins an event or transaction within an application<br>framework in order to change the content of messages or items that are being<br>exchanged. Performing this attack allows the attacker to manipulate content in<br>such a way as to produce messages or content that look authentic but may contain<br>deceptive links, substitute one item or another, spoof an existing item and<br>conduct a false exchange, or otherwise change the amounts or identity of what is<br>being exchanged. The techniques require use of specialized software that allow<br>the attacker to man-in-the-middle communications between the web browser and the<br>remote system in order to change the content of various application elements.<br>Often, items exchanged in game can be monetized via sales for coin, virtual<br>dollars, etc. The purpose of the attack is for the attack to scam the victim by<br>trapping the data packets involved the exchange and altering the integrity of<br>the transfer process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Transaction or Event Tampering via Application API Manipulation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/385.html",
      "id": "385"
    },
    {
      "Description": "<b>CAPEC-386: Application API Navigation Remapping</b><br>An attacker manipulates either egress or ingress data from a client within an<br>application framework in order to change the destination and/or content of<br>links/buttons displayed to a user within API messages. Performing this attack<br>allows the attacker to manipulate content in such a way as to produce messages<br>or content that looks authentic but contains links/buttons that point to an<br>attacker controlled destination. Some applications make navigation remapping<br>more difficult to detect because the actual HREF values of images, profile<br>elements, and links/buttons are masked. One example would be to place an image<br>in a user's photo gallery that when clicked upon redirected the user to an<br>off-site location. Also, traditional web vulnerabilities (such as CSRF) can be<br>constructed with remapped buttons or links. In some cases navigation remapping<br>can be used for Phishing attacks or even means to artificially boost the page<br>view, user site reputation, or click-fraud.",
      "color": "#75aaff",
      "size": 18,
      "label": "Application API Navigation Remapping",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/386.html",
      "id": "386"
    },
    {
      "Description": "<b>CAPEC-387: Navigation Remapping To Propagate Malicious Content</b><br>An adversary manipulates either egress or ingress data from a client within an<br>application framework in order to change the content of messages and thereby<br>circumvent the expected application logic.",
      "color": "#94ebff",
      "size": 10,
      "label": "Navigation Remapping To Propagate Malicious Content",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/387.html",
      "id": "387"
    },
    {
      "Description": "<b>CAPEC-388: Application API Button Hijacking</b><br>An attacker manipulates either egress or ingress data from a client within an<br>application framework in order to change the destination and/or content of<br>buttons displayed to a user within API messages. Performing this attack allows<br>the attacker to manipulate content in such a way as to produce messages or<br>content that looks authentic but contains buttons that point to an attacker<br>controlled destination.",
      "color": "#94ebff",
      "size": 10,
      "label": "Application API Button Hijacking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/388.html",
      "id": "388"
    },
    {
      "Description": "<b>CAPEC-389: Content Spoofing Via Application API Manipulation</b><br>An attacker manipulates either egress or ingress data from a client within an<br>application framework in order to change the content of messages. Performing<br>this attack allows the attacker to manipulate content in such a way as to<br>produce messages or content that look authentic but may contain deceptive links,<br>spam-like content, or links to the attackers' code. In general, content-spoofing<br>within an application API can be employed to stage many different types of<br>attacks varied based on the attackers' intent. The techniques require use of<br>specialized software that allow the attacker to use adversary-in-the-middle<br>(CAPEC-94) communications between the web browser and the remote system.",
      "color": "#94ebff",
      "size": 10,
      "label": "Content Spoofing Via Application API Manipulation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/389.html",
      "id": "389"
    },
    {
      "Description": "<b>CAPEC-390: Bypassing Physical Security</b><br>Facilities often used layered models for physical security such as traditional<br>locks, Electronic-based card entry systems, coupled with physical alarms.<br>Hardware security mechanisms range from the use of computer case and cable locks<br>as well as RFID tags for tracking computer assets. This layered approach makes<br>it difficult for random physical security breaches to go unnoticed, but is less<br>effective at stopping deliberate and carefully planned break-ins. Avoiding<br>detection begins with evading building security and surveillance and methods for<br>bypassing the electronic or physical locks which secure entry points.",
      "color": "#2176ff",
      "size": 30,
      "label": "Bypassing Physical Security",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/390.html",
      "id": "390"
    },
    {
      "Description": "<b>CAPEC-391: Bypassing Physical Locks</b><br>An attacker uses techniques and methods to bypass physical security measures of<br>a building or facility. Physical locks may range from traditional lock and key<br>mechanisms, cable locks used to secure laptops or servers, locks on server<br>cases, or other such devices. Techniques such as lock bumping, lock forcing via<br>snap guns, or lock picking can be employed to bypass those locks and gain access<br>to the facilities or devices they protect, although stealth, evidence of<br>tampering, and the integrity of the lock following an attack, are considerations<br>that may determine the method employed. Physical locks are limited by the<br>complexity of the locking mechanism. While some locks may offer protections such<br>as shock resistant foam to prevent bumping or lock forcing methods, many<br>commonly employed locks offer no such countermeasures.",
      "color": "#75aaff",
      "size": 18,
      "label": "Bypassing Physical Locks",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/391.html",
      "id": "391"
    },
    {
      "Description": "<b>CAPEC-392: Lock Bumping</b><br>An attacker uses a bump key to force a lock on a building or facility and gain<br>entry. Lock Bumping is the use of a special type of key that can be tapped or<br>bumped to cause the pins within the lock to fall into temporary alignment,<br>allowing the lock to be opened. Lock bumping allows an attacker to open a lock<br>without having the correct key. A standard lock is secured by a set of internal<br>pins that prevent the device from turning. Spring loaded driver pins push down<br>on the key pins. When the correct key is inserted, the ridges on the key push<br>the key pins up and against the driver pins, causing correct alignment which<br>allows the lock cylinder to rotate. A bump key is a specially constructed key<br>that exploits this design. When the bump key is struck or firmly tapped, its<br>teeth transfer the force of the tap into the key pins, causing the lock to<br>momentarily shift into proper alignment for the mechanism to be opened.",
      "color": "#94ebff",
      "size": 10,
      "label": "Lock Bumping",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/392.html",
      "id": "392"
    },
    {
      "Description": "<b>CAPEC-393: Lock Picking</b><br>An attacker uses lock picking tools and techniques to bypass the locks on a<br>building or facility. Lock picking is the use of a special set of tools to<br>manipulate the pins within a lock. Different sets of tools are required for each<br>type of lock. Lock picking attacks have the advantage of being non-invasive in<br>that if performed correctly the lock will not be damaged. A standard lock<br>pin-and-tumbler lock is secured by a set of internal pins that prevent the<br>tumbler device from turning. Spring loaded driver pins push down on the key pins<br>preventing rotation so that the bolt remains in a locked position.. When the<br>correct key is inserted, the ridges on the key push the key pins up and against<br>the driver pins, causing correct alignment which allows the lock cylinder to<br>rotate. Most common locks, such as domestic locks in the US, can be picked using<br>a standard 2 tools (i.e. a torsion wrench and a hook pick).",
      "color": "#94ebff",
      "size": 10,
      "label": "Lock Picking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/393.html",
      "id": "393"
    },
    {
      "Description": "<b>CAPEC-394: Using a Snap Gun Lock to Force a Lock</b><br>An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a<br>building or facility. A Pick Gun is a special type of lock picking instrument<br>that works on similar principles as lock bumping. A snap gun is a hand-held<br>device with an attached metal pick. The metal pick strikes the pins within the<br>lock, transferring motion from the key pins to the driver pins and forcing the<br>lock into momentary alignment. A standard lock is secured by a set of internal<br>pins that prevent the device from turning. Spring loaded driver pins push down<br>on the key pins. When the correct key is inserted, the ridges on the key push<br>the key pins up and against the driver pins, causing correct alignment which<br>allows the lock cylinder to rotate. A Snap Gun exploits this design by using a<br>metal pin to strike all of the key pins at once, forcing the driver pins to<br>shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may<br>damage the lock more easily, leaving evidence that the lock has been tampered<br>with.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using a Snap Gun Lock to Force a Lock",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/394.html",
      "id": "394"
    },
    {
      "Description": "<b>CAPEC-395: Bypassing Electronic Locks and Access Controls</b><br>An attacker exploits security assumptions to bypass electronic locks or other<br>forms of access controls. Most attacks against electronic access controls follow<br>similar methods but utilize different tools. Some electronic locks utilize<br>magnetic strip cards, others employ RFID tags embedded within a card or badge,<br>or may involve more sophisticated protections such as voice-print, thumb-print,<br>or retinal biometrics. Magnetic Strip and RFID technologies are the most<br>widespread because they are cost effective to deploy and more easily integrated<br>with other electronic security measures. These technologies share common<br>weaknesses that an attacker can exploit to gain access to a facility protected<br>by the mechanisms via copying legitimate cards or badges, or generating new<br>cards using reverse-engineered algorithms.",
      "color": "#75aaff",
      "size": 18,
      "label": "Bypassing Electronic Locks and Access Controls",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/395.html",
      "id": "395"
    },
    {
      "Description": "<b>CAPEC-397: Cloning Magnetic Strip Cards</b><br>An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or<br>'magstripe') to gain unauthorized access to a physical location or a person's<br>private information. Magstripe cards encode data on a band of iron-based<br>magnetic particles arrayed in a stripe along a rectangular card. Most magstripe<br>card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The<br>primary advantage of magstripe technology is ease of encoding and portability,<br>but this also renders magnetic strip cards susceptible to unauthorized<br>duplication. If magstripe cards are used for access control, all an attacker<br>need do is obtain a valid card long enough to make a copy of the card and then<br>return the card to its location (i.e. a co-worker's desk). Magstripe<br>reader/writers are widely available as well as software for analyzing data<br>encoded on the cards. By swiping a valid card, it becomes trivial to make any<br>number of duplicates that function as the original.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cloning Magnetic Strip Cards",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/397.html",
      "id": "397"
    },
    {
      "Description": "<b>CAPEC-398: Magnetic Strip Card Brute Force Attacks</b><br>An adversary analyzes the data on two or more magnetic strip cards and is able<br>to generate new cards containing valid sequences that allow unauthorized access<br>and/or impersonation of individuals.",
      "color": "#94ebff",
      "size": 10,
      "label": "Magnetic Strip Card Brute Force Attacks",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/398.html",
      "id": "398"
    },
    {
      "Description": "<b>CAPEC-399: Cloning RFID Cards or Chips</b><br>An attacker analyzes data returned by an RFID chip and uses this information to<br>duplicate a RFID signal that responds identically to the target chip. In some<br>cases RFID chips are used for building access control, employee identification,<br>or as markers on products being delivered along a supply chain. Some<br>organizations also embed RFID tags inside computer assets to trigger alarms if<br>they are removed from particular rooms, zones, or buildings. Similar to Magnetic<br>strip cards, RFID cards are susceptible to duplication (cloning) and reuse.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cloning RFID Cards or Chips",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/399.html",
      "id": "399"
    },
    {
      "Description": "<b>CAPEC-4: Using Alternative IP Address Encodings</b><br>This attack relies on the adversary using unexpected formats for representing IP<br>addresses. Networked applications may expect network location information in a<br>specific format, such as fully qualified domains names (FQDNs), URL, IP address,<br>or IP Address ranges. If the location information is not validated against a<br>variety of different possible encodings and formats, the adversary can use an<br>alternate format to bypass application access control.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Alternative IP Address Encodings",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/4.html",
      "id": "4"
    },
    {
      "Description": "<b>CAPEC-40: Manipulating Writeable Terminal Devices</b><br>This attack exploits terminal devices that allow themselves to be written to by<br>other users. The attacker sends command strings to the target terminal device<br>hoping that the target user will hit enter and thereby execute the malicious<br>command with their privileges. The attacker can send the results (such as<br>copying /etc/passwd) to a known directory and collect once the attack has<br>succeeded.",
      "color": "#75aaff",
      "size": 18,
      "label": "Manipulating Writeable Terminal Devices",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/40.html",
      "id": "40"
    },
    {
      "Description": "<b>CAPEC-400: RFID Chip Deactivation or Destruction</b><br>An attacker uses methods to deactivate a passive RFID tag for the purpose of<br>rendering the tag, badge, card, or object containing the tag unresponsive. RFID<br>tags are used primarily for access control, inventory, or anti-theft devices.<br>The purpose of attacking the RFID chip is to disable or damage the chip without<br>causing damage to the object housing it.",
      "color": "#94ebff",
      "size": 10,
      "label": "RFID Chip Deactivation or Destruction",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/400.html",
      "id": "400"
    },
    {
      "Description": "<b>CAPEC-401: Physically Hacking Hardware</b><br>An adversary exploits a weakness in access control to gain access to currently<br>installed hardware and precedes to implement changes or secretly replace a<br>hardware component which undermines the system's integrity for the purpose of<br>carrying out an attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Physically Hacking Hardware",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/401.html",
      "id": "401"
    },
    {
      "Description": "<b>CAPEC-440: Hardware Integrity Attack</b><br>An adversary exploits a weakness in the system maintenance process and causes a<br>change to be made to a technology, product, component, or sub-component or a new<br>one installed during its deployed use at the victim location for the purpose of<br>carrying out an attack.",
      "color": "#2176ff",
      "size": 30,
      "label": "Hardware Integrity Attack",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/440.html",
      "id": "440"
    },
    {
      "Description": "<b>CAPEC-402: Bypassing ATA Password Security</b><br>An adversary exploits a weakness in ATA security on a drive to gain access to<br>the information the drive contains without supplying the proper credentials. ATA<br>Security is often employed to protect hard disk information from unauthorized<br>access. The mechanism requires the user to type in a password before the BIOS is<br>allowed access to drive contents. Some implementations of ATA security will<br>accept the ATA command to update the password without the user having<br>authenticated with the BIOS. This occurs because the security mechanism assumes<br>the user has first authenticated via the BIOS prior to sending commands to the<br>drive. Various methods exist for exploiting this flaw, the most common being<br>installing the ATA protected drive into a system lacking ATA security features<br>(a.k.a. hot swapping). Once the drive is installed into the new system the BIOS<br>can be used to reset the drive password.",
      "color": "#94ebff",
      "size": 10,
      "label": "Bypassing ATA Password Security",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/402.html",
      "id": "402"
    },
    {
      "Description": "<b>CAPEC-406: Dumpster Diving</b><br>An adversary cases an establishment and searches through trash bins, dumpsters,<br>or areas where company information may have been accidentally discarded for<br>information items which may be useful to the dumpster diver. The devastating<br>nature of the items and/or information found can be anything from medical<br>records, resumes, personal photos and emails, bank statements, account details<br>or information about software, tech support logs and so much more, including<br>hardware devices. By collecting this information an adversary may be able to<br>learn important facts about the person or organization that play a role in<br>helping the adversary in their attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "Dumpster Diving",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/406.html",
      "id": "406"
    },
    {
      "Description": "<b>CAPEC-416: Manipulate Human Behavior</b><br>An adversary exploits inherent human psychological predisposition to influence a<br>targeted individual or group to solicit information or manipulate the target<br>into performing an action that serves the adversary's interests. Many<br>interpersonal social engineering techniques do not involve outright deception,<br>although they can; many are subtle ways of manipulating a target to remove<br>barriers, make the target feel comfortable, and produce an exchange in which the<br>target is either more likely to share information directly, or let key<br>information slip out unintentionally. A skilled adversary uses these techniques<br>when appropriate to produce the desired outcome. Manipulation techniques vary<br>from the overt, such as pretending to be a supervisor to a help desk, to the<br>subtle, such as making the target feel comfortable with the adversary's speech<br>and thought patterns.",
      "color": "#2176ff",
      "size": 30,
      "label": "Manipulate Human Behavior",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/416.html",
      "id": "416"
    },
    {
      "Description": "<b>CAPEC-410: Information Elicitation</b><br>An adversary engages an individual using any combination of social engineering<br>methods for the purpose of extracting information. Accurate contextual and<br>environmental queues, such as knowing important information about the target<br>company or individual can greatly increase the success of the attack and the<br>quality of information gathered. Authentic mimicry combined with detailed<br>knowledge increases the success of elicitation attacks.",
      "color": "#2176ff",
      "size": 30,
      "label": "Information Elicitation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/410.html",
      "id": "410"
    },
    {
      "Description": "<b>CAPEC-41: Using Meta-characters in E-mail Headers to Inject Malicious Payloads</b><br>This type of attack involves an attacker leveraging meta-characters in email<br>headers to inject improper behavior into email programs. Email software has<br>become increasingly sophisticated and feature-rich. In addition, email<br>applications are ubiquitous and connected directly to the Web making them ideal<br>targets to launch and propagate attacks. As the user demand for new<br>functionality in email applications grows, they become more like browsers with<br>complex rendering and plug in routines. As more email functionality is included<br>and abstracted from the user, this creates opportunities for attackers.<br>Virtually all email applications do not list email header information by<br>default, however the email header contains valuable attacker vectors for the<br>attacker to exploit particularly if the behavior of the email client application<br>is known. Meta-characters are hidden from the user, but can contain scripts,<br>enumerations, probes, and other attacks against the user's system.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/41.html",
      "id": "41"
    },
    {
      "Description": "<b>CAPEC-412: Pretexting via Customer Service</b><br>An adversary engages in pretexting behavior, assuming the role of someone who<br>works for Customer Service, to solicit information from target persons, or<br>manipulate the target into performing an action that serves the adversary's<br>interests. One example of a scenario such as this would be to call an<br>individual, articulate your false affiliation with a credit card company, and<br>then attempt to get the individual to verify their credit card number.",
      "color": "#94ebff",
      "size": 10,
      "label": "Pretexting via Customer Service",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/412.html",
      "id": "412"
    },
    {
      "Description": "<b>CAPEC-413: Pretexting via Tech Support</b><br>An adversary engages in pretexting behavior, assuming the role of a tech support<br>worker, to solicit information from target persons, or manipulate the target<br>into performing an action that serves the adversary's interests. An adversary<br>who uses social engineering to impersonate a tech support worker can have<br>devastating effects on a network. This is an effective attack vector, because it<br>can give an adversary physical access to network computers. It only takes a<br>matter of seconds for someone to compromise a computer with physical access. One<br>of the best technological tools at the disposal of a social engineer, posing as<br>a technical support person, is a USB thumb drive. These are small, easy to<br>conceal, and can be loaded with different payloads depending on what task needs<br>to be done. However, this form of attack does not require physical access as it<br>can also be effectively carried out via phone or email.",
      "color": "#94ebff",
      "size": 10,
      "label": "Pretexting via Tech Support",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/413.html",
      "id": "413"
    },
    {
      "Description": "<b>CAPEC-414: Pretexting via Delivery Person</b><br>An adversary engages in pretexting behavior, assuming the role of a delivery<br>person, to solicit information from target persons, or manipulate the target<br>into performing an action that serves the adversary's interests. Impersonating a<br>delivery person is an effective attack and an easy attack since not much acting<br>is involved. Usually the hardest part is looking the part and having all of the<br>proper credentials, papers and \"deliveries\" in order to be able to pull it off.",
      "color": "#94ebff",
      "size": 10,
      "label": "Pretexting via Delivery Person",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/414.html",
      "id": "414"
    },
    {
      "Description": "<b>CAPEC-415: Pretexting via Phone</b><br>An adversary engages in pretexting behavior, assuming some sort of trusted role,<br>and contacting the targeted individual or organization via phone to solicit<br>information from target persons, or manipulate the target into performing an<br>action that serves the adversary's interests. This is the most common social<br>engineering attack. Some of the most commonly effective approaches are to<br>impersonate a fellow employee, impersonate a computer technician or to target<br>help desk personnel.",
      "color": "#94ebff",
      "size": 10,
      "label": "Pretexting via Phone",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/415.html",
      "id": "415"
    },
    {
      "Description": "<b>CAPEC-417: Influence Perception</b><br>The adversary uses social engineering to exploit the target's perception of the<br>relationship between the adversary and themselves. This goal is to persuade the<br>target to unknowingly perform an action or divulge information that is<br>advantageous to the adversary.",
      "color": "#75aaff",
      "size": 18,
      "label": "Influence Perception",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/417.html",
      "id": "417"
    },
    {
      "Description": "<b>CAPEC-418: Influence Perception of Reciprocation</b><br>An adversary uses a social engineering techniques to produce a sense of<br>obligation in the target to perform a certain action or concede some sensitive<br>or key piece of information. Obligation has to do with actions one feels they<br>need to take due to some sort of social, legal, or moral requirement, duty,<br>contract, or promise. There are various techniques for fostering a sense of<br>obligation to reciprocate or concede during ordinary modes of communication. One<br>method is to compliment the target, and follow up the compliment with a<br>question. If performed correctly the target may volunteer a key piece of<br>information, sometimes involuntarily.",
      "color": "#94ebff",
      "size": 10,
      "label": "Influence Perception of Reciprocation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/418.html",
      "id": "418"
    },
    {
      "Description": "<b>CAPEC-42: MIME Conversion</b><br>An attacker exploits a weakness in the MIME conversion routine to cause a buffer<br>overflow and gain control over the mail server machine. The MIME system is<br>designed to allow various different information formats to be interpreted and<br>sent via e-mail. Attack points exist when data are converted to MIME compatible<br>format and back.",
      "color": "#94ebff",
      "size": 10,
      "label": "MIME Conversion",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/42.html",
      "id": "42"
    },
    {
      "Description": "<b>CAPEC-420: Influence Perception of Scarcity</b><br>The adversary leverages a perception of scarcity to persuade the target to<br>perform an action or divulge information that is advantageous to the adversary.<br>By conveying a perception of scarcity, or a situation of limited supply, the<br>adversary aims to create a sense of urgency in the context of a target's<br>decision-making process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Influence Perception of Scarcity",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/420.html",
      "id": "420"
    },
    {
      "Description": "<b>CAPEC-421: Influence Perception of Authority</b><br>An adversary uses a social engineering technique to convey a sense of authority<br>that motivates the target to reveal specific information or take specific<br>action. There are various techniques for producing a sense of authority during<br>ordinary modes of communication. One common method is impersonation. By<br>impersonating someone with a position of power within an organization, an<br>adversary may motivate the target individual to reveal some piece of sensitive<br>information or perform an action that benefits the adversary.",
      "color": "#94ebff",
      "size": 10,
      "label": "Influence Perception of Authority",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/421.html",
      "id": "421"
    },
    {
      "Description": "<b>CAPEC-422: Influence Perception of Commitment and Consistency</b><br>An adversary uses social engineering to convince the target to do minor tasks as<br>opposed to larger actions. After complying with a request, individuals are more<br>likely to agree to subsequent requests that are similar in type and required<br>effort.",
      "color": "#94ebff",
      "size": 10,
      "label": "Influence Perception of Commitment and Consistency",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/422.html",
      "id": "422"
    },
    {
      "Description": "<b>CAPEC-423: Influence Perception of Liking</b><br>The adversary influences the target's actions by building a relationship where<br>the target has a liking to the adversary. People are more likely to be<br>influenced by people of whom they are fond, so the adversary attempts to<br>ingratiate themself with the target via actions, appearance, or a combination<br>thereof.",
      "color": "#94ebff",
      "size": 10,
      "label": "Influence Perception of Liking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/423.html",
      "id": "423"
    },
    {
      "Description": "<b>CAPEC-424: Influence Perception of Consensus or Social Proof</b><br>The adversary influences the target's actions by leveraging the inherent human<br>nature to assume behavior of others is appropriate. In situations of<br>uncertainty, people tend to behave in ways they see others behaving. The<br>adversary convinces the target of adopting behavior or actions that is<br>advantageous to the adversary.",
      "color": "#94ebff",
      "size": 10,
      "label": "Influence Perception of Consensus or Social Proof",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/424.html",
      "id": "424"
    },
    {
      "Description": "<b>CAPEC-425: Target Influence via Framing</b><br>An adversary uses framing techniques to contextualize a conversation so that the<br>target is more likely to be influenced by the adversary's point of view. Framing<br>is information and experiences in life that alter the way we react to decisions<br>we must make. This type of persuasive technique exploits the way people are<br>conditioned to perceive data and its significance, while avoiding negative or<br>avoidance responses from the target. Rather than a specific technique framing is<br>a methodology of conversation that slowly encourages the target to adopt to the<br>adversary's perspective. One technique of framing is to avoid the use of the<br>word \"No\" and to contextualize responses in a manner that is positive. When<br>performed skillfully the target is much more likely to volunteer information or<br>perform actions favorable to the adversary.",
      "color": "#75aaff",
      "size": 18,
      "label": "Target Influence via Framing",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/425.html",
      "id": "425"
    },
    {
      "Description": "<b>CAPEC-426: Influence via Incentives</b><br>The adversary incites a behavior from the target by manipulating something of<br>influence. This is commonly associated with financial, social, or ideological<br>incentivization. Examples include monetary fraud, peer pressure, and preying on<br>the target's morals or ethics. The most effective incentive against one target<br>might not be as effective against another, therefore the adversary must gather<br>information about the target's vulnerability to particular incentives.",
      "color": "#75aaff",
      "size": 18,
      "label": "Influence via Incentives",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/426.html",
      "id": "426"
    },
    {
      "Description": "<b>CAPEC-427: Influence via Psychological Principles</b><br>The adversary shapes the target's actions or behavior by focusing on the ways<br>human interact and learn, leveraging such elements as cognitive and social<br>psychology. In a variety of ways, a target can be influenced to behave or<br>perform an action through capitalizing on what scholarship and research has<br>learned about how and why humans react to specific scenarios and cues.",
      "color": "#75aaff",
      "size": 18,
      "label": "Influence via Psychological Principles",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/427.html",
      "id": "427"
    },
    {
      "Description": "<b>CAPEC-428: Influence via Modes of Thinking</b><br>The adversary tailors their communication to the language and thought patterns<br>of the target thereby weakening barriers or reluctance to communication. This<br>method is a way of building rapport with a target by matching their speech<br>patterns and the primary ways or dominant senses with which they make<br>abstractions. This technique can be used to make the target more receptive to<br>sharing information because the adversary has adapted their communication forms<br>to match those of the target. When skillfully employed, the target is likely to<br>be unaware that they are being manipulated.",
      "color": "#94ebff",
      "size": 10,
      "label": "Influence via Modes of Thinking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/428.html",
      "id": "428"
    },
    {
      "Description": "<b>CAPEC-429: Target Influence via Eye Cues</b><br>The adversary gains information via non-verbal means from the target through eye<br>movements.",
      "color": "#94ebff",
      "size": 10,
      "label": "Target Influence via Eye Cues",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/429.html",
      "id": "429"
    },
    {
      "Description": "<b>CAPEC-43: Exploiting Multiple Input Interpretation Layers</b><br>An attacker supplies the target software with input data that contains sequences<br>of special characters designed to bypass input validation logic. This exploit<br>relies on the target making multiples passes over the input data and processing<br>a \"layer\" of special characters with each pass. In this manner, the attacker can<br>disguise input that would otherwise be rejected as invalid by concealing it with<br>layers of special/escape characters that are stripped off by subsequent<br>processing steps. The goal is to first discover cases where the input validation<br>layer executes before one or more parsing layers. That is, user input may go<br>through the following logic in an application: <parser1> --> <input validator><br>--> <parser2>. In such cases, the attacker will need to provide input that will<br>pass through the input validator, but after passing through parser2, will be<br>converted into something that the input validator was supposed to stop.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploiting Multiple Input Interpretation Layers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/43.html",
      "id": "43"
    },
    {
      "Description": "<b>CAPEC-433: Target Influence via The Human Buffer Overflow</b><br>An attacker utilizes a technique to insinuate commands to the subconscious mind<br>of the target via communication patterns. The human buffer overflow methodology<br>does not rely on over-stimulating the mind of the target, but rather embedding<br>messages within communication that the mind of the listener assembles at a<br>subconscious level. The human buffer-overflow method is similar to subconscious<br>programming to the extent that messages are embedded within the message.",
      "color": "#94ebff",
      "size": 10,
      "label": "Target Influence via The Human Buffer Overflow",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/433.html",
      "id": "433"
    },
    {
      "Description": "<b>CAPEC-434: Target Influence via Interview and Interrogation</b><br>",
      "color": "#94ebff",
      "size": 10,
      "label": "Target Influence via Interview and Interrogation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/434.html",
      "id": "434"
    },
    {
      "Description": "<b>CAPEC-435: Target Influence via Instant Rapport</b><br>",
      "color": "#94ebff",
      "size": 10,
      "label": "Target Influence via Instant Rapport",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/435.html",
      "id": "435"
    },
    {
      "Description": "<b>CAPEC-438: Modification During Manufacture</b><br>An attacker modifies a technology, product, or component during a stage in its<br>manufacture for the purpose of carrying out an attack against some entity<br>involved in the supply chain lifecycle. There are an almost limitless number of<br>ways an attacker can modify a technology when they are involved in its<br>manufacture, as the attacker has potential inroads to the software composition,<br>hardware design and assembly, firmware, or basic design mechanics. Additionally,<br>manufacturing of key components is often outsourced with the final product<br>assembled by the primary manufacturer. The greatest risk, however, is deliberate<br>manipulation of design specifications to produce malicious hardware or devices.<br>There are billions of transistors in a single integrated circuit and studies<br>have shown that fewer than 10 transistors are required to create malicious<br>functionality.",
      "color": "#2176ff",
      "size": 30,
      "label": "Modification During Manufacture",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/438.html",
      "id": "438"
    },
    {
      "Description": "<b>CAPEC-439: Manipulation During Distribution</b><br>An attacker undermines the integrity of a product, software, or technology at<br>some stage of the distribution channel. The core threat of modification or<br>manipulation during distribution arise from the many stages of distribution, as<br>a product may traverse multiple suppliers and integrators as the final asset is<br>delivered. Components and services provided from a manufacturer to a supplier<br>may be tampered with during integration or packaging.",
      "color": "#2176ff",
      "size": 30,
      "label": "Manipulation During Distribution",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/439.html",
      "id": "439"
    },
    {
      "Description": "<b>CAPEC-44: Overflow Binary Resource File</b><br>An attack of this type exploits a buffer overflow vulnerability in the handling<br>of binary resources. Binary resources may include music files like MP3, image<br>files like JPEG files, and any other binary file. These attacks may pass<br>unnoticed to the client machine through normal usage of files, such as a browser<br>loading a seemingly innocent JPEG file. This can allow the adversary access to<br>the execution stack and execute arbitrary code in the target process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Overflow Binary Resource File",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/44.html",
      "id": "44"
    },
    {
      "Description": "<b>CAPEC-441: Malicious Logic Insertion</b><br>An adversary installs or adds malicious logic (also known as malware) into a<br>seemingly benign component of a fielded system. This logic is often hidden from<br>the user of the system and works behind the scenes to achieve negative impacts.<br>With the proliferation of mass digital storage and inexpensive multimedia<br>devices, Bluetooth and 802.11 support, new attack vectors for spreading malware<br>are emerging for things we once thought of as innocuous greeting cards, picture<br>frames, or digital projectors. This pattern of attack focuses on systems already<br>fielded and used in operation as opposed to systems and their components that<br>are still under development and part of the supply chain.",
      "color": "#2176ff",
      "size": 30,
      "label": "Malicious Logic Insertion",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/441.html",
      "id": "441"
    },
    {
      "Description": "<b>CAPEC-442: Infected Software</b><br>An adversary adds malicious logic, often in the form of a computer virus, to<br>otherwise benign software. This logic is often hidden from the user of the<br>software and works behind the scenes to achieve negative impacts. Many times,<br>the malicious logic is inserted into empty space between legitimate code, and is<br>then called when the software is executed. This pattern of attack focuses on<br>software already fielded and used in operation as opposed to software that is<br>still under development and part of the supply chain.",
      "color": "#75aaff",
      "size": 18,
      "label": "Infected Software",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/442.html",
      "id": "442"
    },
    {
      "Description": "<b>CAPEC-443: Malicious Logic Inserted Into Product by Authorized Developer</b><br>An adversary uses their privileged position within an authorized development<br>organization to inject malicious logic into a codebase or product.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Logic Inserted Into Product by Authorized Developer",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/443.html",
      "id": "443"
    },
    {
      "Description": "<b>CAPEC-445: Malicious Logic Insertion into Product Software via Configuration Management Manipulation</b><br>An adversary exploits a configuration management system so that malicious logic<br>is inserted into a software products build, update or deployed environment. If<br>an adversary can control the elements included in a product's configuration<br>management for build they can potentially replace, modify or insert code files<br>containing malicious logic. If an adversary can control elements of a product's<br>ongoing operational configuration management baseline they can potentially force<br>clients receiving updates from the system to install insecure software when<br>receiving updates from the server.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Logic Insertion into Product Software via Configuration Management Manipulation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/445.html",
      "id": "445"
    },
    {
      "Description": "<b>CAPEC-446: Malicious Logic Insertion into Product via Inclusion of Third-Party Component</b><br>An adversary conducts supply chain attacks by the inclusion of insecure<br>third-party components into a technology, product, or code-base, possibly<br>packaging a malicious driver or component along with the product before shipping<br>it to the consumer or acquirer.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Logic Insertion into Product via Inclusion of Third-Party Component",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/446.html",
      "id": "446"
    },
    {
      "Description": "<b>CAPEC-447: Design Alteration</b><br>An adversary modifies the design of a technology, product, or component to<br>acheive a negative impact once the system is deployed. In this type of attack,<br>the goal of the adversary is to modify the design of the system, prior to<br>development starting, in such a way that the negative impact can be leveraged<br>when the system is later deployed. Design alteration attacks differ from<br>development alteration attacks in that design alteration attacks take place<br>prior to development and which then may or may not be developed by the adverary.<br>Design alteration attacks include modifying system designs to degrade system<br>performance, cause unexpected states or errors, and general design changes that<br>may lead to additional vulnerabilities. These attacks generally require insider<br>access to modify design documents, but they may also be spoofed via web<br>communications. The product is then developed and delivered to the user where<br>the negative impact can be leveraged at a later time.",
      "color": "#75aaff",
      "size": 18,
      "label": "Design Alteration",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/447.html",
      "id": "447"
    },
    {
      "Description": "<b>CAPEC-448: Embed Virus into DLL</b><br>An adversary tampers with a DLL and embeds a computer virus into gaps between<br>legitimate machine instructions. These gaps may be the result of compiler<br>optimizations that pad memory blocks for performance gains. The embedded virus<br>then attempts to infect any machine which interfaces with the product, and<br>possibly steal private data or eavesdrop.",
      "color": "#94ebff",
      "size": 10,
      "label": "Embed Virus into DLL",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/448.html",
      "id": "448"
    },
    {
      "Description": "<b>CAPEC-45: Buffer Overflow via Symbolic Links</b><br>This type of attack leverages the use of symbolic links to cause buffer<br>overflows. An adversary can try to create or manipulate a symbolic link file<br>such that its contents result in out of bounds data. When the target software<br>processes the symbolic link file, it could potentially overflow internal buffers<br>with insufficient bounds checking.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow via Symbolic Links",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/45.html",
      "id": "45"
    },
    {
      "Description": "<b>CAPEC-452: Infected Hardware</b><br>An adversary inserts malicious logic into hardware, typically in the form of a<br>computer virus or rootkit. This logic is often hidden from the user of the<br>hardware and works behind the scenes to achieve negative impacts. This pattern<br>of attack focuses on hardware already fielded and used in operation as opposed<br>to hardware that is still under development and part of the supply chain.",
      "color": "#75aaff",
      "size": 18,
      "label": "Infected Hardware",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/452.html",
      "id": "452"
    },
    {
      "Description": "<b>CAPEC-456: Infected Memory</b><br>An adversary inserts malicious logic into memory enabling them to achieve a<br>negative impact. This logic is often hidden from the user of the system and<br>works behind the scenes to achieve negative impacts. This pattern of attack<br>focuses on systems already fielded and used in operation as opposed to systems<br>that are still under development and part of the supply chain.",
      "color": "#75aaff",
      "size": 18,
      "label": "Infected Memory",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/456.html",
      "id": "456"
    },
    {
      "Description": "<b>CAPEC-457: USB Memory Attacks</b><br>An adversary loads malicious code onto a USB memory stick in order to infect any<br>system which the device is plugged in to. USB drives present a significant<br>security risk for business and government agencies. Given the ability to<br>integrate wireless functionality into a USB stick, it is possible to design<br>malware that not only steals confidential data, but sniffs the network, or<br>monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless<br>connection. Also, viruses can be transmitted via the USB interface without the<br>specific use of a memory stick. The attacks from USB devices are often of such<br>sophistication that experts conclude they are not the work of single<br>individuals, but suggest state sponsorship. These attacks can be performed by an<br>adversary with direct access to a target system or can be executed via means<br>such as USB Drop Attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "USB Memory Attacks",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/457.html",
      "id": "457"
    },
    {
      "Description": "<b>CAPEC-458: Flash Memory Attacks</b><br>An adversary inserts malicious logic into a product or technology via flashing<br>the on-board memory with a code-base that contains malicious logic. Various<br>attacks exist against the integrity of flash memory, the most direct being<br>rootkits coded into the BIOS or chipset of a device.",
      "color": "#94ebff",
      "size": 10,
      "label": "Flash Memory Attacks",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/458.html",
      "id": "458"
    },
    {
      "Description": "<b>CAPEC-459: Creating a Rogue Certification Authority Certificate</b><br>An adversary exploits a weakness resulting from using a hashing algorithm with<br>weak collision resistance to generate certificate signing requests (CSR) that<br>contain collision blocks in their \"to be signed\" parts. The adversary submits<br>one CSR to be signed by a trusted certificate authority then uses the signed<br>blob to make a second certificate appear signed by said certificate authority.<br>Due to the hash collision, both certificates, though different, hash to the same<br>value and so the signed blob works just as well in the second certificate. The<br>net effect is that the adversary's second X.509 certificate, which the<br>Certification Authority has never seen, is now signed and validated by that<br>Certification Authority.",
      "color": "#94ebff",
      "size": 10,
      "label": "Creating a Rogue Certification Authority Certificate",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/459.html",
      "id": "459"
    },
    {
      "Description": "<b>CAPEC-473: Signature Spoof</b><br>An attacker generates a message or datablock that causes the recipient to<br>believe that the message or datablock was generated and cryptographically signed<br>by an authoritative or reputable source, misleading a victim or victim operating<br>system into performing malicious actions.",
      "color": "#75aaff",
      "size": 18,
      "label": "Signature Spoof",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/473.html",
      "id": "473"
    },
    {
      "Description": "<b>CAPEC-46: Overflow Variables and Tags</b><br>This type of attack leverages the use of tags or variables from a formatted<br>configuration data to cause buffer overflow. The adversary crafts a malicious<br>HTML page or configuration file that includes oversized strings, thus causing an<br>overflow.",
      "color": "#94ebff",
      "size": 10,
      "label": "Overflow Variables and Tags",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/46.html",
      "id": "46"
    },
    {
      "Description": "<b>CAPEC-460: HTTP Parameter Pollution (HPP)</b><br>An adversary adds duplicate HTTP GET/POST parameters by injecting query string<br>delimiters. Via HPP it may be possible to override existing hardcoded HTTP<br>parameters, modify the application behaviors, access and, potentially exploit,<br>uncontrollable variables, and bypass input validation checkpoints and WAF rules.",
      "color": "#94ebff",
      "size": 10,
      "label": "HTTP Parameter Pollution (HPP)",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/460.html",
      "id": "460"
    },
    {
      "Description": "<b>CAPEC-461: Web Services API Signature Forgery Leveraging Hash Function Extension Weakness</b><br>An adversary utilizes a hash function extension/padding weakness, to modify the<br>parameters passed to the web service requesting authentication by generating<br>their own call in order to generate a legitimate signature hash (as described in<br>the notes), without knowledge of the secret token sometimes provided by the web<br>service.",
      "color": "#75aaff",
      "size": 18,
      "label": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/461.html",
      "id": "461"
    },
    {
      "Description": "<b>CAPEC-462: Cross-Domain Search Timing</b><br>An attacker initiates cross domain HTTP / GET requests and times the server<br>responses. The timing of these responses may leak important information on what<br>is happening on the server. Browser's same origin policy prevents the attacker<br>from directly reading the server responses (in the absence of any other<br>weaknesses), but does not prevent the attacker from timing the responses to<br>requests that the attacker issued cross domain.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cross-Domain Search Timing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/462.html",
      "id": "462"
    },
    {
      "Description": "<b>CAPEC-463: Padding Oracle Crypto Attack</b><br>An adversary is able to efficiently decrypt data without knowing the decryption<br>key if a target system leaks data on whether or not a padding error happened<br>while decrypting the ciphertext. A target system that leaks this type of<br>information becomes the padding oracle and an adversary is able to make use of<br>that oracle to efficiently decrypt data without knowing the decryption key by<br>issuing on average 128*b calls to the padding oracle (where b is the number of<br>bytes in the ciphertext block). In addition to performing decryption, an<br>adversary is also able to produce valid ciphertexts (i.e., perform encryption)<br>by using the padding oracle, all without knowing the encryption key.",
      "color": "#94ebff",
      "size": 10,
      "label": "Padding Oracle Crypto Attack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/463.html",
      "id": "463"
    },
    {
      "Description": "<b>CAPEC-97: Cryptanalysis</b><br>Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and<br>using these weaknesses to decipher the ciphertext without knowing the secret key<br>(instance deduction). Sometimes the weakness is not in the cryptographic<br>algorithm itself, but rather in how it is applied that makes cryptanalysis<br>successful. An attacker may have other goals as well, such as: Total Break<br>(finding the secret key), Global Deduction (finding a functionally equivalent<br>algorithm for encryption and decryption that does not require knowledge of the<br>secret key), Information Deduction (gaining some information about plaintexts or<br>ciphertexts that was not previously known) and Distinguishing Algorithm (the<br>attacker has the ability to distinguish the output of the encryption<br>(ciphertext) from a random permutation of bits).",
      "color": "#75aaff",
      "size": 18,
      "label": "Cryptanalysis",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/97.html",
      "id": "97"
    },
    {
      "Description": "<b>CAPEC-464: Evercookie</b><br>An attacker creates a very persistent cookie that stays present even after the<br>user thinks it has been removed. The cookie is stored on the victim's machine in<br>over ten places. When the victim clears the cookie cache via traditional means<br>inside the browser, that operation removes the cookie from certain places but<br>not others. The malicious code then replicates the cookie from all of the places<br>where it was not deleted to all of the possible storage locations once again. So<br>the victim again has the cookie in all of the original storage locations. In<br>other words, failure to delete the cookie in even one location will result in<br>the cookie's resurrection everywhere. The evercookie will also persist across<br>different browsers because certain stores (e.g., Local Shared Objects) are<br>shared between different browsers.",
      "color": "#75aaff",
      "size": 18,
      "label": "Evercookie",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/464.html",
      "id": "464"
    },
    {
      "Description": "<b>CAPEC-465: Transparent Proxy Abuse</b><br>A transparent proxy serves as an intermediate between the client and the<br>internet at large. It intercepts all requests originating from the client and<br>forwards them to the correct location. The proxy also intercepts all responses<br>to the client and forwards these to the client. All of this is done in a manner<br>transparent to the client.",
      "color": "#75aaff",
      "size": 18,
      "label": "Transparent Proxy Abuse",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/465.html",
      "id": "465"
    },
    {
      "Description": "<b>CAPEC-466: Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy</b><br>An attacker leverages an adversary in the middle attack (CAPEC-94) in order to<br>bypass the same origin policy protection in the victim's browser. This active<br>adversary in the middle attack could be launched, for instance, when the victim<br>is connected to a public WIFI hot spot. An attacker is able to intercept<br>requests and responses between the victim's browser and some non-sensitive<br>website that does not use TLS.",
      "color": "#75aaff",
      "size": 18,
      "label": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/466.html",
      "id": "466"
    },
    {
      "Description": "<b>CAPEC-467: Cross Site Identification</b><br>An attacker harvests identifying information about a victim via an active<br>session that the victim's browser has with a social networking site. A victim<br>may have the social networking site open in one tab or perhaps is simply using<br>the \"remember me\" feature to keep their session with the social networking site<br>active. An attacker induces a payload to execute in the victim's browser that<br>transparently to the victim initiates a request to the social networking site<br>(e.g., via available social network site APIs) to retrieve identifying<br>information about a victim. While some of this information may be public, the<br>attacker is able to harvest this information in context and may use it for<br>further attacks on the user (e.g., spear phishing).",
      "color": "#94ebff",
      "size": 10,
      "label": "Cross Site Identification",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/467.html",
      "id": "467"
    },
    {
      "Description": "<b>CAPEC-62: Cross Site Request Forgery</b><br>An attacker crafts malicious web links and distributes them (via web pages,<br>email, etc.), typically in a targeted manner, hoping to induce users to click on<br>the link and execute the malicious action against some third-party application.<br>If successful, the action embedded in the malicious link will be processed and<br>accepted by the targeted application with the users' privilege level. This type<br>of attack leverages the persistence and implicit trust placed in user session<br>cookies by many web applications today. In such an architecture, once the user<br>authenticates to an application and a session cookie is created on the user's<br>system, all following transactions for that session are authenticated using that<br>cookie including potential actions initiated by an attacker and simply \"riding\"<br>the existing session cookie.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cross Site Request Forgery",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/62.html",
      "id": "62"
    },
    {
      "Description": "<b>CAPEC-468: Generic Cross-Browser Cross-Domain Theft</b><br>An attacker makes use of Cascading Style Sheets (CSS) injection to steal data<br>cross domain from the victim's browser. The attack works by abusing the<br>standards relating to loading of CSS: 1. Send cookies on any load of CSS<br>(including cross-domain) 2. When parsing returned CSS ignore all data that does<br>not make sense before a valid CSS descriptor is found by the CSS parser.",
      "color": "#75aaff",
      "size": 18,
      "label": "Generic Cross-Browser Cross-Domain Theft",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/468.html",
      "id": "468"
    },
    {
      "Description": "<b>CAPEC-469: HTTP DoS</b><br>An attacker performs flooding at the HTTP level to bring down only a particular<br>web application rather than anything listening on a TCP/IP connection. This<br>denial of service attack requires substantially fewer packets to be sent which<br>makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea<br>is to keep the HTTP session alive indefinitely and then repeat that hundreds of<br>times. This attack targets resource depletion weaknesses in web server software.<br>The web server will wait to attacker's responses on the initiated HTTP sessions<br>while the connection threads are being exhausted.",
      "color": "#75aaff",
      "size": 18,
      "label": "HTTP DoS",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/469.html",
      "id": "469"
    },
    {
      "Description": "<b>CAPEC-47: Buffer Overflow via Parameter Expansion</b><br>In this attack, the target software is given input that the adversary knows will<br>be modified and expanded in size during processing. This attack relies on the<br>target software failing to anticipate that the expanded data may exceed some<br>internal limit, thereby creating a buffer overflow.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow via Parameter Expansion",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/47.html",
      "id": "47"
    },
    {
      "Description": "<b>CAPEC-470: Expanding Control over the Operating System from the Database</b><br>An attacker is able to leverage access gained to the database to read / write<br>data to the file system, compromise the operating system, create a tunnel for<br>accessing the host machine, and use this access to potentially attack other<br>machines on the same network as the database machine. Traditionally SQL<br>injections attacks are viewed as a way to gain unauthorized read access to the<br>data stored in the database, modify the data in the database, delete the data,<br>etc. However, almost every data base management system (DBMS) system includes<br>facilities that if compromised allow an attacker complete access to the file<br>system, operating system, and full access to the host running the database. The<br>attacker can then use this privileged access to launch subsequent attacks. These<br>facilities include dropping into a command shell, creating user defined<br>functions that can call system level libraries present on the host machine,<br>stored procedures, etc.",
      "color": "#94ebff",
      "size": 10,
      "label": "Expanding Control over the Operating System from the Database",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/470.html",
      "id": "470"
    },
    {
      "Description": "<b>CAPEC-471: Search Order Hijacking</b><br>An adversary exploits a weakness in an application's specification of external<br>libraries to exploit the functionality of the loader where the process loading<br>the library searches first in the same directory in which the process binary<br>resides and then in other directories. Exploitation of this preferential search<br>order can allow an attacker to make the loading process load the adversary's<br>rogue library rather than the legitimate library. This attack can be leveraged<br>with many different libraries and with many different loading processes. No<br>forensic trails are left in the system's registry or file system that an<br>incorrect library had been loaded.",
      "color": "#94ebff",
      "size": 10,
      "label": "Search Order Hijacking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/471.html",
      "id": "471"
    },
    {
      "Description": "<b>CAPEC-472: Browser Fingerprinting</b><br>An attacker carefully crafts small snippets of Java Script to efficiently detect<br>the type of browser the potential victim is using. Many web-based attacks need<br>prior knowledge of the web browser including the version of browser to ensure<br>successful exploitation of a vulnerability. Having this knowledge allows an<br>attacker to target the victim with attacks that specifically exploit known or<br>zero day weaknesses in the type and version of the browser used by the victim.<br>Automating this process via Java Script as a part of the same delivery system<br>used to exploit the browser is considered more efficient as the attacker can<br>supply a browser fingerprinting method and integrate it with exploit code, all<br>contained in Java Script and in response to the same web page request by the<br>browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "Browser Fingerprinting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/472.html",
      "id": "472"
    },
    {
      "Description": "<b>CAPEC-474: Signature Spoofing by Key Theft</b><br>An attacker obtains an authoritative or reputable signer's private signature key<br>by theft and then uses this key to forge signatures from the original signer to<br>mislead a victim into performing actions that benefit the attacker.",
      "color": "#94ebff",
      "size": 10,
      "label": "Signature Spoofing by Key Theft",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/474.html",
      "id": "474"
    },
    {
      "Description": "<b>CAPEC-475: Signature Spoofing by Improper Validation</b><br>An adversary exploits a cryptographic weakness in the signature verification<br>algorithm implementation to generate a valid signature without knowing the key.",
      "color": "#94ebff",
      "size": 10,
      "label": "Signature Spoofing by Improper Validation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/475.html",
      "id": "475"
    },
    {
      "Description": "<b>CAPEC-476: Signature Spoofing by Misrepresentation</b><br>An attacker exploits a weakness in the parsing or display code of the recipient<br>software to generate a data blob containing a supposedly valid signature, but<br>the signer's identity is falsely represented, which can lead to the attacker<br>manipulating the recipient software or its victim user to perform compromising<br>actions.",
      "color": "#94ebff",
      "size": 10,
      "label": "Signature Spoofing by Misrepresentation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/476.html",
      "id": "476"
    },
    {
      "Description": "<b>CAPEC-477: Signature Spoofing by Mixing Signed and Unsigned Content</b><br>An attacker exploits the underlying complexity of a data structure that allows<br>for both signed and unsigned content, to cause unsigned data to be processed as<br>though it were signed data.",
      "color": "#94ebff",
      "size": 10,
      "label": "Signature Spoofing by Mixing Signed and Unsigned Content",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/477.html",
      "id": "477"
    },
    {
      "Description": "<b>CAPEC-478: Modification of Windows Service Configuration</b><br>An adversary exploits a weakness in access control to modify the execution<br>parameters of a Windows service. The goal of this attack is to execute a<br>malicious binary in place of an existing service.",
      "color": "#94ebff",
      "size": 10,
      "label": "Modification of Windows Service Configuration",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/478.html",
      "id": "478"
    },
    {
      "Description": "<b>CAPEC-479: Malicious Root Certificate</b><br>An adversary exploits a weakness in authorization and installs a new root<br>certificate on a compromised system. Certificates are commonly used for<br>establishing secure TLS/SSL communications within a web browser. When a user<br>attempts to browse a website that presents a certificate that is not trusted an<br>error message will be displayed to warn the user of the security risk. Depending<br>on the security settings, the browser may not allow the user to establish a<br>connection to the website. Adversaries have used this technique to avoid<br>security warnings prompting users when compromised systems connect over HTTPS to<br>adversary controlled web servers that spoof legitimate websites in order to<br>collect login credentials.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Root Certificate",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/479.html",
      "id": "479"
    },
    {
      "Description": "<b>CAPEC-48: Passing Local Filenames to Functions That Expect a URL</b><br>This attack relies on client side code to access local files and resources<br>instead of URLs. When the client browser is expecting a URL string, but instead<br>receives a request for a local file, that execution is likely to occur in the<br>browser process space with the browser's authority to local files. The attacker<br>can send the results of this request to the local files out to a site that they<br>control. This attack may be used to steal sensitive authentication data (either<br>local or remote), or to gain system profile information to launch further<br>attacks.",
      "color": "#75aaff",
      "size": 18,
      "label": "Passing Local Filenames to Functions That Expect a URL",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/48.html",
      "id": "48"
    },
    {
      "Description": "<b>CAPEC-481: Contradictory Destinations in Traffic Routing Schemes</b><br>Adversaries can provide contradictory destinations when sending messages.<br>Traffic is routed in networks using the domain names in various headers<br>available at different levels of the OSI model. In a Content Delivery Network<br>(CDN) multiple domains might be available, and if there are contradictory domain<br>names provided it is possible to route traffic to an inappropriate destination.<br>The technique, called Domain Fronting, involves using different domain names in<br>the SNI field of the TLS header and the Host field of the HTTP header. An<br>alternative technique, called Domainless Fronting, is similar, but the SNI field<br>is left blank.",
      "color": "#75aaff",
      "size": 18,
      "label": "Contradictory Destinations in Traffic Routing Schemes",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/481.html",
      "id": "481"
    },
    {
      "Description": "<b>CAPEC-482: TCP Flood</b><br>An adversary may execute a flooding attack using the TCP protocol with the<br>intent to deny legitimate users access to a service. These attacks exploit the<br>weakness within the TCP protocol where there is some state information for the<br>connection the server needs to maintain. This often involves the use of TCP SYN<br>messages.",
      "color": "#75aaff",
      "size": 18,
      "label": "TCP Flood",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/482.html",
      "id": "482"
    },
    {
      "Description": "<b>CAPEC-485: Signature Spoofing by Key Recreation</b><br>An attacker obtains an authoritative or reputable signer's private signature key<br>by exploiting a cryptographic weakness in the signature algorithm or<br>pseudorandom number generation and then uses this key to forge signatures from<br>the original signer to mislead a victim into performing actions that benefit the<br>attacker.",
      "color": "#94ebff",
      "size": 10,
      "label": "Signature Spoofing by Key Recreation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/485.html",
      "id": "485"
    },
    {
      "Description": "<b>CAPEC-486: UDP Flood</b><br>An adversary may execute a flooding attack using the UDP protocol with the<br>intent to deny legitimate users access to a service by consuming the available<br>network bandwidth. Additionally, firewalls often open a port for each UDP<br>connection destined for a service with an open UDP port, meaning the firewalls<br>in essence save the connection state thus the high packet nature of a UDP flood<br>can also overwhelm resources allocated to the firewall. UDP attacks can also<br>target services like DNS or VoIP which utilize these protocols. Additionally,<br>due to the session-less nature of the UDP protocol, the source of a packet is<br>easily spoofed making it difficult to find the source of the attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "UDP Flood",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/486.html",
      "id": "486"
    },
    {
      "Description": "<b>CAPEC-487: ICMP Flood</b><br>An adversary may execute a flooding attack using the ICMP protocol with the<br>intent to deny legitimate users access to a service by consuming the available<br>network bandwidth. A typical attack involves a victim server receiving ICMP<br>packets at a high rate from a wide range of source addresses. Additionally, due<br>to the session-less nature of the ICMP protocol, the source of a packet is<br>easily spoofed making it difficult to find the source of the attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "ICMP Flood",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/487.html",
      "id": "487"
    },
    {
      "Description": "<b>CAPEC-488: HTTP Flood</b><br>An adversary may execute a flooding attack using the HTTP protocol with the<br>intent to deny legitimate users access to a service by consuming resources at<br>the application layer such as web services and their infrastructure. These<br>attacks use legitimate session-based HTTP GET requests designed to consume large<br>amounts of a server's resources. Since these are legitimate sessions this attack<br>is very difficult to detect.",
      "color": "#75aaff",
      "size": 18,
      "label": "HTTP Flood",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/488.html",
      "id": "488"
    },
    {
      "Description": "<b>CAPEC-489: SSL Flood</b><br>An adversary may execute a flooding attack using the SSL protocol with the<br>intent to deny legitimate users access to a service by consuming all the<br>available resources on the server side. These attacks take advantage of the<br>asymmetric relationship between the processing power used by the client and the<br>processing power used by the server to create a secure connection. In this<br>manner the attacker can make a large number of HTTPS requests on a low<br>provisioned machine to tie up a disproportionately large number of resources on<br>the server. The clients then continue to keep renegotiating the SSL connection.<br>When multiplied by a large number of attacking machines, this attack can result<br>in a crash or loss of service to legitimate users.",
      "color": "#75aaff",
      "size": 18,
      "label": "SSL Flood",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/489.html",
      "id": "489"
    },
    {
      "Description": "<b>CAPEC-490: Amplification</b><br>An adversary may execute an amplification where the size of a response is far<br>greater than that of the request that generates it. The goal of this attack is<br>to use a relatively few resources to create a large amount of traffic against a<br>target server. To execute this attack, an adversary send a request to a 3rd<br>party service, spoofing the source address to be that of the target server. The<br>larger response that is generated by the 3rd party service is then sent to the<br>target server. By sending a large number of initial requests, the adversary can<br>generate a tremendous amount of traffic directed at the target. The greater the<br>discrepancy in size between the initial request and the final payload delivered<br>to the target increased the effectiveness of this attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Amplification",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/490.html",
      "id": "490"
    },
    {
      "Description": "<b>CAPEC-491: Quadratic Data Expansion</b><br>An adversary exploits macro-like substitution to cause a denial of service<br>situation due to excessive memory being allocated to fully expand the data. The<br>result of this denial of service could cause the application to freeze or crash.<br>This involves defining a very large entity and using it multiple times in a<br>single entity substitution. CAPEC-197 is a similar attack pattern, but it is<br>easier to discover and defend against. This attack pattern does not perform<br>multi-level substitution and therefore does not obviously appear to consume<br>extensive resources.",
      "color": "#94ebff",
      "size": 10,
      "label": "Quadratic Data Expansion",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/491.html",
      "id": "491"
    },
    {
      "Description": "<b>CAPEC-492: Regular Expression Exponential Blowup</b><br>An adversary may execute an attack on a program that uses a poor Regular<br>Expression(Regex) implementation by choosing input that results in an extreme<br>situation for the Regex. A typical extreme situation operates at exponential<br>time compared to the input size. This is due to most implementations using a<br>Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex<br>algorithm since NFA allows backtracking and thus more complex regular<br>expressions.",
      "color": "#75aaff",
      "size": 18,
      "label": "Regular Expression Exponential Blowup",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/492.html",
      "id": "492"
    },
    {
      "Description": "<b>CAPEC-493: SOAP Array Blowup</b><br>An adversary may execute an attack on a web service that uses SOAP messages in<br>communication. By sending a very large SOAP array declaration to the web<br>service, the attacker forces the web service to allocate space for the array<br>elements before they are parsed by the XML parser. The attacker message is<br>typically small in size containing a large array declaration of say 1,000,000<br>elements and a couple of array elements. This attack targets exhaustion of the<br>memory resources of the web service.",
      "color": "#75aaff",
      "size": 18,
      "label": "SOAP Array Blowup",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/493.html",
      "id": "493"
    },
    {
      "Description": "<b>CAPEC-494: TCP Fragmentation</b><br>An adversary may execute a TCP Fragmentation attack against a target with the<br>intention of avoiding filtering rules of network controls, by attempting to<br>fragment the TCP packet such that the headers flag field is pushed into the<br>second fragment which typically is not filtered.",
      "color": "#75aaff",
      "size": 18,
      "label": "TCP Fragmentation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/494.html",
      "id": "494"
    },
    {
      "Description": "<b>CAPEC-495: UDP Fragmentation</b><br>An attacker may execute a UDP Fragmentation attack against a target server in an<br>attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs<br>when an IP datagram is larger than the MTU of the route the datagram has to<br>traverse. Typically the attacker will use large UDP packets over 1500 bytes of<br>data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a<br>variation on a typical UDP flood but it enables more network bandwidth to be<br>consumed with fewer packets. Additionally it has the potential to consume server<br>CPU resources and fill memory buffers associated with the processing and<br>reassembling of fragmented packets.",
      "color": "#75aaff",
      "size": 18,
      "label": "UDP Fragmentation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/495.html",
      "id": "495"
    },
    {
      "Description": "<b>CAPEC-496: ICMP Fragmentation</b><br>An attacker may execute a ICMP Fragmentation attack against a target with the<br>intention of consuming resources or causing a crash. The attacker crafts a large<br>number of identical fragmented IP packets containing a portion of a fragmented<br>ICMP message. The attacker these sends these messages to a target host which<br>causes the host to become non-responsive. Another vector may be sending a<br>fragmented ICMP message to a target host with incorrect sizes in the header<br>which causes the host to hang.",
      "color": "#75aaff",
      "size": 18,
      "label": "ICMP Fragmentation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/496.html",
      "id": "496"
    },
    {
      "Description": "<b>CAPEC-498: Probe iOS Screenshots</b><br>An adversary examines screenshot images created by iOS in an attempt to obtain<br>sensitive information. This attack targets temporary screenshots created by the<br>underlying OS while the application remains open in the background.",
      "color": "#94ebff",
      "size": 10,
      "label": "Probe iOS Screenshots",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/498.html",
      "id": "498"
    },
    {
      "Description": "<b>CAPEC-545: Pull Data from System Resources</b><br>An adversary who is authorized or has the ability to search known system<br>resources, does so with the intention of gathering useful information. System<br>resources include files, memory, and other aspects of the target system. In this<br>pattern of attack, the adversary does not necessarily know what they are going<br>to find when they start pulling data. This is different than CAPEC-150 where the<br>adversary knows what they are looking for due to the common location.",
      "color": "#75aaff",
      "size": 18,
      "label": "Pull Data from System Resources",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/545.html",
      "id": "545"
    },
    {
      "Description": "<b>CAPEC-499: Android Intent Intercept</b><br>An adversary, through a previously installed malicious application, intercepts<br>messages from a trusted Android-based application in an attempt to achieve a<br>variety of different objectives including denial of service, information<br>disclosure, and data injection. An implicit intent sent from a trusted<br>application can be received by any application that has declared an appropriate<br>intent filter. If the intent is not protected by a permission that the malicious<br>application lacks, then the attacker can gain access to the data contained<br>within the intent. Further, the intent can be either blocked from reaching the<br>intended destination, or modified and potentially forwarded along.",
      "color": "#75aaff",
      "size": 18,
      "label": "Android Intent Intercept",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/499.html",
      "id": "499"
    },
    {
      "Description": "<b>CAPEC-5: Blue Boxing</b><br>This type of attack against older telephone switches and trunks has been around<br>for decades. A tone is sent by an adversary to impersonate a supervisor signal<br>which has the effect of rerouting or usurping command of the line. While the US<br>infrastructure proper may not contain widespread vulnerabilities to this type of<br>attack, many companies are connected globally through call centers and business<br>process outsourcing. These international systems may be operated in countries<br>which have not upgraded Telco infrastructure and so are vulnerable to Blue<br>boxing. Blue boxing is a result of failure on the part of the system to enforce<br>strong authorization for administrative functions. While the infrastructure is<br>different than standard current applications like web applications, there are<br>historical lessons to be learned to upgrade the access control for<br>administrative functions. This attack pattern is included in CAPEC for<br>historical purposes.",
      "color": "#94ebff",
      "size": 10,
      "label": "Blue Boxing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/5.html",
      "id": "5"
    },
    {
      "Description": "<b>CAPEC-50: Password Recovery Exploitation</b><br>An attacker may take advantage of the application feature to help users recover<br>their forgotten passwords in order to gain access into the system with the same<br>privileges as the original user. Generally password recovery schemes tend to be<br>weak and insecure.",
      "color": "#75aaff",
      "size": 18,
      "label": "Password Recovery Exploitation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/50.html",
      "id": "50"
    },
    {
      "Description": "<b>CAPEC-500: WebView Injection</b><br>An adversary, through a previously installed malicious application, injects code<br>into the context of a web page displayed by a WebView component. Through the<br>injected code, an adversary is able to manipulate the DOM tree and cookies of<br>the page, expose sensitive information, and can launch attacks against the web<br>application from within the web page.",
      "color": "#94ebff",
      "size": 10,
      "label": "WebView Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/500.html",
      "id": "500"
    },
    {
      "Description": "<b>CAPEC-501: Android Activity Hijack</b><br>An adversary intercepts an implicit intent sent to launch a Android-based<br>trusted activity and instead launches a counterfeit activity in its place. The<br>malicious activity is then used to mimic the trusted activity's user interface<br>and prompt the target to enter sensitive data as if they were interacting with<br>the trusted activity.",
      "color": "#94ebff",
      "size": 10,
      "label": "Android Activity Hijack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/501.html",
      "id": "501"
    },
    {
      "Description": "<b>CAPEC-502: Intent Spoof</b><br>An adversary, through a previously installed malicious application, issues an<br>intent directed toward a specific trusted application's component in an attempt<br>to achieve a variety of different objectives including modification of data,<br>information disclosure, and data injection. Components that have been<br>unintentionally exported and made public are subject to this type of an attack.<br>If the component trusts the intent's action without verififcation, then the<br>target application performs the functionality at the adversary's request,<br>helping the adversary achieve the desired negative technical impact.",
      "color": "#75aaff",
      "size": 18,
      "label": "Intent Spoof",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/502.html",
      "id": "502"
    },
    {
      "Description": "<b>CAPEC-503: WebView Exposure</b><br>An adversary, through a malicious web page, accesses application specific<br>functionality by leveraging interfaces registered through WebView's<br>addJavascriptInterface API. Once an interface is registered to WebView through<br>addJavascriptInterface, it becomes global and all pages loaded in the WebView<br>can call this interface.",
      "color": "#75aaff",
      "size": 18,
      "label": "WebView Exposure",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/503.html",
      "id": "503"
    },
    {
      "Description": "<b>CAPEC-504: Task Impersonation</b><br>An adversary, through a previously installed malicious application, impersonates<br>an expected or routine task in an attempt to steal sensitive information or<br>leverage a user's privileges.",
      "color": "#75aaff",
      "size": 18,
      "label": "Task Impersonation",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/504.html",
      "id": "504"
    },
    {
      "Description": "<b>CAPEC-505: Scheme Squatting</b><br>An adversary, through a previously installed malicious application, registers<br>for a URL scheme intended for a target application that has not been installed.<br>Thereafter, messages intended for the target application are handled by the<br>malicious application. Upon receiving a message, the malicious application<br>displays a screen that mimics the target application, thereby convincing the<br>user to enter sensitive information. This type of attack is most often used to<br>obtain sensitive information (e.g., credentials) from the user as they think<br>that they are interacting with the intended target application.",
      "color": "#94ebff",
      "size": 10,
      "label": "Scheme Squatting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/505.html",
      "id": "505"
    },
    {
      "Description": "<b>CAPEC-616: Establish Rogue Location</b><br>An adversary provides a malicious version of a resource at a location that is<br>similar to the expected location of a legitimate resource. After establishing<br>the rogue location, the adversary waits for a victim to visit the location and<br>access the malicious resource.",
      "color": "#75aaff",
      "size": 18,
      "label": "Establish Rogue Location",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/616.html",
      "id": "616"
    },
    {
      "Description": "<b>CAPEC-506: Tapjacking</b><br>An adversary, through a previously installed malicious application, displays an<br>interface that misleads the user and convinces them to tap on an attacker<br>desired location on the screen. This is often accomplished by overlaying one<br>screen on top of another while giving the appearance of a single interface.<br>There are two main techniques used to accomplish this. The first is to leverage<br>transparent properties that allow taps on the screen to pass through the visible<br>application to an application running in the background. The second is to<br>strategically place a small object (e.g., a button or text field) on top of the<br>visible screen and make it appear to be a part of the underlying application. In<br>both cases, the user is convinced to tap on the screen but does not realize the<br>application that they are interacting with.",
      "color": "#75aaff",
      "size": 18,
      "label": "Tapjacking",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/506.html",
      "id": "506"
    },
    {
      "Description": "<b>CAPEC-507: Physical Theft</b><br>An adversary gains physical access to a system or device through theft of the<br>item. Possession of a system or device enables a number of unique attacks to be<br>executed and often provides the adversary with an extended timeframe for which<br>to perform an attack. Most protections put in place to secure sensitive<br>information can be defeated when an adversary has physical access and enough<br>time.",
      "color": "#2176ff",
      "size": 30,
      "label": "Physical Theft",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/507.html",
      "id": "507"
    },
    {
      "Description": "<b>CAPEC-508: Shoulder Surfing</b><br>In a shoulder surfing attack, an adversary observes an unaware individual's<br>keystrokes, screen content, or conversations with the goal of obtaining<br>sensitive information. One motive for this attack is to obtain sensitive<br>information about the target for financial, personal, political, or other gains.<br>From an insider threat perspective, an additional motive could be to obtain<br>system/application credentials or cryptographic keys. Shoulder surfing attacks<br>are accomplished by observing the content \"over the victim's shoulder\", as<br>implied by the name of this attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "Shoulder Surfing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/508.html",
      "id": "508"
    },
    {
      "Description": "<b>CAPEC-651: Eavesdropping</b><br>An adversary intercepts a form of communication (e.g. text, audio, video) by way<br>of software (e.g., microphone and audio recording application), hardware (e.g.,<br>recording equipment), or physical means (e.g., physical proximity). The goal of<br>eavesdropping is typically to gain unauthorized access to sensitive information<br>about the target for financial, personal, political, or other gains.<br>Eavesdropping is different from a sniffing attack as it does not take place on a<br>network-based communication channel (e.g., IP traffic). Instead, it entails<br>listening in on the raw audio source of a conversation between two or more<br>parties.",
      "color": "#75aaff",
      "size": 18,
      "label": "Eavesdropping",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/651.html",
      "id": "651"
    },
    {
      "Description": "<b>CAPEC-509: Kerberoasting</b><br>Through the exploitation of how service accounts leverage Kerberos<br>authentication with Service Principal Names (SPNs), the adversary obtains and<br>subsequently cracks the hashed credentials of a service account target to<br>exploit its privileges. The Kerberos authentication protocol centers around a<br>ticketing system which is used to request/grant access to services and to then<br>access the requested services. As an authenticated user, the adversary may<br>request Active Directory and obtain a service ticket with portions encrypted via<br>RC4 with the private key of the authenticated account. By extracting the local<br>ticket and saving it disk, the adversary can brute force the hashed value to<br>reveal the target account credentials.",
      "color": "#94ebff",
      "size": 10,
      "label": "Kerberoasting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/509.html",
      "id": "509"
    },
    {
      "Description": "<b>CAPEC-652: Use of Known Kerberos Credentials</b><br>An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials<br>(e.g. Kerberos service account userID/password or Kerberos Tickets) with the<br>goal of achieving authenticated access to additional systems, applications, or<br>services within the domain.",
      "color": "#75aaff",
      "size": 18,
      "label": "Use of Known Kerberos Credentials",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/652.html",
      "id": "652"
    },
    {
      "Description": "<b>CAPEC-51: Poison Web Service Registry</b><br>SOA and Web Services often use a registry to perform look up, get schema<br>information, and metadata about services. A poisoned registry can redirect<br>(think phishing for servers) the service requester to a malicious service<br>provider, provide incorrect information in schema or metadata, and delete<br>information about service provider interfaces.",
      "color": "#94ebff",
      "size": 10,
      "label": "Poison Web Service Registry",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/51.html",
      "id": "51"
    },
    {
      "Description": "<b>CAPEC-510: SaaS User Request Forgery</b><br>An adversary, through a previously installed malicious application, performs<br>malicious actions against a third-party Software as a Service (SaaS) application<br>(also known as a cloud based application) by leveraging the persistent and<br>implicit trust placed on a trusted user's session. This attack is executed after<br>a trusted user is authenticated into a cloud service, \"piggy-backing\" on the<br>authenticated session, and exploiting the fact that the cloud service believes<br>it is only interacting with the trusted user. If successful, the actions<br>embedded in the malicious application will be processed and accepted by the<br>targeted SaaS application and executed at the trusted user's privilege level.",
      "color": "#75aaff",
      "size": 18,
      "label": "SaaS User Request Forgery",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/510.html",
      "id": "510"
    },
    {
      "Description": "<b>CAPEC-511: Infiltration of Software Development Environment</b><br>An attacker uses common delivery mechanisms such as email attachments or<br>removable media to infiltrate the IDE (Integrated Development Environment) of a<br>victim manufacturer with the intent of implanting malware allowing for attack<br>control of the victim IDE environment. The attack then uses this access to<br>exfiltrate sensitive data or information, manipulate said data or information,<br>and conceal these actions. This will allow and aid the attack to meet the goal<br>of future compromise of a recipient of the victim's manufactured product further<br>down in the supply chain.",
      "color": "#94ebff",
      "size": 10,
      "label": "Infiltration of Software Development Environment",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/511.html",
      "id": "511"
    },
    {
      "Description": "<b>CAPEC-516: Hardware Component Substitution During Baselining</b><br>An adversary with access to system components during allocated baseline<br>development can substitute a maliciously altered hardware component for a<br>baseline component during the product development and research phases. This can<br>lead to adjustments and calibrations being made in the product so that when the<br>final product, now containing the modified component, is deployed it will not<br>perform as designed and be advantageous to the adversary.",
      "color": "#94ebff",
      "size": 10,
      "label": "Hardware Component Substitution During Baselining",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/516.html",
      "id": "516"
    },
    {
      "Description": "<b>CAPEC-517: Documentation Alteration to Circumvent Dial-down</b><br>An attacker with access to a manufacturer's documentation, which include<br>descriptions of advanced technology and/or specific components' criticality,<br>alters the documents to circumvent dial-down functionality requirements. This<br>alteration would change the interpretation of implementation and manufacturing<br>techniques, allowing for advanced technologies to remain in place even though<br>these technologies might be restricted to certain customers, such as nations on<br>the terrorist watch list, giving the attacker on the receiving end of a shipped<br>product access to an advanced technology that might otherwise be restricted.",
      "color": "#94ebff",
      "size": 10,
      "label": "Documentation Alteration to Circumvent Dial-down",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/517.html",
      "id": "517"
    },
    {
      "Description": "<b>CAPEC-518: Documentation Alteration to Produce Under-performing Systems</b><br>An attacker with access to a manufacturer's documentation alters the<br>descriptions of system capabilities with the intent of causing errors in derived<br>system requirements, impacting the overall effectiveness and capability of the<br>system, allowing an attacker to take advantage of the introduced system<br>capability flaw once the system is deployed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Documentation Alteration to Produce Under-performing Systems",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/518.html",
      "id": "518"
    },
    {
      "Description": "<b>CAPEC-519: Documentation Alteration to Cause Errors in System Design</b><br>An attacker with access to a manufacturer's documentation containing<br>requirements allocation and software design processes maliciously alters the<br>documentation in order to cause errors in system design. This allows the<br>attacker to take advantage of a weakness in a deployed system of the<br>manufacturer for malicious purposes.",
      "color": "#94ebff",
      "size": 10,
      "label": "Documentation Alteration to Cause Errors in System Design",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/519.html",
      "id": "519"
    },
    {
      "Description": "<b>CAPEC-52: Embedding NULL Bytes</b><br>An adversary embeds one or more null bytes in input to the target software. This<br>attack relies on the usage of a null-valued byte as a string terminator in many<br>environments. The goal is for certain components of the target software to stop<br>processing the input when it encounters the null byte(s).",
      "color": "#94ebff",
      "size": 10,
      "label": "Embedding NULL Bytes",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/52.html",
      "id": "52"
    },
    {
      "Description": "<b>CAPEC-520: Counterfeit Hardware Component Inserted During Product Assembly</b><br>An adversary with either direct access to the product assembly process or to the<br>supply of subcomponents used in the product assembly process introduces<br>counterfeit hardware components into product assembly. The assembly containing<br>the counterfeit components results in a system specifically designed for<br>malicious purposes.",
      "color": "#94ebff",
      "size": 10,
      "label": "Counterfeit Hardware Component Inserted During Product Assembly",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/520.html",
      "id": "520"
    },
    {
      "Description": "<b>CAPEC-521: Hardware Design Specifications Are Altered</b><br>An attacker with access to a manufacturer's hardware manufacturing process<br>documentation alters the design specifications, which introduces flaws<br>advantageous to the attacker once the system is deployed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Hardware Design Specifications Are Altered",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/521.html",
      "id": "521"
    },
    {
      "Description": "<b>CAPEC-522: Malicious Hardware Component Replacement</b><br>An adversary replaces legitimate hardware in the system with faulty counterfeit<br>or tampered hardware in the supply chain distribution channel, with purpose of<br>causing malicious disruption or allowing for additional compromise when the<br>system is deployed.",
      "color": "#75aaff",
      "size": 18,
      "label": "Malicious Hardware Component Replacement",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/522.html",
      "id": "522"
    },
    {
      "Description": "<b>CAPEC-523: Malicious Software Implanted</b><br>An attacker implants malicious software into the system in the supply chain<br>distribution channel, with purpose of causing malicious disruption or allowing<br>for additional compromise when the system is deployed.",
      "color": "#75aaff",
      "size": 18,
      "label": "Malicious Software Implanted",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/523.html",
      "id": "523"
    },
    {
      "Description": "<b>CAPEC-524: Rogue Integration Procedures</b><br>An attacker alters or establishes rogue processes in an integration facility in<br>order to insert maliciously altered components into the system. The attacker<br>would then supply the malicious components. This would allow for malicious<br>disruption or additional compromise when the system is deployed.",
      "color": "#75aaff",
      "size": 18,
      "label": "Rogue Integration Procedures",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/524.html",
      "id": "524"
    },
    {
      "Description": "<b>CAPEC-529: Malware-Directed Internal Reconnaissance</b><br>Adversary uses malware or a similarly controlled application installed inside an<br>organizational perimeter to gather information about the composition,<br>configuration, and security mechanisms of a targeted application, system or<br>network.",
      "color": "#75aaff",
      "size": 18,
      "label": "Malware-Directed Internal Reconnaissance",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/529.html",
      "id": "529"
    },
    {
      "Description": "<b>CAPEC-53: Postfix, Null Terminate, and Backslash</b><br>If a string is passed through a filter of some kind, then a terminal NULL may<br>not be valid. Using alternate representation of NULL allows an adversary to<br>embed the NULL mid-string while postfixing the proper data so that the filter is<br>avoided. One example is a filter that looks for a trailing slash character. If a<br>string insertion is possible, but the slash must exist, an alternate encoding of<br>NULL in mid-string may be used.",
      "color": "#94ebff",
      "size": 10,
      "label": "Postfix, Null Terminate, and Backslash",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/53.html",
      "id": "53"
    },
    {
      "Description": "<b>CAPEC-530: Provide Counterfeit Component</b><br>An attacker provides a counterfeit component during the procurement process of a<br>lower-tier component supplier to a sub-system developer or integrator, which is<br>then built into the system being upgraded or repaired by the victim, allowing<br>the attacker to cause disruption or additional compromise.",
      "color": "#94ebff",
      "size": 10,
      "label": "Provide Counterfeit Component",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/530.html",
      "id": "530"
    },
    {
      "Description": "<b>CAPEC-531: Hardware Component Substitution</b><br>An attacker substitutes out a tested and approved hardware component for a<br>maliciously-altered hardware component. This type of attack is carried out<br>directly on the system, enabling the attacker to then cause disruption or<br>additional compromise.",
      "color": "#94ebff",
      "size": 10,
      "label": "Hardware Component Substitution",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/531.html",
      "id": "531"
    },
    {
      "Description": "<b>CAPEC-534: Malicious Hardware Update</b><br>An adversary introduces malicious hardware during an update or replacement<br>procedure, allowing for additional compromise or site disruption at the victim<br>location. After deployment, it is not uncommon for upgrades and replacements to<br>occur involving hardware and various replaceable parts. These upgrades and<br>replacements are intended to correct defects, provide additional features, and<br>to replace broken or worn-out parts. However, by forcing or tricking the<br>replacement of a good component with a defective or corrupted component, an<br>adversary can leverage known defects to obtain a desired malicious impact.",
      "color": "#75aaff",
      "size": 18,
      "label": "Malicious Hardware Update",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/534.html",
      "id": "534"
    },
    {
      "Description": "<b>CAPEC-532: Altered Installed BIOS</b><br>An attacker with access to download and update system software sends a<br>maliciously altered BIOS to the victim or victim supplier/integrator, which when<br>installed allows for future exploitation.",
      "color": "#94ebff",
      "size": 10,
      "label": "Altered Installed BIOS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/532.html",
      "id": "532"
    },
    {
      "Description": "<b>CAPEC-533: Malicious Manual Software Update</b><br>An attacker introduces malicious code to the victim's system by altering the<br>payload of a software update, allowing for additional compromise or site<br>disruption at the victim location. These manual, or user-assisted attacks, vary<br>from requiring the user to download and run an executable, to as streamlined as<br>tricking the user to click a URL. Attacks which aim at penetrating a specific<br>network infrastructure often rely upon secondary attack methods to achieve the<br>desired impact. Spamming, for example, is a common method employed as an<br>secondary attack vector. Thus the attacker has in their arsenal a choice of<br>initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its<br>varieties, to web-application mechanisms which commonly implement both chat and<br>rich HTML messaging within the user interface.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Manual Software Update",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/533.html",
      "id": "533"
    },
    {
      "Description": "<b>CAPEC-535: Malicious Gray Market Hardware</b><br>An attacker maliciously alters hardware components that will be sold on the gray<br>market, allowing for victim disruption and compromise when the victim needs<br>replacement hardware components for systems where the parts are no longer in<br>regular supply from original suppliers, or where the hardware components from<br>the attacker seems to be a great benefit from a cost perspective.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Gray Market Hardware",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/535.html",
      "id": "535"
    },
    {
      "Description": "<b>CAPEC-536: Data Injected During Configuration</b><br>An attacker with access to data files and processes on a victim's system injects<br>malicious data into critical operational data during configuration or<br>recalibration, causing the victim's system to perform in a suboptimal manner<br>that benefits the adversary.",
      "color": "#75aaff",
      "size": 18,
      "label": "Data Injected During Configuration",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/536.html",
      "id": "536"
    },
    {
      "Description": "<b>CAPEC-537: Infiltration of Hardware Development Environment</b><br>An adversary, leveraging the ability to manipulate components of primary support<br>systems and tools within the development and production environments, inserts<br>malicious software within the hardware and/or firmware development environment.<br>The infiltration purpose is to alter developed hardware components in a system<br>destined for deployment at the victim's organization, for the purpose of<br>disruption or further compromise.",
      "color": "#94ebff",
      "size": 10,
      "label": "Infiltration of Hardware Development Environment",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/537.html",
      "id": "537"
    },
    {
      "Description": "<b>CAPEC-538: Open-Source Library Manipulation</b><br>Adversaries implant malicious code in open source software (OSS) libraries to<br>have it widely distributed, as OSS is commonly downloaded by developers and<br>other users to incorporate into software development projects. The adversary can<br>have a particular system in mind to target, or the implantation can be the first<br>stage of follow-on attacks on many systems.",
      "color": "#94ebff",
      "size": 10,
      "label": "Open-Source Library Manipulation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/538.html",
      "id": "538"
    },
    {
      "Description": "<b>CAPEC-539: ASIC With Malicious Functionality</b><br>An attacker with access to the development environment process of an<br>application-specific integrated circuit (ASIC) for a victim system being<br>developed or maintained after initial deployment can insert malicious<br>functionality into the system for the purpose of disruption or further<br>compromise.",
      "color": "#94ebff",
      "size": 10,
      "label": "ASIC With Malicious Functionality",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/539.html",
      "id": "539"
    },
    {
      "Description": "<b>CAPEC-540: Overread Buffers</b><br>An adversary attacks a target by providing input that causes an application to<br>read beyond the boundary of a defined buffer. This typically occurs when a value<br>influencing where to start or stop reading is set to reflect positions outside<br>of the valid memory location of the buffer. This type of attack may result in<br>exposure of sensitive information, a system crash, or arbitrary code execution.",
      "color": "#75aaff",
      "size": 18,
      "label": "Overread Buffers",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/540.html",
      "id": "540"
    },
    {
      "Description": "<b>CAPEC-542: Targeted Malware</b><br>An adversary develops targeted malware that takes advantage of a known<br>vulnerability in an organizational information technology environment. The<br>malware crafted for these attacks is based specifically on information gathered<br>about the technology environment. Successfully executing the malware enables an<br>adversary to achieve a wide variety of negative technical impacts.",
      "color": "#75aaff",
      "size": 18,
      "label": "Targeted Malware",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/542.html",
      "id": "542"
    },
    {
      "Description": "<b>CAPEC-549: Local Execution of Code</b><br>An adversary installs and executes malicious code on the target system in an<br>effort to achieve a negative technical impact. Examples include rootkits,<br>ransomware, spyware, adware, and others.",
      "color": "#2176ff",
      "size": 30,
      "label": "Local Execution of Code",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/549.html",
      "id": "549"
    },
    {
      "Description": "<b>CAPEC-543: Counterfeit Websites</b><br>Adversary creates duplicates of legitimate websites. When users visit a<br>counterfeit site, the site can gather information or upload malware.",
      "color": "#94ebff",
      "size": 10,
      "label": "Counterfeit Websites",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/543.html",
      "id": "543"
    },
    {
      "Description": "<b>CAPEC-544: Counterfeit Organizations</b><br>An adversary creates a false front organizations with the appearance of a<br>legitimate supplier in the critical life cycle path that then injects<br>corrupted/malicious information system components into the organizational supply<br>chain.",
      "color": "#94ebff",
      "size": 10,
      "label": "Counterfeit Organizations",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/544.html",
      "id": "544"
    },
    {
      "Description": "<b>CAPEC-546: Incomplete Data Deletion in a Multi-Tenant Environment</b><br>An adversary obtains unauthorized information due to insecure or incomplete data<br>deletion in a multi-tenant environment. If a cloud provider fails to completely<br>delete storage and data from former cloud tenants' systems/resources, once these<br>resources are allocated to new, potentially malicious tenants, the latter can<br>probe the provided resources for sensitive information still there.",
      "color": "#94ebff",
      "size": 10,
      "label": "Incomplete Data Deletion in a Multi-Tenant Environment",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/546.html",
      "id": "546"
    },
    {
      "Description": "<b>CAPEC-547: Physical Destruction of Device or Component</b><br>An adversary conducts a physical attack a device or component, destroying it<br>such that it no longer functions as intended.",
      "color": "#75aaff",
      "size": 18,
      "label": "Physical Destruction of Device or Component",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/547.html",
      "id": "547"
    },
    {
      "Description": "<b>CAPEC-607: Obstruction</b><br>An attacker obstructs the interactions between system components. By<br>interrupting or disabling these interactions, an adversary can often force the<br>system into a degraded state or cause the system to stop working as intended.<br>This can cause the system components to be unavailable until the obstruction<br>mitigated.",
      "color": "#2176ff",
      "size": 30,
      "label": "Obstruction",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/607.html",
      "id": "607"
    },
    {
      "Description": "<b>CAPEC-548: Contaminate Resource</b><br>An adversary contaminates organizational information systems (including devices<br>and networks) by causing them to handle information of a<br>classification/sensitivity for which they have not been authorized. When this<br>happens, the contaminated information system, device, or network must be brought<br>offline to investigate and mitigate the data spill, which denies availability of<br>the system until the investigation is complete.",
      "color": "#2176ff",
      "size": 30,
      "label": "Contaminate Resource",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/548.html",
      "id": "548"
    },
    {
      "Description": "<b>CAPEC-55: Rainbow Table Password Cracking</b><br>An attacker gets access to the database table where hashes of passwords are<br>stored. They then use a rainbow table of pre-computed hash chains to attempt to<br>look up the original password. Once the original password corresponding to the<br>hash is obtained, the attacker uses the original password to gain access to the<br>system.",
      "color": "#94ebff",
      "size": 10,
      "label": "Rainbow Table Password Cracking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/55.html",
      "id": "55"
    },
    {
      "Description": "<b>CAPEC-550: Install New Service</b><br>When an operating system starts, it also starts programs called services or<br>daemons. Adversaries may install a new service which will be executed at startup<br>(on a Windows system, by modifying the registry). The service name may be<br>disguised by using a name from a related operating system or benign software.<br>Services are usually run with elevated privileges.",
      "color": "#94ebff",
      "size": 10,
      "label": "Install New Service",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/550.html",
      "id": "550"
    },
    {
      "Description": "<b>CAPEC-551: Modify Existing Service</b><br>When an operating system starts, it also starts programs called services or<br>daemons. Modifying existing services may break existing services or may enable<br>services that are disabled/not commonly used.",
      "color": "#94ebff",
      "size": 10,
      "label": "Modify Existing Service",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/551.html",
      "id": "551"
    },
    {
      "Description": "<b>CAPEC-552: Install Rootkit </b><br>An adversary exploits a weakness in authentication to install malware that<br>alters the functionality and information provide by targeted operating system<br>API calls. Often referred to as rootkits, it is often used to hide the presence<br>of programs, files, network connections, services, drivers, and other system<br>components.",
      "color": "#94ebff",
      "size": 10,
      "label": "Install Rootkit ",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/552.html",
      "id": "552"
    },
    {
      "Description": "<b>CAPEC-555: Remote Services with Stolen Credentials</b><br>This pattern of attack involves an adversary that uses stolen credentials to<br>leverage remote services such as RDP, telnet, SSH, and VNC to log into a system.<br>Once access is gained, any number of malicious activities could be performed.",
      "color": "#75aaff",
      "size": 18,
      "label": "Remote Services with Stolen Credentials",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/555.html",
      "id": "555"
    },
    {
      "Description": "<b>CAPEC-560: Use of Known Domain Credentials</b><br>An adversary guesses or obtains (i.e. steals or purchases) legitimate<br>credentials (e.g. userID/password) to achieve authentication and to perform<br>authorized actions under the guise of an authenticated user or service.",
      "color": "#2176ff",
      "size": 30,
      "label": "Use of Known Domain Credentials",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/560.html",
      "id": "560"
    },
    {
      "Description": "<b>CAPEC-556: Replace File Extension Handlers</b><br>When a file is opened, its file handler is checked to determine which program<br>opens the file. File handlers are configuration properties of many operating<br>systems. Applications can modify the file handler for a given file extension to<br>call an arbitrary program when a file with the given extension is opened.",
      "color": "#94ebff",
      "size": 10,
      "label": "Replace File Extension Handlers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/556.html",
      "id": "556"
    },
    {
      "Description": "<b>CAPEC-558: Replace Trusted Executable</b><br>An adversary exploits weaknesses in privilege management or access control to<br>replace a trusted executable with a malicious version and enable the execution<br>of malware when that trusted executable is called.",
      "color": "#94ebff",
      "size": 10,
      "label": "Replace Trusted Executable",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/558.html",
      "id": "558"
    },
    {
      "Description": "<b>CAPEC-559: Orbital Jamming</b><br>In this attack pattern, the adversary sends disruptive signals at a target<br>satellite using a rogue uplink station to disrupt the intended transmission.<br>Those within the satellite's footprint are prevented from reaching the<br>satellite's targeted or neighboring channels. The satellite's footprint size<br>depends upon its position in the sky; higher orbital satellites cover multiple<br>continents.",
      "color": "#94ebff",
      "size": 10,
      "label": "Orbital Jamming",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/559.html",
      "id": "559"
    },
    {
      "Description": "<b>CAPEC-601: Jamming</b><br>An adversary uses radio noise or signals in an attempt to disrupt<br>communications. By intentionally overwhelming system resources with illegitimate<br>traffic, service is denied to the legitimate traffic of authorized users.",
      "color": "#75aaff",
      "size": 18,
      "label": "Jamming",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/601.html",
      "id": "601"
    },
    {
      "Description": "<b>CAPEC-561: Windows Admin Shares with Stolen Credentials</b><br>An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows<br>administrator credentials (e.g. userID/password) to access Windows Admin Shares<br>on a local machine or within a Windows domain.",
      "color": "#94ebff",
      "size": 10,
      "label": "Windows Admin Shares with Stolen Credentials",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/561.html",
      "id": "561"
    },
    {
      "Description": "<b>CAPEC-653: Use of Known Operating System Credentials</b><br>An adversary guesses or obtains (i.e. steals or purchases) legitimate operating<br>system credentials (e.g. userID/password) to achieve authentication and to<br>perform authorized actions on the system, under the guise of an authenticated<br>user or service. This applies to any Operating System.",
      "color": "#75aaff",
      "size": 18,
      "label": "Use of Known Operating System Credentials",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/653.html",
      "id": "653"
    },
    {
      "Description": "<b>CAPEC-562: Modify Shared File</b><br>An adversary manipulates the files in a shared location by adding malicious<br>programs, scripts, or exploit code to valid content. Once a user opens the<br>shared content, the tainted content is executed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Modify Shared File",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/562.html",
      "id": "562"
    },
    {
      "Description": "<b>CAPEC-563: Add Malicious File to Shared Webroot</b><br>An adversaries may add malicious content to a website through the open file<br>share and then browse to that content with a web browser to cause the server to<br>execute the content. The malicious content will typically run under the context<br>and permissions of the web server process, often resulting in local system or<br>administrative privileges depending on how the web server is configured.",
      "color": "#94ebff",
      "size": 10,
      "label": "Add Malicious File to Shared Webroot",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/563.html",
      "id": "563"
    },
    {
      "Description": "<b>CAPEC-564: Run Software at Logon</b><br>Operating system allows logon scripts to be run whenever a specific user or<br>users logon to a system. If adversaries can access these scripts, they may<br>insert additional code into the logon script. This code can allow them to<br>maintain persistence or move laterally within an enclave because it is executed<br>every time the affected user or users logon to a computer. Modifying logon<br>scripts can effectively bypass workstation and enclave firewalls. Depending on<br>the access configuration of the logon scripts, either local credentials or a<br>remote administrative account may be necessary.",
      "color": "#94ebff",
      "size": 10,
      "label": "Run Software at Logon",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/564.html",
      "id": "564"
    },
    {
      "Description": "<b>CAPEC-565: Password Spraying</b><br>In a Password Spraying attack, an adversary tries a small list (e.g. 3-5) of<br>common or expected passwords, often matching the target's complexity policy,<br>against a known list of user accounts to gain valid credentials. The adversary<br>tries a particular password for each user account, before moving onto the next<br>password in the list. This approach assists the adversary in remaining<br>undetected by avoiding rapid or frequent account lockouts. The adversary may<br>then reattempt the process with additional passwords, once enough time has<br>passed to prevent inducing a lockout.",
      "color": "#94ebff",
      "size": 10,
      "label": "Password Spraying",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/565.html",
      "id": "565"
    },
    {
      "Description": "<b>CAPEC-568: Capture Credentials via Keylogger</b><br>An adversary deploys a keylogger in an effort to obtain credentials directly<br>from a system's user. After capturing all the keystrokes made by a user, the<br>adversary can analyze the data and determine which string are likely to be<br>passwords or other credential related information.",
      "color": "#94ebff",
      "size": 10,
      "label": "Capture Credentials via Keylogger",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/568.html",
      "id": "568"
    },
    {
      "Description": "<b>CAPEC-569: Collect Data as Provided by Users</b><br>An attacker leverages a tool, device, or program to obtain specific information<br>as provided by a user of the target system. This information is often needed by<br>the attacker to launch a follow-on attack. This attack is different than Social<br>Engineering as the adversary is not tricking or deceiving the user. Instead the<br>adversary is putting a mechanism in place that captures the information that a<br>user legitimately enters into a system. Deploying a keylogger, performing a UAC<br>prompt, or wrapping the Windows default credential provider are all examples of<br>such interactions.",
      "color": "#75aaff",
      "size": 18,
      "label": "Collect Data as Provided by Users",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/569.html",
      "id": "569"
    },
    {
      "Description": "<b>CAPEC-57: Utilizing REST's Trust in the System Resource to Obtain Sensitive Data</b><br>This attack utilizes a REST(REpresentational State Transfer)-style applications'<br>trust in the system resources and environment to obtain sensitive data once SSL<br>is terminated.",
      "color": "#94ebff",
      "size": 10,
      "label": "Utilizing REST's Trust in the System Resource to Obtain Sensitive Data",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/57.html",
      "id": "57"
    },
    {
      "Description": "<b>CAPEC-571: Block Logging to Central Repository</b><br>An adversary prevents host-generated logs being delivered to a central location<br>in an attempt to hide indicators of compromise.",
      "color": "#75aaff",
      "size": 18,
      "label": "Block Logging to Central Repository",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/571.html",
      "id": "571"
    },
    {
      "Description": "<b>CAPEC-572: Artificially Inflate File Sizes</b><br>An adversary modifies file contents by adding data to files for several reasons.<br>Many different attacks could \u201cfollow\u201d this pattern resulting in numerous<br>outcomes. Adding data to a file could also result in a Denial of Service<br>condition for devices with limited storage capacity.",
      "color": "#75aaff",
      "size": 18,
      "label": "Artificially Inflate File Sizes",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/572.html",
      "id": "572"
    },
    {
      "Description": "<b>CAPEC-573: Process Footprinting</b><br>An adversary exploits functionality meant to identify information about the<br>currently running processes on the target system to an authorized user. By<br>knowing what processes are running on the target system, the adversary can learn<br>about the target environment as a means towards further malicious behavior.",
      "color": "#75aaff",
      "size": 18,
      "label": "Process Footprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/573.html",
      "id": "573"
    },
    {
      "Description": "<b>CAPEC-574: Services Footprinting</b><br>An adversary exploits functionality meant to identify information about the<br>services on the target system to an authorized user. By knowing what services<br>are registered on the target system, the adversary can learn about the target<br>environment as a means towards further malicious behavior. Depending on the<br>operating system, commands that can obtain services information include \"sc\" and<br>\"tasklist/svc\" using Tasklist, and \"net start\" using Net.",
      "color": "#75aaff",
      "size": 18,
      "label": "Services Footprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/574.html",
      "id": "574"
    },
    {
      "Description": "<b>CAPEC-575: Account Footprinting</b><br>An adversary exploits functionality meant to identify information about the<br>domain accounts and their permissions on the target system to an authorized<br>user. By knowing what accounts are registered on the target system, the<br>adversary can inform further and more targeted malicious behavior. Example<br>Windows commands which can acquire this information are: \"net user\" and<br>\"dsquery\".",
      "color": "#75aaff",
      "size": 18,
      "label": "Account Footprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/575.html",
      "id": "575"
    },
    {
      "Description": "<b>CAPEC-576: Group Permission Footprinting</b><br>An adversary exploits functionality meant to identify information about user<br>groups and their permissions on the target system to an authorized user. By<br>knowing what users/permissions are registered on the target system, the<br>adversary can inform further and more targeted malicious behavior. An example<br>Windows command which can list local groups is \"net localgroup\".",
      "color": "#75aaff",
      "size": 18,
      "label": "Group Permission Footprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/576.html",
      "id": "576"
    },
    {
      "Description": "<b>CAPEC-577: Owner Footprinting</b><br>An adversary exploits functionality meant to identify information about the<br>primary users on the target system to an authorized user. They may do this, for<br>example, by reviewing logins or file modification times. By knowing what owners<br>use the target system, the adversary can inform further and more targeted<br>malicious behavior. An example Windows command that may accomplish this is \"dir<br>/A ntuser.dat\". Which will display the last modified time of a user's ntuser.dat<br>file when run within the root folder of a user. This time is synonymous with the<br>last time that user was logged in.",
      "color": "#75aaff",
      "size": 18,
      "label": "Owner Footprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/577.html",
      "id": "577"
    },
    {
      "Description": "<b>CAPEC-578: Disable Security Software</b><br>An adversary exploits a weakness in access control to disable security tools so<br>that detection does not occur. This can take the form of killing processes,<br>deleting registry keys so that tools do not start at run time, deleting log<br>files, or other methods.",
      "color": "#75aaff",
      "size": 18,
      "label": "Disable Security Software",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/578.html",
      "id": "578"
    },
    {
      "Description": "<b>CAPEC-579: Replace Winlogon Helper DLL</b><br>Winlogon is a part of Windows that performs logon actions. In Windows systems<br>prior to Windows Vista, a registry key can be modified that causes Winlogon to<br>load a DLL on startup. Adversaries may take advantage of this feature to load<br>adversarial code at startup.",
      "color": "#94ebff",
      "size": 10,
      "label": "Replace Winlogon Helper DLL",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/579.html",
      "id": "579"
    },
    {
      "Description": "<b>CAPEC-58: Restful Privilege Elevation</b><br>An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method<br>allowing them to perform various malicious actions upon server data due to lack<br>of access control mechanisms implemented within the application service<br>accepting HTTP messages.",
      "color": "#94ebff",
      "size": 10,
      "label": "Restful Privilege Elevation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/58.html",
      "id": "58"
    },
    {
      "Description": "<b>CAPEC-580: System Footprinting</b><br>An adversary engages in active probing and exploration activities to determine<br>security information about a remote target system. Often times adversaries will<br>rely on remote applications that can be probed for system configurations.",
      "color": "#75aaff",
      "size": 18,
      "label": "System Footprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/580.html",
      "id": "580"
    },
    {
      "Description": "<b>CAPEC-581: Security Software Footprinting</b><br>Adversaries may attempt to get a listing of security tools that are installed on<br>the system and their configurations. This may include security related system<br>features (such as a built-in firewall or anti-spyware) as well as third-party<br>security software.",
      "color": "#94ebff",
      "size": 10,
      "label": "Security Software Footprinting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/581.html",
      "id": "581"
    },
    {
      "Description": "<b>CAPEC-582: Route Disabling</b><br>An adversary disables the network route between two targets. The goal is to<br>completely sever the communications channel between two entities. This is often<br>the result of a major error or the use of an \"Internet kill switch\" by those in<br>control of critical infrastructure. This attack pattern differs from most other<br>obstruction patterns by targeting the route itself, as opposed to the data<br>passed over the route.",
      "color": "#75aaff",
      "size": 18,
      "label": "Route Disabling",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/582.html",
      "id": "582"
    },
    {
      "Description": "<b>CAPEC-583: Disabling Network Hardware</b><br>In this attack pattern, an adversary physically disables networking hardware by<br>powering it down or disconnecting critical equipment. Disabling or shutting off<br>critical system resources prevents them from performing their service as<br>intended, which can have direct and indirect consequences on other systems. This<br>attack pattern is considerably less technical than the selective blocking used<br>in most obstruction attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "Disabling Network Hardware",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/583.html",
      "id": "583"
    },
    {
      "Description": "<b>CAPEC-584: BGP Route Disabling</b><br>An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a<br>route so as to render the underlying network inaccessible. The BGP protocol<br>helps traffic move throughout the Internet by selecting the most efficient route<br>between Autonomous Systems (AS), or routing domains. BGP is the basis for<br>interdomain routing infrastructure, providing connections between these ASs. By<br>suppressing the intended AS routing advertisements and/or forcing less effective<br>routes for traffic to ASs, the adversary can deny availability for the target<br>network.",
      "color": "#94ebff",
      "size": 10,
      "label": "BGP Route Disabling",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/584.html",
      "id": "584"
    },
    {
      "Description": "<b>CAPEC-585: DNS Domain Seizure</b><br>In this attack pattern, an adversary influences a target's web-hosting company<br>to disable a target domain. The goal is to prevent access to the targeted<br>service provided by that domain. It usually occurs as the result of civil or<br>criminal legal interventions.",
      "color": "#94ebff",
      "size": 10,
      "label": "DNS Domain Seizure",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/585.html",
      "id": "585"
    },
    {
      "Description": "<b>CAPEC-586: Object Injection</b><br>An adversary attempts to exploit an application by injecting additional,<br>malicious content during its processing of serialized objects. Developers<br>leverage serialization in order to convert data or state into a static, binary<br>format for saving to disk or transferring over a network. These objects are then<br>deserialized when needed to recover the data/state. By injecting a malformed<br>object into a vulnerable application, an adversary can potentially compromise<br>the application by manipulating the deserialization process. This can result in<br>a number of unwanted outcomes, including remote code execution.",
      "color": "#2176ff",
      "size": 30,
      "label": "Object Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/586.html",
      "id": "586"
    },
    {
      "Description": "<b>CAPEC-587: Cross Frame Scripting (XFS)</b><br>This attack pattern combines malicious Javascript and a legitimate webpage<br>loaded into a concealed iframe. The malicious Javascript is then able to<br>interact with a legitimate webpage in a manner that is unknown to the user. This<br>attack usually leverages some element of social engineering in that an attacker<br>must convinces a user to visit a web page that the attacker controls.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cross Frame Scripting (XFS)",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/587.html",
      "id": "587"
    },
    {
      "Description": "<b>CAPEC-63: Cross-Site Scripting (XSS)</b><br>An adversary embeds malicious scripts in content that will be served to web<br>browsers. The goal of the attack is for the target software, the client-side<br>browser, to execute the script with the users' privilege level. An attack of<br>this type exploits a programs' vulnerabilities that are brought on by allowing<br>remote hosts to execute code and scripts. Web browsers, for example, have some<br>simple security controls in place, but if a remote attacker is allowed to<br>execute scripts (through injecting them in to user-generated content like<br>bulletin boards) then these controls may be bypassed. Further, these attacks are<br>very difficult for an end user to detect.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cross-Site Scripting (XSS)",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/63.html",
      "id": "63"
    },
    {
      "Description": "<b>CAPEC-589: DNS Blocking</b><br>An adversary intercepts traffic and intentionally drops DNS requests based on<br>content in the request. In this way, the adversary can deny the availability of<br>specific services or content to the user even if the IP address is changed.",
      "color": "#94ebff",
      "size": 10,
      "label": "DNS Blocking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/589.html",
      "id": "589"
    },
    {
      "Description": "<b>CAPEC-603: Blockage</b><br>An adversary blocks the delivery of an important system resource causing the<br>system to fail or stop working.",
      "color": "#75aaff",
      "size": 18,
      "label": "Blockage",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/603.html",
      "id": "603"
    },
    {
      "Description": "<b>CAPEC-59: Session Credential Falsification through Prediction</b><br>This attack targets predictable session ID in order to gain privileges. The<br>attacker can predict the session ID used during a transaction to perform<br>spoofing and session hijacking.",
      "color": "#94ebff",
      "size": 10,
      "label": "Session Credential Falsification through Prediction",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/59.html",
      "id": "59"
    },
    {
      "Description": "<b>CAPEC-590: IP Address Blocking</b><br>An adversary performing this type of attack drops packets destined for a target<br>IP address. The aim is to prevent access to the service hosted at the target IP<br>address.",
      "color": "#94ebff",
      "size": 10,
      "label": "IP Address Blocking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/590.html",
      "id": "590"
    },
    {
      "Description": "<b>CAPEC-594: Traffic Injection</b><br>An adversary injects traffic into the target's network connection. The adversary<br>is therefore able to degrade or disrupt the connection, and potentially modify<br>the content. This is not a flooding attack, as the adversary is not focusing on<br>exhausting resources. Instead, the adversary is crafting a specific input to<br>affect the system in a particular way.",
      "color": "#2176ff",
      "size": 30,
      "label": "Traffic Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/594.html",
      "id": "594"
    },
    {
      "Description": "<b>CAPEC-595: Connection Reset</b><br>In this attack pattern, an adversary injects a connection reset packet to one or<br>both ends of a target's connection. The attacker is therefore able to have the<br>target and/or the destination server sever the connection without having to<br>directly filter the traffic between them.",
      "color": "#75aaff",
      "size": 18,
      "label": "Connection Reset",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/595.html",
      "id": "595"
    },
    {
      "Description": "<b>CAPEC-596: TCP RST Injection</b><br>An adversary injects one or more TCP RST packets to a target after the target<br>has made a HTTP GET request. The goal of this attack is to have the target<br>and/or destination web server terminate the TCP connection.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP RST Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/596.html",
      "id": "596"
    },
    {
      "Description": "<b>CAPEC-597: Absolute Path Traversal</b><br>An adversary with access to file system resources, either directly or via<br>application logic, will use various file absolute paths and navigation<br>mechanisms such as \"..\" to extend their range of access to inappropriate areas<br>of the file system. The goal of the adversary is to access directories and files<br>that are intended to be restricted from their access.",
      "color": "#94ebff",
      "size": 10,
      "label": "Absolute Path Traversal",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/597.html",
      "id": "597"
    },
    {
      "Description": "<b>CAPEC-598: DNS Spoofing</b><br>An adversary sends a malicious (\"NXDOMAIN\" (\"No such domain\") code, or DNS A<br>record) response to a target's route request before a legitimate resolver can.<br>This technique requires an On-path or In-path device that can monitor and<br>respond to the target's DNS requests. This attack differs from BGP Tampering in<br>that it directly responds to requests made by the target instead of polluting<br>the routing the target's infrastructure uses.",
      "color": "#94ebff",
      "size": 10,
      "label": "DNS Spoofing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/598.html",
      "id": "598"
    },
    {
      "Description": "<b>CAPEC-599: Terrestrial Jamming</b><br>In this attack pattern, the adversary transmits disruptive signals in the<br>direction of the target's consumer-level satellite dish (as opposed to the<br>satellite itself). The transmission disruption occurs in a more targeted range.<br>Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and<br>20 kilometers in rural areas. This technique requires a terrestrial jammer that<br>is more powerful than the frequencies sent from the satellite.",
      "color": "#94ebff",
      "size": 10,
      "label": "Terrestrial Jamming",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/599.html",
      "id": "599"
    },
    {
      "Description": "<b>CAPEC-6: Argument Injection</b><br>An attacker changes the behavior or state of a targeted application through<br>injecting data or command syntax through the targets use of non-validated and<br>non-filtered arguments of exposed services or methods.",
      "color": "#75aaff",
      "size": 18,
      "label": "Argument Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/6.html",
      "id": "6"
    },
    {
      "Description": "<b>CAPEC-60: Reusing Session IDs (aka Session Replay)</b><br>This attack targets the reuse of valid session ID to spoof the target system in<br>order to gain privileges. The attacker tries to reuse a stolen session ID used<br>previously during a transaction to perform spoofing and session hijacking.<br>Another name for this type of attack is Session Replay.",
      "color": "#94ebff",
      "size": 10,
      "label": "Reusing Session IDs (aka Session Replay)",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/60.html",
      "id": "60"
    },
    {
      "Description": "<b>CAPEC-600: Credential Stuffing</b><br>An adversary tries known username/password combinations against different<br>systems, applications, or services to gain additional authenticated access.<br>Credential Stuffing attacks rely upon the fact that many users leverage the same<br>username/password combination for multiple systems, applications, and services.",
      "color": "#75aaff",
      "size": 18,
      "label": "Credential Stuffing",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/600.html",
      "id": "600"
    },
    {
      "Description": "<b>CAPEC-604: Wi-Fi Jamming</b><br>In this attack scenario, the attacker actively transmits on the Wi-Fi channel to<br>prevent users from transmitting or receiving data from the targeted Wi-Fi<br>network. There are several known techniques to perform this attack \u2013 for<br>example: the attacker may flood the Wi-Fi access point (e.g. the retransmission<br>device) with deauthentication frames. Another method is to transmit high levels<br>of noise on the RF band used by the Wi-Fi network.",
      "color": "#94ebff",
      "size": 10,
      "label": "Wi-Fi Jamming",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/604.html",
      "id": "604"
    },
    {
      "Description": "<b>CAPEC-605: Cellular Jamming</b><br>In this attack scenario, the attacker actively transmits signals to overpower<br>and disrupt the communication between a cellular user device and a cell tower.<br>Several existing techniques are known in the open literature for this attack for<br>2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell<br>towers by overwhelming them with false status messages, while others introduce<br>high levels of noise on signaling channels.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cellular Jamming",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/605.html",
      "id": "605"
    },
    {
      "Description": "<b>CAPEC-606: Weakening of Cellular Encryption</b><br>An attacker, with control of a Cellular Rogue Base Station or through<br>cooperation with a Malicious Mobile Network Operator can force the mobile device<br>(e.g., the retransmission device) to use no encryption (A5/0 mode) or to use<br>easily breakable encryption (A5/1 or A5/2 mode).",
      "color": "#94ebff",
      "size": 10,
      "label": "Weakening of Cellular Encryption",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/606.html",
      "id": "606"
    },
    {
      "Description": "<b>CAPEC-620: Drop Encryption Level</b><br>An attacker forces the encryption level to be lowered, thus enabling a<br>successful attack against the encrypted data.",
      "color": "#75aaff",
      "size": 18,
      "label": "Drop Encryption Level",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/620.html",
      "id": "620"
    },
    {
      "Description": "<b>CAPEC-608: Cryptanalysis of Cellular Encryption</b><br>The use of cryptanalytic techniques to derive cryptographic keys or otherwise<br>effectively defeat cellular encryption to reveal traffic content. Some cellular<br>encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to<br>be vulnerable to such attacks and commercial tools are available to execute<br>these attacks and decrypt mobile phone conversations in real-time. Newer<br>encryption algorithms in use by UMTS and LTE are stronger and currently believed<br>to be less vulnerable to these types of attacks. Note, however, that an attacker<br>with a Cellular Rogue Base Station can force the use of weak cellular encryption<br>even by newer mobile devices.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cryptanalysis of Cellular Encryption",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/608.html",
      "id": "608"
    },
    {
      "Description": "<b>CAPEC-609: Cellular Traffic Intercept</b><br>Cellular traffic for voice and data from mobile devices and retransmission<br>devices can be intercepted via numerous methods. Malicious actors can deploy<br>their own cellular tower equipment and intercept cellular traffic<br>surreptitiously. Additionally, government agencies of adversaries and malicious<br>actors can intercept cellular traffic via the telecommunications backbone over<br>which mobile traffic is transmitted.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cellular Traffic Intercept",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/609.html",
      "id": "609"
    },
    {
      "Description": "<b>CAPEC-61: Session Fixation</b><br>The attacker induces a client to establish a session with the target software<br>using a session identifier provided by the attacker. Once the user successfully<br>authenticates to the target software, the attacker uses the (now privileged)<br>session identifier in their own transactions. This attack leverages the fact<br>that the target software either relies on client-generated session identifiers<br>or maintains the same session identifiers after privilege elevation.",
      "color": "#94ebff",
      "size": 10,
      "label": "Session Fixation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/61.html",
      "id": "61"
    },
    {
      "Description": "<b>CAPEC-610: Cellular Data Injection</b><br>Adversaries inject data into mobile technology traffic (data flows or signaling<br>data) to disrupt communications or conduct additional surveillance operations.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cellular Data Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/610.html",
      "id": "610"
    },
    {
      "Description": "<b>CAPEC-611: BitSquatting</b><br>An adversary registers a domain name one bit different than a trusted domain. A<br>BitSquatting attack leverages random errors in memory to direct Internet traffic<br>to adversary-controlled destinations. BitSquatting requires no exploitation or<br>complicated reverse engineering, and is operating system and architecture<br>agnostic. Experimental observations show that BitSquatting popular websites<br>could redirect non-trivial amounts of Internet traffic to a malicious entity.",
      "color": "#94ebff",
      "size": 10,
      "label": "BitSquatting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/611.html",
      "id": "611"
    },
    {
      "Description": "<b>CAPEC-612: WiFi MAC Address Tracking</b><br>In this attack scenario, the attacker passively listens for WiFi messages and<br>logs the associated Media Access Control (MAC) addresses. These addresses are<br>intended to be unique to each wireless device (although they can be configured<br>and changed by software). Once the attacker is able to associate a MAC address<br>with a particular user or set of users (for example, when attending a public<br>event), the attacker can then scan for that MAC address to track that user in<br>the future.",
      "color": "#94ebff",
      "size": 10,
      "label": "WiFi MAC Address Tracking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/612.html",
      "id": "612"
    },
    {
      "Description": "<b>CAPEC-613: WiFi SSID Tracking</b><br>In this attack scenario, the attacker passively listens for WiFi management<br>frame messages containing the Service Set Identifier (SSID) for the WiFi<br>network. These messages are frequently transmitted by WiFi access points (e.g.,<br>the retransmission device) as well as by clients that are accessing the network<br>(e.g., the handset/mobile device). Once the attacker is able to associate an<br>SSID with a particular user or set of users (for example, when attending a<br>public event), the attacker can then scan for this SSID to track that user in<br>the future.",
      "color": "#94ebff",
      "size": 10,
      "label": "WiFi SSID Tracking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/613.html",
      "id": "613"
    },
    {
      "Description": "<b>CAPEC-614: Rooting SIM Cards</b><br>SIM cards are the de facto trust anchor of mobile devices worldwide. The cards<br>protect the mobile identity of subscribers, associate devices with phone<br>numbers, and increasingly store payment credentials, for example in NFC-enabled<br>phones with mobile wallets. This attack leverages over-the-air (OTA) updates<br>deployed via cryptographically-secured SMS messages to deliver executable code<br>to the SIM. By cracking the DES key, an attacker can send properly signed binary<br>SMS messages to a device, which are treated as Java applets and are executed on<br>the SIM. These applets are allowed to send SMS, change voicemail numbers, and<br>query the phone location, among many other predefined functions. These<br>capabilities alone provide plenty of potential for abuse.",
      "color": "#94ebff",
      "size": 10,
      "label": "Rooting SIM Cards",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/614.html",
      "id": "614"
    },
    {
      "Description": "<b>CAPEC-615: Evil Twin Wi-Fi Attack</b><br>Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network<br>access point. When a device connects to this access point, Wi-Fi data traffic is<br>intercepted, captured, and analyzed. This also allows the adversary to use<br>\"adversary-in-the-middle\" (CAPEC-94) for all communications.",
      "color": "#94ebff",
      "size": 10,
      "label": "Evil Twin Wi-Fi Attack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/615.html",
      "id": "615"
    },
    {
      "Description": "<b>CAPEC-617: Cellular Rogue Base Station</b><br>In this attack scenario, the attacker imitates a cellular base station with<br>their own \"rogue\" base station equipment. Since cellular devices connect to<br>whatever station has the strongest signal, the attacker can easily convince a<br>targeted cellular device (e.g. the retransmission device) to talk to the rogue<br>base station.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cellular Rogue Base Station",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/617.html",
      "id": "617"
    },
    {
      "Description": "<b>CAPEC-618: Cellular Broadcast Message Request</b><br>In this attack scenario, the attacker uses knowledge of the target\u2019s mobile<br>phone number (i.e., the number associated with the SIM used in the<br>retransmission device) to cause the cellular network to send broadcast messages<br>to alert the mobile device. Since the network knows which cell tower the<br>target\u2019s mobile device is attached to, the broadcast messages are only sent in<br>the Location Area Code (LAC) where the target is currently located. By<br>triggering the cellular broadcast message and then listening for the presence or<br>absence of that message, an attacker could verify that the target is in (or not<br>in) a given location.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cellular Broadcast Message Request",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/618.html",
      "id": "618"
    },
    {
      "Description": "<b>CAPEC-619: Signal Strength Tracking</b><br>In this attack scenario, the attacker passively monitors the signal strength of<br>the target\u2019s cellular RF signal or WiFi RF signal and uses the strength of the<br>signal (with directional antennas and/or from multiple listening points at once)<br>to identify the source location of the signal. Obtaining the signal of the<br>target can be accomplished through multiple techniques such as through Cellular<br>Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC<br>Address Tracking.",
      "color": "#94ebff",
      "size": 10,
      "label": "Signal Strength Tracking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/619.html",
      "id": "619"
    },
    {
      "Description": "<b>CAPEC-621: Analysis of Packet Timing and Sizes</b><br>An attacker may intercept and log encrypted transmissions for the purpose of<br>analyzing metadata such as packet timing and sizes. Although the actual data may<br>be encrypted, this metadata may reveal valuable information to an attacker. Note<br>that this attack is applicable to VOIP data as well as application data,<br>especially for interactive apps that require precise timing and low-latency<br>(e.g. thin-clients).",
      "color": "#94ebff",
      "size": 10,
      "label": "Analysis of Packet Timing and Sizes",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/621.html",
      "id": "621"
    },
    {
      "Description": "<b>CAPEC-622: Electromagnetic Side-Channel Attack</b><br>In this attack scenario, the attacker passively monitors electromagnetic<br>emanations that are produced by the targeted electronic device as an<br>unintentional side-effect of its processing. From these emanations, the attacker<br>derives information about the data that is being processed (e.g. the attacker<br>can recover cryptographic keys by monitoring emanations associated with<br>cryptographic processing). This style of attack requires proximal access to the<br>device, however attacks have been demonstrated at public conferences that work<br>at distances of up to 10-15 feet. There have not been any significant studies to<br>determine the maximum practical distance for such attacks. Since the attack is<br>passive, it is nearly impossible to detect and the targeted device will continue<br>to operate as normal after a successful attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "Electromagnetic Side-Channel Attack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/622.html",
      "id": "622"
    },
    {
      "Description": "<b>CAPEC-623: Compromising Emanations Attack</b><br>Compromising Emanations (CE) are defined as unintentional signals which an<br>attacker may intercept and analyze to disclose the information processed by the<br>targeted equipment. Commercial mobile devices and retransmission devices have<br>displays, buttons, microchips, and radios that emit mechanical emissions in the<br>form of sound or vibrations. Capturing these emissions can help an adversary<br>understand what the device is doing.",
      "color": "#94ebff",
      "size": 10,
      "label": "Compromising Emanations Attack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/623.html",
      "id": "623"
    },
    {
      "Description": "<b>CAPEC-624: Hardware Fault Injection</b><br>The adversary uses disruptive signals or events, or alters the physical<br>environment a device operates in, to cause faulty behavior in electronic<br>devices. This can include electromagnetic pulses, laser pulses, clock glitches,<br>ambient temperature extremes, and more. When performed in a controlled manner on<br>devices performing cryptographic operations, this faulty behavior can be<br>exploited to derive secret key information.",
      "color": "#2176ff",
      "size": 30,
      "label": "Hardware Fault Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/624.html",
      "id": "624"
    },
    {
      "Description": "<b>CAPEC-625: Mobile Device Fault Injection</b><br>Fault injection attacks against mobile devices use disruptive signals or events<br>(e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause<br>faulty behavior. When performed in a controlled manner on devices performing<br>cryptographic operations, this faulty behavior can be exploited to derive secret<br>key information. Although this attack usually requires physical control of the<br>mobile device, it is non-destructive, and the device can be used after the<br>attack without any indication that secret keys were compromised.",
      "color": "#75aaff",
      "size": 18,
      "label": "Mobile Device Fault Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/625.html",
      "id": "625"
    },
    {
      "Description": "<b>CAPEC-626: Smudge Attack</b><br>Attacks that reveal the password/passcode pattern on a touchscreen device by<br>detecting oil smudges left behind by the user\u2019s fingers.",
      "color": "#94ebff",
      "size": 10,
      "label": "Smudge Attack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/626.html",
      "id": "626"
    },
    {
      "Description": "<b>CAPEC-627: Counterfeit GPS Signals</b><br>An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS<br>signals, structured to resemble a set of normal GPS signals. These spoofed<br>signals may be structured in such a way as to cause the receiver to estimate its<br>position to be somewhere other than where it actually is, or to be located where<br>it is but at a different time, as determined by the adversary.",
      "color": "#75aaff",
      "size": 18,
      "label": "Counterfeit GPS Signals",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/627.html",
      "id": "627"
    },
    {
      "Description": "<b>CAPEC-628: Carry-Off GPS Attack</b><br>A common form of a GPS spoofing attack, commonly termed a carry-off attack<br>begins with an adversary broadcasting signals synchronized with the genuine<br>signals observed by the target receiver. The power of the counterfeit signals is<br>then gradually increased and drawn away from the genuine signals. Over time, the<br>adversary can carry the target away from their intended destination and toward a<br>location chosen by the adversary.",
      "color": "#94ebff",
      "size": 10,
      "label": "Carry-Off GPS Attack",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/628.html",
      "id": "628"
    },
    {
      "Description": "<b>CAPEC-630: TypoSquatting</b><br>An adversary registers a domain name with at least one character different than<br>a trusted domain. A TypoSquatting attack takes advantage of instances where a<br>user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL<br>before clicking on it (e.g. phishing attack). As a result, the user is directed<br>to an adversary-controlled destination. TypoSquatting does not require an attack<br>against the trusted domain or complicated reverse engineering.",
      "color": "#94ebff",
      "size": 10,
      "label": "TypoSquatting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/630.html",
      "id": "630"
    },
    {
      "Description": "<b>CAPEC-631: SoundSquatting</b><br>An adversary registers a domain name that sounds the same as a trusted domain,<br>but has a different spelling. A SoundSquatting attack takes advantage of a<br>user's confusion of the two words to direct Internet traffic to<br>adversary-controlled destinations. SoundSquatting does not require an attack<br>against the trusted domain or complicated reverse engineering.",
      "color": "#94ebff",
      "size": 10,
      "label": "SoundSquatting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/631.html",
      "id": "631"
    },
    {
      "Description": "<b>CAPEC-632: Homograph Attack via Homoglyphs</b><br>An adversary registers a domain name containing a homoglyph, leading the<br>registered domain to appear the same as a trusted domain. A homograph attack<br>leverages the fact that different characters among various character sets look<br>the same to the user. Homograph attacks must generally be combined with other<br>attacks, such as phishing attacks, in order to direct Internet traffic to the<br>adversary-controlled destinations.",
      "color": "#94ebff",
      "size": 10,
      "label": "Homograph Attack via Homoglyphs",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/632.html",
      "id": "632"
    },
    {
      "Description": "<b>CAPEC-633: Token Impersonation</b><br>An adversary exploits a weakness in authentication to create an access token (or<br>equivalent) that impersonates a different entity, and then associates a<br>process/thread to that that impersonated token. This action causes a downstream<br>user to make a decision or take action that is based on the assumed identity,<br>and not the response that blocks the adversary.",
      "color": "#94ebff",
      "size": 10,
      "label": "Token Impersonation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/633.html",
      "id": "633"
    },
    {
      "Description": "<b>CAPEC-634: Probe Audio and Video Peripherals</b><br>The adversary exploits the target system's audio and video functionalities<br>through malware or scheduled tasks. The goal is to capture sensitive information<br>about the target for financial, personal, political, or other gains which is<br>accomplished by collecting communication data between two parties via the use of<br>peripheral devices (e.g. microphones and webcams) or applications with audio and<br>video capabilities (e.g. Skype) on a system.",
      "color": "#94ebff",
      "size": 10,
      "label": "Probe Audio and Video Peripherals",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/634.html",
      "id": "634"
    },
    {
      "Description": "<b>CAPEC-637: Collect Data from Clipboard</b><br>The adversary exploits an application that allows for the copying of sensitive<br>data or information by collecting information copied to the clipboard. Data<br>copied to the clipboard can be accessed by other applications, such as malware<br>built to exfiltrate or log clipboard contents on a periodic basis. In this way,<br>the adversary aims to garner information to which they are unauthorized.",
      "color": "#94ebff",
      "size": 10,
      "label": "Collect Data from Clipboard",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/637.html",
      "id": "637"
    },
    {
      "Description": "<b>CAPEC-638: Altered Component Firmware</b><br>An adversary exploits systems features and/or improperly protected firmware of<br>hardware components, such as Hard Disk Drives (HDD), with the goal of executing<br>malicious code from within the component's Master Boot Record (MBR). Conducting<br>this type of attack entails the adversary infecting the target with firmware<br>altering malware, using known tools, and a payload. Once this malware is<br>executed, the MBR is modified to include instructions to execute the payload at<br>desired intervals and when the system is booted up. A successful attack will<br>obtain persistence within the victim system even if the operating system is<br>reinstalled and/or if the component is formatted or has its data erased.",
      "color": "#94ebff",
      "size": 10,
      "label": "Altered Component Firmware",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/638.html",
      "id": "638"
    },
    {
      "Description": "<b>CAPEC-639: Probe System Files</b><br>An adversary obtains unauthorized information due to improperly protected files.<br>If an application stores sensitive information in a file that is not protected<br>by proper access control, then an adversary can access the file and search for<br>sensitive information.",
      "color": "#94ebff",
      "size": 10,
      "label": "Probe System Files",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/639.html",
      "id": "639"
    },
    {
      "Description": "<b>CAPEC-64: Using Slashes and URL Encoding Combined to Bypass Validation Logic</b><br>This attack targets the encoding of the URL combined with the encoding of the<br>slash characters. An attacker can take advantage of the multiple ways of<br>encoding a URL and abuse the interpretation of the URL. A URL may contain<br>special character that need special syntax handling in order to be interpreted.<br>Special characters are represented using a percentage character followed by two<br>digits representing the octet code of the original character (%HEX-CODE). For<br>instance US-ASCII space character would be represented with %20. This is often<br>referred as escaped ending or percent-encoding. Since the server decodes the URL<br>from the requests, it may restrict the access to some URL paths by validating<br>and filtering out the URL requests it received. An attacker will try to craft an<br>URL with a sequence of special characters which once interpreted by the server<br>will be equivalent to a forbidden URL. It can be difficult to protect against<br>this attack since the URL can contain other format of encoding such as UTF-8<br>encoding, Unicode-encoding, etc.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Slashes and URL Encoding Combined to Bypass Validation Logic",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/64.html",
      "id": "64"
    },
    {
      "Description": "<b>CAPEC-640: Inclusion of Code in Existing Process</b><br>The adversary takes advantage of a bug in an application failing to verify the<br>integrity of the running process to execute arbitrary code in the address space<br>of a separate live process. The adversary could use running code in the context<br>of another process to try to access process's memory, system/network resources,<br>etc. The goal of this attack is to evade detection defenses and escalate<br>privileges by masking the malicious code under an existing legitimate process.<br>Examples of approaches include but not limited to: dynamic-link library (DLL)<br>injection, portable executable injection, thread execution hijacking, ptrace<br>system calls, VDSO hijacking, function hooking, reflective code loading, and<br>more.",
      "color": "#94ebff",
      "size": 10,
      "label": "Inclusion of Code in Existing Process",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/640.html",
      "id": "640"
    },
    {
      "Description": "<b>CAPEC-641: DLL Side-Loading</b><br>An adversary places a malicious version of a Dynamic-Link Library (DLL) in the<br>Windows Side-by-Side (WinSxS) directory to trick the operating system into<br>loading this malicious DLL instead of a legitimate DLL. Programs specify the<br>location of the DLLs to load via the use of WinSxS manifests or DLL redirection<br>and if they aren't used then Windows searches in a predefined set of directories<br>to locate the file. If the applications improperly specify a required DLL or<br>WinSxS manifests aren't explicit about the characteristics of the DLL to be<br>loaded, they can be vulnerable to side-loading.",
      "color": "#94ebff",
      "size": 10,
      "label": "DLL Side-Loading",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/641.html",
      "id": "641"
    },
    {
      "Description": "<b>CAPEC-642: Replace Binaries</b><br>Adversaries know that certain binaries will be regularly executed as part of<br>normal processing. If these binaries are not protected with the appropriate file<br>system permissions, it could be possible to replace them with malware. This<br>malware might be executed at higher system permission levels. A variation of<br>this pattern is to discover self-extracting installation packages that unpack<br>binaries to directories with weak file permissions which it does not clean up<br>appropriately. These binaries can be replaced by malware, which can then be<br>executed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Replace Binaries",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/642.html",
      "id": "642"
    },
    {
      "Description": "<b>CAPEC-643: Identify Shared Files/Directories on System</b><br>An adversary discovers connections between systems by exploiting the target<br>system's standard practice of revealing them in searchable, common areas.<br>Through the identification of shared folders/drives between systems, the<br>adversary may further their goals of locating and collecting sensitive<br>information/files, or map potential routes for lateral movement within the<br>network.",
      "color": "#94ebff",
      "size": 10,
      "label": "Identify Shared Files/Directories on System",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/643.html",
      "id": "643"
    },
    {
      "Description": "<b>CAPEC-644: Use of Captured Hashes (Pass The Hash)</b><br>An adversary obtains (i.e. steals or purchases) legitimate Windows domain<br>credential hash values to access systems within the domain that leverage the Lan<br>Man (LM) and/or NT Lan Man (NTLM) authentication protocols.",
      "color": "#94ebff",
      "size": 10,
      "label": "Use of Captured Hashes (Pass The Hash)",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/644.html",
      "id": "644"
    },
    {
      "Description": "<b>CAPEC-645: Use of Captured Tickets (Pass The Ticket)</b><br>An adversary uses stolen Kerberos tickets to access systems/resources that<br>leverage the Kerberos authentication protocol. The Kerberos authentication<br>protocol centers around a ticketing system which is used to request/grant access<br>to services and to then access the requested services. An adversary can obtain<br>any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver<br>Ticket, or Golden Ticket) to authenticate to a system/resource without needing<br>the account's credentials. Depending on the ticket obtained, the adversary may<br>be able to access a particular resource or generate TGTs for any account within<br>an Active Directory Domain.",
      "color": "#94ebff",
      "size": 10,
      "label": "Use of Captured Tickets (Pass The Ticket)",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/645.html",
      "id": "645"
    },
    {
      "Description": "<b>CAPEC-646: Peripheral Footprinting</b><br>Adversaries may attempt to obtain information about attached peripheral devices<br>and components connected to a computer system. Examples may include discovering<br>the presence of iOS devices by searching for backups, analyzing the Windows<br>registry to determine what USB devices have been connected, or infecting a<br>victim system with malware to report when a USB device has been connected. This<br>may allow the adversary to gain additional insight about the system or network<br>environment, which may be useful in constructing further attacks.",
      "color": "#75aaff",
      "size": 18,
      "label": "Peripheral Footprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/646.html",
      "id": "646"
    },
    {
      "Description": "<b>CAPEC-647: Collect Data from Registries</b><br>An adversary exploits a weakness in authorization to gather system-specific data<br>and sensitive information within a registry (e.g., Windows Registry, Mac plist).<br>These contain information about the system configuration, software, operating<br>system, and security. The adversary can leverage information gathered in order<br>to carry out further attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "Collect Data from Registries",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/647.html",
      "id": "647"
    },
    {
      "Description": "<b>CAPEC-648: Collect Data from Screen Capture</b><br>An adversary gathers sensitive information by exploiting the system's screen<br>capture functionality. Through screenshots, the adversary aims to see what<br>happens on the screen over the course of an operation. The adversary can<br>leverage information gathered in order to carry out further attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "Collect Data from Screen Capture",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/648.html",
      "id": "648"
    },
    {
      "Description": "<b>CAPEC-649: Adding a Space to a File Extension</b><br>An adversary adds a space character to the end of a file extension and takes<br>advantage of an application that does not properly neutralize trailing special<br>elements in file names. This extra space, which can be difficult for a user to<br>notice, affects which default application is used to operate on the file and can<br>be leveraged by the adversary to control execution.",
      "color": "#94ebff",
      "size": 10,
      "label": "Adding a Space to a File Extension",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/649.html",
      "id": "649"
    },
    {
      "Description": "<b>CAPEC-65: Sniff Application Code</b><br>An adversary passively sniffs network communications and captures application<br>code bound for an authorized client. Once obtained, they can use it as-is, or<br>through reverse-engineering glean sensitive information or exploit the trust<br>relationship between the client and server. Such code may belong to a dynamic<br>update to the client, a patch being applied to a client component or any such<br>interaction where the client is authorized to communicate with the server.",
      "color": "#94ebff",
      "size": 10,
      "label": "Sniff Application Code",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/65.html",
      "id": "65"
    },
    {
      "Description": "<b>CAPEC-650: Upload a Web Shell to a Web Server</b><br>By exploiting insufficient permissions, it is possible to upload a web shell to<br>a web server in such a way that it can be executed remotely. This shell can have<br>various capabilities, thereby acting as a \"gateway\" to the underlying web<br>server. The shell might execute at the higher permission level of the web<br>server, providing the ability the execute malicious code at elevated levels.",
      "color": "#94ebff",
      "size": 10,
      "label": "Upload a Web Shell to a Web Server",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/650.html",
      "id": "650"
    },
    {
      "Description": "<b>CAPEC-654: Credential Prompt Impersonation</b><br>An adversary, through a previously installed malicious application, impersonates<br>a credential prompt in an attempt to steal a user's credentials.",
      "color": "#94ebff",
      "size": 10,
      "label": "Credential Prompt Impersonation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/654.html",
      "id": "654"
    },
    {
      "Description": "<b>CAPEC-655: Avoid Security Tool Identification by Adding Data</b><br>An adversary adds data to a file to increase the file size beyond what security<br>tools are capable of handling in an attempt to mask their actions. In addition<br>to this, adding data to a file also changes the file's hash, frustrating<br>security tools that look for known bad files by their hash.",
      "color": "#94ebff",
      "size": 10,
      "label": "Avoid Security Tool Identification by Adding Data",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/655.html",
      "id": "655"
    },
    {
      "Description": "<b>CAPEC-656: Voice Phishing</b><br>An adversary targets users with a phishing attack for the purpose of soliciting<br>account passwords or sensitive information from the user. Voice Phishing is a<br>variation of the Phishing social engineering technique where the attack is<br>initiated via a voice call, rather than email. The user is enticed to provide<br>sensitive information by the adversary, who masquerades as a legitimate employee<br>of the alleged organization. Voice Phishing attacks deviate from standard<br>Phishing attacks, in that a user doesn't typically interact with a compromised<br>website to provide sensitive information and instead provides this information<br>verbally. Voice Phishing attacks can also be initiated by either the adversary<br>in the form of a \"cold call\" or by the victim if calling an illegitimate<br>telephone number.",
      "color": "#94ebff",
      "size": 10,
      "label": "Voice Phishing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/656.html",
      "id": "656"
    },
    {
      "Description": "<b>CAPEC-657: Malicious Automated Software Update via Spoofing</b><br>An attackers uses identify or content spoofing to trick a client into performing<br>an automated software update from a malicious source. A malicious automated<br>software update that leverages spoofing can include content or identity spoofing<br>as well as protocol spoofing. Content or identity spoofing attacks can trigger<br>updates in software by embedding scripted mechanisms within a malicious web<br>page, which masquerades as a legitimate update source. Scripting mechanisms<br>communicate with software components and trigger updates from locations<br>specified by the attackers' server. The result is the client believing there is<br>a legitimate software update available but instead downloading a malicious<br>update from the attacker.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Automated Software Update via Spoofing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/657.html",
      "id": "657"
    },
    {
      "Description": "<b>CAPEC-660: Root/Jailbreak Detection Evasion via Hooking</b><br>An adversary forces a non-restricted mobile application to load arbitrary code<br>or code files, via Hooking, with the goal of evading Root/Jailbreak detection.<br>Mobile device users often Root/Jailbreak their devices in order to gain<br>administrative control over the mobile operating system and/or to install<br>third-party mobile applications that are not provided by authorized application<br>stores (e.g. Google Play Store and Apple App Store). Adversaries may further<br>leverage these capabilities to escalate privileges or bypass access control on<br>legitimate applications. Although many mobile applications check if a mobile<br>device is Rooted/Jailbroken prior to authorized use of the application,<br>adversaries may be able to \"hook\" code in order to circumvent these checks.<br>Successfully evading Root/Jailbreak detection allows an adversary to execute<br>administrative commands, obtain confidential data, impersonate legitimate users<br>of the application, and more.",
      "color": "#94ebff",
      "size": 10,
      "label": "Root/Jailbreak Detection Evasion via Hooking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/660.html",
      "id": "660"
    },
    {
      "Description": "<b>CAPEC-661: Root/Jailbreak Detection Evasion via Debugging</b><br>An adversary inserts a debugger into the program entry point of a mobile<br>application to modify the application binary, with the goal of evading<br>Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices<br>in order to gain administrative control over the mobile operating system and/or<br>to install third-party mobile applications that are not provided by authorized<br>application stores (e.g. Google Play Store and Apple App Store).<br>Rooting/Jailbreaking a mobile device also provides users with access to system<br>debuggers and disassemblers, which can be leveraged to exploit applications by<br>dumping the application's memory at runtime in order to remove or bypass<br>signature verification methods. This further allows the adversary to evade<br>Root/Jailbreak detection mechanisms, which can result in execution of<br>administrative commands, obtaining confidential data, impersonating legitimate<br>users of the application, and more.",
      "color": "#94ebff",
      "size": 10,
      "label": "Root/Jailbreak Detection Evasion via Debugging",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/661.html",
      "id": "661"
    },
    {
      "Description": "<b>CAPEC-662: Adversary in the Browser (AiTB)</b><br>An adversary exploits security vulnerabilities or inherent functionalities of a<br>web browser, in order to manipulate traffic between two endpoints.",
      "color": "#75aaff",
      "size": 18,
      "label": "Adversary in the Browser (AiTB)",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/662.html",
      "id": "662"
    },
    {
      "Description": "<b>CAPEC-663: Exploitation of Transient Instruction Execution</b><br>An adversary exploits a hardware design flaw in a CPU implementation of<br>transient instruction execution to expose sensitive data and bypass/subvert<br>access control over restricted resources. Typically, the adversary conducts a<br>covert channel attack to target non-discarded microarchitectural changes caused<br>by transient executions such as speculative execution, branch prediction,<br>instruction pipelining, and/or out-of-order execution. The transient execution<br>results in a series of instructions (gadgets) which construct covert channel and<br>access/transfer the secret data.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploitation of Transient Instruction Execution",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/663.html",
      "id": "663"
    },
    {
      "Description": "<b>CAPEC-664: Server Side Request Forgery</b><br>An adversary exploits improper input validation by submitting maliciously<br>crafted input to a target application running on a server, with the goal of<br>forcing the server to make a request either to itself, to web services running<br>in the server\u2019s internal network, or to external third parties. If successful,<br>the adversary\u2019s request will be made with the server\u2019s privilege level,<br>bypassing its authentication controls. This ultimately allows the adversary to<br>access sensitive data, execute commands on the server\u2019s network, and make<br>external requests with the stolen identity of the server. Server Side Request<br>Forgery attacks differ from Cross Site Request Forgery attacks in that they<br>target the server itself, whereas CSRF attacks exploit an insecure user<br>authentication mechanism to perform unauthorized actions on the user's behalf.",
      "color": "#75aaff",
      "size": 18,
      "label": "Server Side Request Forgery",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/664.html",
      "id": "664"
    },
    {
      "Description": "<b>CAPEC-665: Exploitation of Thunderbolt Protection Flaws</b><br>An adversary leverages a firmware weakness within the Thunderbolt protocol, on a<br>computing device to manipulate Thunderbolt controller firmware in order to<br>exploit vulnerabilities in the implementation of authorization and verification<br>schemes within Thunderbolt protection mechanisms. Upon gaining physical access<br>to a target device, the adversary conducts high-level firmware manipulation of<br>the victim Thunderbolt controller SPI (Serial Peripheral Interface) flash,<br>through the use of a SPI Programing device and an external Thunderbolt device,<br>typically as the target device is booting up. If successful, this allows the<br>adversary to modify memory, subvert authentication mechanisms, spoof identities<br>and content, and extract data and memory from the target device. Currently 7<br>major vulnerabilities exist within Thunderbolt protocol with 9 attack vectors as<br>noted in the Execution Flow.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploitation of Thunderbolt Protection Flaws",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/665.html",
      "id": "665"
    },
    {
      "Description": "<b>CAPEC-666: BlueSmacking</b><br>An adversary uses Bluetooth flooding to transfer large packets to Bluetooth<br>enabled devices over the L2CAP protocol with the goal of creating a DoS. This<br>attack must be carried out within close proximity to a Bluetooth enabled device.",
      "color": "#75aaff",
      "size": 18,
      "label": "BlueSmacking",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/666.html",
      "id": "666"
    },
    {
      "Description": "<b>CAPEC-667: Bluetooth Impersonation AttackS (BIAS)</b><br>An adversary disguises the MAC address of their Bluetooth enabled device to one<br>for which there exists an active and trusted connection and authenticates<br>successfully. The adversary can then perform malicious actions on the target<br>Bluetooth device depending on the target\u2019s capabilities.",
      "color": "#94ebff",
      "size": 10,
      "label": "Bluetooth Impersonation AttackS (BIAS)",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/667.html",
      "id": "667"
    },
    {
      "Description": "<b>CAPEC-668: Key Negotiation of Bluetooth Attack (KNOB)</b><br>An adversary can exploit a flaw in Bluetooth key negotiation allowing them to<br>decrypt information sent between two devices communicating via Bluetooth. The<br>adversary uses an Adversary in the Middle setup to modify packets sent between<br>the two devices during the authentication process, specifically the entropy<br>bits. Knowledge of the number of entropy bits will allow the attacker to easily<br>decrypt information passing over the line of communication.",
      "color": "#75aaff",
      "size": 18,
      "label": "Key Negotiation of Bluetooth Attack (KNOB)",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/668.html",
      "id": "668"
    },
    {
      "Description": "<b>CAPEC-669: Alteration of a Software Update</b><br>An adversary with access to an organization\u2019s software update infrastructure<br>inserts malware into the content of an outgoing update to fielded systems where<br>a wide range of malicious effects are possible. With the same level of access,<br>the adversary can alter a software update to perform specific malicious acts<br>including granting the adversary control over the software\u2019s normal<br>functionality.",
      "color": "#75aaff",
      "size": 18,
      "label": "Alteration of a Software Update",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/669.html",
      "id": "669"
    },
    {
      "Description": "<b>CAPEC-67: String Format Overflow in syslog()</b><br>This attack targets applications and software that uses the syslog() function<br>insecurely. If an application does not explicitely use a format string parameter<br>in a call to syslog(), user input can be placed in the format string parameter<br>leading to a format string injection attack. Adversaries can then inject<br>malicious format string commands into the function call leading to a buffer<br>overflow. There are many reported software vulnerabilities with the root cause<br>being a misuse of the syslog() function.",
      "color": "#94ebff",
      "size": 10,
      "label": "String Format Overflow in syslog()",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/67.html",
      "id": "67"
    },
    {
      "Description": "<b>CAPEC-670: Software Development Tools Maliciously Altered</b><br>An adversary with the ability to alter tools used in a development environment<br>causes software to be developed with maliciously modified tools. Such tools<br>include requirements management and database tools, software design tools,<br>configuration management tools, compilers, system build tools, and software<br>performance testing and load testing tools. The adversary then carries out<br>malicious acts once the software is deployed including malware infection of<br>other systems to support further compromises.",
      "color": "#94ebff",
      "size": 10,
      "label": "Software Development Tools Maliciously Altered",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/670.html",
      "id": "670"
    },
    {
      "Description": "<b>CAPEC-671: Requirements for ASIC Functionality Maliciously Altered</b><br>An adversary with access to functional requirements for an application specific<br>integrated circuit (ASIC), a chip designed/customized for a singular particular<br>use, maliciously alters requirements derived from originating capability needs.<br>In the chip manufacturing process, requirements drive the chip design which,<br>when the chip is fully manufactured, could result in an ASIC which may not meet<br>the user\u2019s needs, contain malicious functionality, or exhibit other anomalous<br>behaviors thereby affecting the intended use of the ASIC.",
      "color": "#94ebff",
      "size": 10,
      "label": "Requirements for ASIC Functionality Maliciously Altered",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/671.html",
      "id": "671"
    },
    {
      "Description": "<b>CAPEC-672: Malicious Code Implanted During Chip Programming</b><br>During the programming step of chip manufacture, an adversary with access and<br>necessary technical skills maliciously alters a chip\u2019s intended program logic to<br>produce an effect intended by the adversary when the fully manufactured chip is<br>deployed and in operational use. Intended effects can include the ability of the<br>adversary to remotely control a host system to carry out malicious acts.",
      "color": "#94ebff",
      "size": 10,
      "label": "Malicious Code Implanted During Chip Programming",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/672.html",
      "id": "672"
    },
    {
      "Description": "<b>CAPEC-673: Developer Signing Maliciously Altered Software</b><br>Software produced by a reputable developer is clandestinely infected with<br>malicious code and then digitally signed by the unsuspecting developer, where<br>the software has been altered via a compromised software development or build<br>process prior to being signed. The receiver or user of the software has no<br>reason to believe that it is anything but legitimate and proceeds to deploy it<br>to organizational systems. This attack differs from CAPEC-206, since the<br>developer is inadvertently signing malicious code they believe to be legitimate<br>and which they are unware of any malicious modifications.",
      "color": "#94ebff",
      "size": 10,
      "label": "Developer Signing Maliciously Altered Software",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/673.html",
      "id": "673"
    },
    {
      "Description": "<b>CAPEC-674: Design for FPGA Maliciously Altered</b><br>An adversary alters the functionality of a field-programmable gate array (FPGA)<br>by causing an FPGA configuration memory chip reload in order to introduce a<br>malicious function that could result in the FPGA performing or enabling<br>malicious functions on a host system. Prior to the memory chip reload, the<br>adversary alters the program for the FPGA by adding a function to impact system<br>operation.",
      "color": "#94ebff",
      "size": 10,
      "label": "Design for FPGA Maliciously Altered",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/674.html",
      "id": "674"
    },
    {
      "Description": "<b>CAPEC-675: Retrieve Data from Decommissioned Devices</b><br>An adversary obtains decommissioned, recycled, or discarded systems and devices<br>that can include an organization\u2019s intellectual property, employee data, and<br>other types of controlled information. Systems and devices that have reached the<br>end of their lifecycles may be subject to recycle or disposal where they can be<br>exposed to adversarial attempts to retrieve information from internal memory<br>chips and storage devices that are part of the system.",
      "color": "#75aaff",
      "size": 18,
      "label": "Retrieve Data from Decommissioned Devices",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/675.html",
      "id": "675"
    },
    {
      "Description": "<b>CAPEC-676: NoSQL Injection</b><br>An adversary targets software that constructs NoSQL statements based on user<br>input or with parameters vulnerable to operator replacement in order to achieve<br>a variety of technical impacts such as escalating privileges, bypassing<br>authentication, and/or executing code.",
      "color": "#75aaff",
      "size": 18,
      "label": "NoSQL Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/676.html",
      "id": "676"
    },
    {
      "Description": "<b>CAPEC-677: Server Motherboard Compromise</b><br>Malware is inserted in a server motherboard (e.g., in the flash memory) in order<br>to alter server functionality from that intended. The development environment or<br>hardware/software support activity environment is susceptible to an adversary<br>inserting malicious software into hardware components during development or<br>update.",
      "color": "#94ebff",
      "size": 10,
      "label": "Server Motherboard Compromise",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/677.html",
      "id": "677"
    },
    {
      "Description": "<b>CAPEC-678: System Build Data Maliciously Altered</b><br>During the system build process, the system is deliberately misconfigured by the<br>alteration of the build data. Access to system configuration data files and<br>build processes is susceptible to deliberate misconfiguration of the system.",
      "color": "#94ebff",
      "size": 10,
      "label": "System Build Data Maliciously Altered",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/678.html",
      "id": "678"
    },
    {
      "Description": "<b>CAPEC-679: Exploitation of Improperly Configured or Implemented Memory Protections</b><br>An adversary takes advantage of missing or incorrectly configured access control<br>within memory to read/write data or inject malicious code into said memory.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploitation of Improperly Configured or Implemented Memory Protections",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/679.html",
      "id": "679"
    },
    {
      "Description": "<b>CAPEC-68: Subvert Code-signing Facilities</b><br>Many languages use code signing facilities to vouch for code's identity and to<br>thus tie code to its assigned privileges within an environment. Subverting this<br>mechanism can be instrumental in an attacker escalating privilege. Any means of<br>subverting the way that a virtual machine enforces code signing classifies for<br>this style of attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Subvert Code-signing Facilities",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/68.html",
      "id": "68"
    },
    {
      "Description": "<b>CAPEC-680: Exploitation of Improperly Controlled Registers</b><br>An adversary exploits missing or incorrectly configured access control within<br>registers to read/write data that is not meant to be obtained or modified by a<br>user.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploitation of Improperly Controlled Registers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/680.html",
      "id": "680"
    },
    {
      "Description": "<b>CAPEC-681: Exploitation of Improperly Controlled Hardware Security Identifiers</b><br>An adversary takes advantage of missing or incorrectly configured security<br>identifiers (e.g., tokens), which are used for access control within a<br>System-on-Chip (SoC), to read/write data or execute a given action.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploitation of Improperly Controlled Hardware Security Identifiers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/681.html",
      "id": "681"
    },
    {
      "Description": "<b>CAPEC-682: Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities</b><br>An adversary may exploit vulnerable code (i.e., firmware or ROM) that is<br>unpatchable. Unpatchable devices exist due to manufacturers intentionally or<br>inadvertently designing devices incapable of updating their software.<br>Additionally, with updatable devices, the manufacturer may decide not to support<br>the device and stop making updates to their software.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/682.html",
      "id": "682"
    },
    {
      "Description": "<b>CAPEC-69: Target Programs with Elevated Privileges</b><br>This attack targets programs running with elevated privileges. The adversary<br>tries to leverage a vulnerability in the running program and get arbitrary code<br>to execute with elevated privileges.",
      "color": "#75aaff",
      "size": 18,
      "label": "Target Programs with Elevated Privileges",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/69.html",
      "id": "69"
    },
    {
      "Description": "<b>CAPEC-690: Metadata Spoofing</b><br>An adversary alters the metadata of a resource (e.g., file, directory,<br>repository, etc.) to present a malicious resource as legitimate/credible.",
      "color": "#2176ff",
      "size": 30,
      "label": "Metadata Spoofing",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/690.html",
      "id": "690"
    },
    {
      "Description": "<b>CAPEC-691: Spoof Open-Source Software Metadata</b><br>An adversary spoofs open-source software metadata in an attempt to masquerade<br>malicious software as popular, maintained, and trusted.",
      "color": "#75aaff",
      "size": 18,
      "label": "Spoof Open-Source Software Metadata",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/691.html",
      "id": "691"
    },
    {
      "Description": "<b>CAPEC-692: Spoof Version Control System Commit Metadata</b><br>An adversary spoofs metadata pertaining to a Version Control System (VCS) (e.g.,<br>Git) repository's commits to deceive users into believing that the maliciously<br>provided software is frequently maintained and originates from a trusted source.",
      "color": "#94ebff",
      "size": 10,
      "label": "Spoof Version Control System Commit Metadata",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/692.html",
      "id": "692"
    },
    {
      "Description": "<b>CAPEC-693: StarJacking</b><br>An adversary spoofs software popularity metadata to deceive users into believing<br>that a maliciously provided package is widely used and originates from a trusted<br>source.",
      "color": "#94ebff",
      "size": 10,
      "label": "StarJacking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/693.html",
      "id": "693"
    },
    {
      "Description": "<b>CAPEC-694: System Location Discovery</b><br>An adversary collects information about the target system in an attempt to<br>identify the system's geographical location. Information gathered could include<br>keyboard layout, system language, and timezone. This information may benefit an<br>adversary in confirming the desired target and/or tailoring further attacks.",
      "color": "#75aaff",
      "size": 18,
      "label": "System Location Discovery",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/694.html",
      "id": "694"
    },
    {
      "Description": "<b>CAPEC-695: Repo Jacking</b><br>An adversary takes advantage of the redirect property of directly linked Version<br>Control System (VCS) repositories to trick users into incorporating malicious<br>code into their applications.",
      "color": "#94ebff",
      "size": 10,
      "label": "Repo Jacking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/695.html",
      "id": "695"
    },
    {
      "Description": "<b>CAPEC-696: Load Value Injection</b><br>An adversary exploits a hardware design flaw in a CPU implementation of<br>transient instruction execution in which a faulting or assisted load instruction<br>transiently forwards adversary-controlled data from microarchitectural buffers.<br>By inducing a page fault or microcode assist during victim execution, an<br>adversary can force legitimate victim execution to operate on the<br>adversary-controlled data which is stored in the microarchitectural buffers. The<br>adversary can then use existing code gadgets and side channel analysis to<br>discover victim secrets that have not yet been flushed from microarchitectural<br>state or hijack the system control flow.",
      "color": "#94ebff",
      "size": 10,
      "label": "Load Value Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/696.html",
      "id": "696"
    },
    {
      "Description": "<b>CAPEC-697: DHCP Spoofing</b><br>An adversary masquerades as a legitimate Dynamic Host Configuration Protocol<br>(DHCP) server by spoofing DHCP traffic, with the goal of redirecting network<br>traffic or denying service to DHCP.",
      "color": "#75aaff",
      "size": 18,
      "label": "DHCP Spoofing",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/697.html",
      "id": "697"
    },
    {
      "Description": "<b>CAPEC-698: Install Malicious Extension</b><br>An adversary directly installs or tricks a user into installing a malicious<br>extension into existing trusted software, with the goal of achieving a variety<br>of negative technical impacts.",
      "color": "#94ebff",
      "size": 10,
      "label": "Install Malicious Extension",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/698.html",
      "id": "698"
    },
    {
      "Description": "<b>CAPEC-699: Eavesdropping on a Monitor</b><br>An Adversary can eavesdrop on the content of an external monitor through the air<br>without modifying any cable or installing software, just capturing this signal<br>emitted by the cable or video port, with this the attacker will be able to<br>impact the confidentiality of the data without being detected by traditional<br>security tools",
      "color": "#2176ff",
      "size": 30,
      "label": "Eavesdropping on a Monitor",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/699.html",
      "id": "699"
    },
    {
      "Description": "<b>CAPEC-7: Blind SQL Injection</b><br>Blind SQL Injection results from an insufficient mitigation for SQL Injection.<br>Although suppressing database error messages are considered best practice, the<br>suppression alone is not sufficient to prevent SQL Injection. Blind SQL<br>Injection is a form of SQL Injection that overcomes the lack of error messages.<br>Without the error messages that facilitate SQL Injection, the adversary<br>constructs input strings that probe the target through simple Boolean SQL<br>expressions. The adversary can determine if the syntax and structure of the<br>injection was successful based on whether the query was executed or not. Applied<br>iteratively, the adversary determines how and where the target is vulnerable to<br>SQL Injection.",
      "color": "#94ebff",
      "size": 10,
      "label": "Blind SQL Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/7.html",
      "id": "7"
    },
    {
      "Description": "<b>CAPEC-70: Try Common or Default Usernames and Passwords</b><br>An adversary may try certain common or default usernames and passwords to gain<br>access into the system and perform unauthorized actions. An adversary may try an<br>intelligent brute force using empty passwords, known vendor default credentials,<br>as well as a dictionary of common usernames and passwords. Many vendor products<br>come preconfigured with default (and thus well-known) usernames and passwords<br>that should be deleted prior to usage in a production environment. It is a<br>common mistake to forget to remove these default login credentials. Another<br>problem is that users would pick very simple (common) passwords (e.g. \"secret\"<br>or \"password\") that make it easier for the attacker to gain access to the system<br>compared to using a brute force attack or even a dictionary attack using a full<br>dictionary.",
      "color": "#94ebff",
      "size": 10,
      "label": "Try Common or Default Usernames and Passwords",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/70.html",
      "id": "70"
    },
    {
      "Description": "<b>CAPEC-700: Network Boundary Bridging</b><br>An adversary which has gained elevated access to network boundary devices may<br>use these devices to create a channel to bridge trusted and untrusted networks.<br>Boundary devices do not necessarily have to be on the network\u2019s edge, but rather<br>must serve to segment portions of the target network the adversary wishes to<br>cross into.",
      "color": "#75aaff",
      "size": 18,
      "label": "Network Boundary Bridging",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/700.html",
      "id": "700"
    },
    {
      "Description": "<b>CAPEC-701: Browser in the Middle (BiTM)</b><br>An adversary exploits the inherent functionalities of a web browser, in order to<br>establish an unnoticed remote desktop connection in the victim's browser to the<br>adversary's system. The adversary must deploy a web client with a remote desktop<br>session that the victim can access.",
      "color": "#75aaff",
      "size": 18,
      "label": "Browser in the Middle (BiTM)",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/701.html",
      "id": "701"
    },
    {
      "Description": "<b>CAPEC-702: Exploiting Incorrect Chaining or Granularity of Hardware Debug Components</b><br>An adversary exploits incorrect chaining or granularity of hardware debug<br>components in order to gain unauthorized access to debug functionality on a<br>chip. This happens when authorization is not checked on a per function basis and<br>is assumed for a chain or group of debug functionality.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/702.html",
      "id": "702"
    },
    {
      "Description": "<b>CAPEC-71: Using Unicode Encoding to Bypass Validation Logic</b><br>An attacker may provide a Unicode string to a system component that is not<br>Unicode aware and use that to circumvent the filter or cause the classifying<br>mechanism to fail to properly understanding the request. That may allow the<br>attacker to slip malicious data past the content filter and/or possibly cause<br>the application to route the request incorrectly.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Unicode Encoding to Bypass Validation Logic",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/71.html",
      "id": "71"
    },
    {
      "Description": "<b>CAPEC-72: URL Encoding</b><br>This attack targets the encoding of the URL. An adversary can take advantage of<br>the multiple way of encoding an URL and abuse the interpretation of the URL.",
      "color": "#94ebff",
      "size": 10,
      "label": "URL Encoding",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/72.html",
      "id": "72"
    },
    {
      "Description": "<b>CAPEC-73: User-Controlled Filename</b><br>An attack of this type involves an adversary inserting malicious characters<br>(such as a XSS redirection) into a filename, directly or indirectly that is then<br>used by the target software to generate HTML text or other potentially<br>executable content. Many websites rely on user-generated content and dynamically<br>build resources like files, filenames, and URL links directly from user supplied<br>data. In this attack pattern, the attacker uploads code that can execute in the<br>client browser and/or redirect the client browser to a site that the attacker<br>owns. All XSS attack payload variants can be used to pass and exploit these<br>vulnerabilities.",
      "color": "#75aaff",
      "size": 18,
      "label": "User-Controlled Filename",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/73.html",
      "id": "73"
    },
    {
      "Description": "<b>CAPEC-75: Manipulating Writeable Configuration Files</b><br>Generally these are manually edited files that are not in the preview of the<br>system administrators, any ability on the attackers' behalf to modify these<br>files, for example in a CVS repository, gives unauthorized access directly to<br>the application, the same as authorized users.",
      "color": "#75aaff",
      "size": 18,
      "label": "Manipulating Writeable Configuration Files",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/75.html",
      "id": "75"
    },
    {
      "Description": "<b>CAPEC-76: Manipulating Web Input to File System Calls</b><br>An attacker manipulates inputs to the target software which the target software<br>passes to file system calls in the OS. The goal is to gain access to, and<br>perhaps modify, areas of the file system that the target software did not intend<br>to be accessible.",
      "color": "#94ebff",
      "size": 10,
      "label": "Manipulating Web Input to File System Calls",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/76.html",
      "id": "76"
    },
    {
      "Description": "<b>CAPEC-78: Using Escaped Slashes in Alternate Encoding</b><br>This attack targets the use of the backslash in alternate encoding. An adversary<br>can provide a backslash as a leading character and causes a parser to believe<br>that the next character is special. This is called an escape. By using that<br>trick, the adversary tries to exploit alternate ways to encode the same<br>character which leads to filter problems and opens avenues to attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Escaped Slashes in Alternate Encoding",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/78.html",
      "id": "78"
    },
    {
      "Description": "<b>CAPEC-79: Using Slashes in Alternate Encoding</b><br>This attack targets the encoding of the Slash characters. An adversary would try<br>to exploit common filtering problems related to the use of the slashes<br>characters to gain access to resources on the target host. Directory-driven<br>systems, such as file systems and databases, typically use the slash character<br>to indicate traversal between directories or other container components. For<br>murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a<br>backslash, whereas the UNIX world typically makes use of the forward slash. The<br>schizophrenic result is that many MS-based systems are required to understand<br>both forms of the slash. This gives the adversary many opportunities to discover<br>and abuse a number of common filtering problems. The goal of this pattern is to<br>discover server software that only applies filters to one version, but not the<br>other.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Slashes in Alternate Encoding",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/79.html",
      "id": "79"
    },
    {
      "Description": "<b>CAPEC-8: Buffer Overflow in an API Call</b><br>This attack targets libraries or shared code modules which are vulnerable to<br>buffer overflow attacks. An adversary who has knowledge of known vulnerable<br>libraries or shared code can easily target software that makes use of these<br>libraries. All clients that make use of the code library thus become vulnerable<br>by association. This has a very broad effect on security across a system,<br>usually affecting more than one software process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow in an API Call",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/8.html",
      "id": "8"
    },
    {
      "Description": "<b>CAPEC-80: Using UTF-8 Encoding to Bypass Validation Logic</b><br>This attack is a specific variation on leveraging alternate encodings to bypass<br>validation logic. This attack leverages the possibility to encode potentially<br>harmful input in UTF-8 and submit it to applications not expecting or effective<br>at validating this encoding standard making input filtering difficult. UTF-8<br>(8-bit UCS/Unicode Transformation Format) is a variable-length character<br>encoding for Unicode. Legal UTF-8 characters are one to four bytes long.<br>However, early version of the UTF-8 specification got some entries wrong (in<br>some cases it permitted overlong characters). UTF-8 encoders are supposed to use<br>the \"shortest possible\" encoding, but naive decoders may accept encodings that<br>are longer than necessary. According to the RFC 3629, a particularly subtle form<br>of this attack can be carried out against a parser which performs<br>security-critical validity checks against the UTF-8 encoded form of its input,<br>but interprets certain illegal octet sequences as characters.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using UTF-8 Encoding to Bypass Validation Logic",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/80.html",
      "id": "80"
    },
    {
      "Description": "<b>CAPEC-81: Web Server Logs Tampering</b><br>Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise<br>tampering with the contents of web logs typically for the purposes of masking<br>other malicious behavior. Additionally, writing malicious data to log files may<br>target jobs, filters, reports, and other agents that process the logs in an<br>asynchronous attack pattern. This pattern of attack is similar to \"Log<br>Injection-Tampering-Forging\" except that in this case, the attack is targeting<br>the logs of the web server and not the application.",
      "color": "#94ebff",
      "size": 10,
      "label": "Web Server Logs Tampering",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/81.html",
      "id": "81"
    },
    {
      "Description": "<b>CAPEC-83: XPath Injection</b><br>An attacker can craft special user-controllable input consisting of XPath<br>expressions to inject the XML database and bypass authentication or glean<br>information that they normally would not be able to. XPath Injection enables an<br>attacker to talk directly to the XML database, thus bypassing the application<br>completely. XPath Injection results from the failure of an application to<br>properly sanitize input used as part of dynamic XPath expressions used to query<br>an XML database.",
      "color": "#94ebff",
      "size": 10,
      "label": "XPath Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/83.html",
      "id": "83"
    },
    {
      "Description": "<b>CAPEC-84: XQuery Injection</b><br>This attack utilizes XQuery to probe and attack server systems; in a similar<br>manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS,<br>XQuery Injection uses improperly validated data that is passed to XQuery<br>commands to traverse and execute commands that the XQuery routines have access<br>to. XQuery injection can be used to enumerate elements on the victim's<br>environment, inject commands to the local host, or execute queries to remote<br>files and data sources.",
      "color": "#94ebff",
      "size": 10,
      "label": "XQuery Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/84.html",
      "id": "84"
    },
    {
      "Description": "<b>CAPEC-85: AJAX Footprinting</b><br>This attack utilizes the frequent client-server roundtrips in Ajax conversation<br>to scan a system. While Ajax does not open up new vulnerabilities per se, it<br>does optimize them from an attacker point of view. A common first step for an<br>attacker is to footprint the target environment to understand what attacks will<br>work. Since footprinting relies on enumeration, the conversational pattern of<br>rapid, multiple requests and responses that are typical in Ajax applications<br>enable an attacker to look for many vulnerabilities, well-known ports, network<br>locations and so on. The knowledge gained through Ajax fingerprinting can be<br>used to support other attacks, such as XSS.",
      "color": "#94ebff",
      "size": 10,
      "label": "AJAX Footprinting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/85.html",
      "id": "85"
    },
    {
      "Description": "<b>CAPEC-86: XSS Through HTTP Headers</b><br>An adversary exploits web applications that generate web content, such as links<br>in a HTML page, based on unvalidated or improperly validated data submitted by<br>other actors. XSS in HTTP Headers attacks target the HTTP headers which are<br>hidden from most users and may not be validated by web applications.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Through HTTP Headers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/86.html",
      "id": "86"
    },
    {
      "Description": "<b>CAPEC-87: Forceful Browsing</b><br>An attacker employs forceful browsing (direct URL entry) to access portions of a<br>website that are otherwise unreachable. Usually, a front controller or similar<br>design pattern is employed to protect access to portions of a web application.<br>Forceful browsing enables an attacker to access information, perform privileged<br>operations and otherwise reach sections of the web application that have been<br>improperly protected.",
      "color": "#75aaff",
      "size": 18,
      "label": "Forceful Browsing",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/87.html",
      "id": "87"
    },
    {
      "Description": "<b>CAPEC-88: OS Command Injection</b><br>In this type of an attack, an adversary injects operating system commands into<br>existing application functions. An application that uses untrusted input to<br>build command strings is vulnerable. An adversary can leverage OS command<br>injection in an application to elevate privileges, execute arbitrary commands<br>and compromise the underlying operating system.",
      "color": "#75aaff",
      "size": 18,
      "label": "OS Command Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/88.html",
      "id": "88"
    },
    {
      "Description": "<b>CAPEC-89: Pharming</b><br>A pharming attack occurs when the victim is fooled into entering sensitive data<br>into supposedly trusted locations, such as an online bank site or a trading<br>platform. An attacker can impersonate these supposedly trusted sites and have<br>the victim be directed to their site rather than the originally intended one.<br>Pharming does not require script injection or clicking on malicious links for<br>the attack to succeed.",
      "color": "#75aaff",
      "size": 18,
      "label": "Pharming",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/89.html",
      "id": "89"
    },
    {
      "Description": "<b>CAPEC-9: Buffer Overflow in Local Command-Line Utilities</b><br>This attack targets command-line utilities available in a number of shells. An<br>adversary can leverage a vulnerability found in a command-line utility to<br>escalate privilege to root.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow in Local Command-Line Utilities",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/9.html",
      "id": "9"
    },
    {
      "Description": "<b>CAPEC-90: Reflection Attack in Authentication Protocol</b><br>An adversary can abuse an authentication protocol susceptible to reflection<br>attack in order to defeat it. Doing so allows the adversary illegitimate access<br>to the target system, without possessing the requisite credentials. Reflection<br>attacks are of great concern to authentication protocols that rely on a<br>challenge-handshake or similar mechanism. An adversary can impersonate a<br>legitimate user and can gain illegitimate access to the system by successfully<br>mounting a reflection attack during authentication.",
      "color": "#75aaff",
      "size": 18,
      "label": "Reflection Attack in Authentication Protocol",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/90.html",
      "id": "90"
    },
    {
      "Description": "<b>CAPEC-92: Forced Integer Overflow</b><br>This attack forces an integer variable to go out of range. The integer variable<br>is often used as an offset such as size of memory allocation or similarly. The<br>attacker would typically control the value of such variable and try to get it<br>out of range. For instance the integer in question is incremented past the<br>maximum possible value, it may wrap to become a very small, or negative number,<br>therefore providing a very incorrect value which can lead to unexpected<br>behavior. At worst the attacker can execute arbitrary code.",
      "color": "#94ebff",
      "size": 10,
      "label": "Forced Integer Overflow",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/92.html",
      "id": "92"
    },
    {
      "Description": "<b>CAPEC-93: Log Injection-Tampering-Forging</b><br>This attack targets the log files of the target host. The attacker injects,<br>manipulates or forges malicious log entries in the log file, allowing them to<br>mislead a log audit, cover traces of attack, or perform other malicious actions.<br>The target host is not properly controlling log access. As a result tainted data<br>is resulting in the log files leading to a failure in accountability,<br>non-repudiation and incident forensics capability.",
      "color": "#94ebff",
      "size": 10,
      "label": "Log Injection-Tampering-Forging",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/93.html",
      "id": "93"
    },
    {
      "Description": "<b>CAPEC-95: WSDL Scanning</b><br>This attack targets the WSDL interface made available by a web service. The<br>attacker may scan the WSDL interface to reveal sensitive information about<br>invocation patterns, underlying technology implementations and associated<br>vulnerabilities. This type of probing is carried out to perform more serious<br>attacks (e.g. parameter tampering, malicious content injection, command<br>injection, etc.). WSDL files provide detailed information about the services<br>ports and bindings available to consumers. For instance, the attacker can submit<br>special characters or malicious content to the Web service and can cause a<br>denial of service condition or illegal access to database records. In addition,<br>the attacker may try to guess other private methods by using the information<br>provided in the WSDL files.",
      "color": "#94ebff",
      "size": 10,
      "label": "WSDL Scanning",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/95.html",
      "id": "95"
    },
    {
      "Description": "<b>CAPEC-96: Block Access to Libraries</b><br>An application typically makes calls to functions that are a part of libraries<br>external to the application. These libraries may be part of the operating system<br>or they may be third party libraries. It is possible that the application does<br>not handle situations properly where access to these libraries has been blocked.<br>Depending on the error handling within the application, blocked access to<br>libraries may leave the system in an insecure state that could be leveraged by<br>an attacker.",
      "color": "#94ebff",
      "size": 10,
      "label": "Block Access to Libraries",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/96.html",
      "id": "96"
    }
  ],
  "links": [
    {
      "source": "1",
      "target": "122"
    },
    {
      "source": "10",
      "target": "100"
    },
    {
      "source": "100",
      "target": "123"
    },
    {
      "source": "101",
      "target": "253"
    },
    {
      "source": "253",
      "target": "175"
    },
    {
      "source": "102",
      "target": "593"
    },
    {
      "source": "593",
      "target": "21"
    },
    {
      "source": "103",
      "target": "173"
    },
    {
      "source": "104",
      "target": "233"
    },
    {
      "source": "105",
      "target": "220"
    },
    {
      "source": "220",
      "target": "272"
    },
    {
      "source": "107",
      "target": "593"
    },
    {
      "source": "108",
      "target": "66"
    },
    {
      "source": "66",
      "target": "248"
    },
    {
      "source": "109",
      "target": "66"
    },
    {
      "source": "11",
      "target": "635"
    },
    {
      "source": "635",
      "target": "165"
    },
    {
      "source": "110",
      "target": "66"
    },
    {
      "source": "111",
      "target": "212"
    },
    {
      "source": "12",
      "target": "216"
    },
    {
      "source": "120",
      "target": "267"
    },
    {
      "source": "267",
      "target": "153"
    },
    {
      "source": "121",
      "target": "113"
    },
    {
      "source": "126",
      "target": "153"
    },
    {
      "source": "127",
      "target": "54"
    },
    {
      "source": "54",
      "target": "116"
    },
    {
      "source": "128",
      "target": "153"
    },
    {
      "source": "13",
      "target": "77"
    },
    {
      "source": "77",
      "target": "22"
    },
    {
      "source": "132",
      "target": "159"
    },
    {
      "source": "159",
      "target": "154"
    },
    {
      "source": "133",
      "target": "113"
    },
    {
      "source": "134",
      "target": "137"
    },
    {
      "source": "135",
      "target": "137"
    },
    {
      "source": "136",
      "target": "248"
    },
    {
      "source": "138",
      "target": "137"
    },
    {
      "source": "139",
      "target": "126"
    },
    {
      "source": "14",
      "target": "100"
    },
    {
      "source": "140",
      "target": "74"
    },
    {
      "source": "141",
      "target": "161"
    },
    {
      "source": "142",
      "target": "141"
    },
    {
      "source": "143",
      "target": "150"
    },
    {
      "source": "150",
      "target": "116"
    },
    {
      "source": "144",
      "target": "150"
    },
    {
      "source": "145",
      "target": "148"
    },
    {
      "source": "146",
      "target": "271"
    },
    {
      "source": "271",
      "target": "176"
    },
    {
      "source": "147",
      "target": "528"
    },
    {
      "source": "528",
      "target": "125"
    },
    {
      "source": "149",
      "target": "497"
    },
    {
      "source": "497",
      "target": "169"
    },
    {
      "source": "15",
      "target": "137"
    },
    {
      "source": "155",
      "target": "150"
    },
    {
      "source": "157",
      "target": "117"
    },
    {
      "source": "158",
      "target": "157"
    },
    {
      "source": "16",
      "target": "49"
    },
    {
      "source": "49",
      "target": "112"
    },
    {
      "source": "160",
      "target": "113"
    },
    {
      "source": "162",
      "target": "77"
    },
    {
      "source": "163",
      "target": "98"
    },
    {
      "source": "98",
      "target": "151"
    },
    {
      "source": "164",
      "target": "98"
    },
    {
      "source": "166",
      "target": "161"
    },
    {
      "source": "167",
      "target": "188"
    },
    {
      "source": "168",
      "target": "636"
    },
    {
      "source": "636",
      "target": "165"
    },
    {
      "source": "17",
      "target": "122"
    },
    {
      "source": "170",
      "target": "541"
    },
    {
      "source": "541",
      "target": "224"
    },
    {
      "source": "174",
      "target": "182"
    },
    {
      "source": "182",
      "target": "137"
    },
    {
      "source": "177",
      "target": "17"
    },
    {
      "source": "178",
      "target": "182"
    },
    {
      "source": "179",
      "target": "554"
    },
    {
      "source": "18",
      "target": "591"
    },
    {
      "source": "18",
      "target": "592"
    },
    {
      "source": "18",
      "target": "588"
    },
    {
      "source": "591",
      "target": "63"
    },
    {
      "source": "592",
      "target": "63"
    },
    {
      "source": "588",
      "target": "63"
    },
    {
      "source": "180",
      "target": "122"
    },
    {
      "source": "181",
      "target": "103"
    },
    {
      "source": "183",
      "target": "248"
    },
    {
      "source": "185",
      "target": "184"
    },
    {
      "source": "186",
      "target": "184"
    },
    {
      "source": "187",
      "target": "186"
    },
    {
      "source": "189",
      "target": "188"
    },
    {
      "source": "19",
      "target": "242"
    },
    {
      "source": "190",
      "target": "167"
    },
    {
      "source": "191",
      "target": "167"
    },
    {
      "source": "193",
      "target": "253"
    },
    {
      "source": "194",
      "target": "151"
    },
    {
      "source": "195",
      "target": "151"
    },
    {
      "source": "196",
      "target": "21"
    },
    {
      "source": "197",
      "target": "230"
    },
    {
      "source": "230",
      "target": "130"
    },
    {
      "source": "198",
      "target": "591"
    },
    {
      "source": "198",
      "target": "592"
    },
    {
      "source": "198",
      "target": "588"
    },
    {
      "source": "199",
      "target": "591"
    },
    {
      "source": "199",
      "target": "592"
    },
    {
      "source": "199",
      "target": "588"
    },
    {
      "source": "2",
      "target": "212"
    },
    {
      "source": "20",
      "target": "112"
    },
    {
      "source": "200",
      "target": "207"
    },
    {
      "source": "207",
      "target": "22"
    },
    {
      "source": "201",
      "target": "122"
    },
    {
      "source": "201",
      "target": "278"
    },
    {
      "source": "278",
      "target": "272"
    },
    {
      "source": "202",
      "target": "22"
    },
    {
      "source": "203",
      "target": "176"
    },
    {
      "source": "204",
      "target": "167"
    },
    {
      "source": "206",
      "target": "444"
    },
    {
      "source": "444",
      "target": "438"
    },
    {
      "source": "208",
      "target": "207"
    },
    {
      "source": "209",
      "target": "592"
    },
    {
      "source": "215",
      "target": "54"
    },
    {
      "source": "215",
      "target": "28"
    },
    {
      "source": "217",
      "target": "216"
    },
    {
      "source": "218",
      "target": "148"
    },
    {
      "source": "219",
      "target": "94"
    },
    {
      "source": "221",
      "target": "231"
    },
    {
      "source": "221",
      "target": "278"
    },
    {
      "source": "231",
      "target": "130"
    },
    {
      "source": "222",
      "target": "103"
    },
    {
      "source": "226",
      "target": "196"
    },
    {
      "source": "228",
      "target": "250"
    },
    {
      "source": "250",
      "target": "248"
    },
    {
      "source": "229",
      "target": "231"
    },
    {
      "source": "23",
      "target": "242"
    },
    {
      "source": "234",
      "target": "233"
    },
    {
      "source": "237",
      "target": "480"
    },
    {
      "source": "480",
      "target": "115"
    },
    {
      "source": "24",
      "target": "100"
    },
    {
      "source": "243",
      "target": "591"
    },
    {
      "source": "243",
      "target": "592"
    },
    {
      "source": "243",
      "target": "588"
    },
    {
      "source": "244",
      "target": "591"
    },
    {
      "source": "244",
      "target": "592"
    },
    {
      "source": "244",
      "target": "588"
    },
    {
      "source": "245",
      "target": "591"
    },
    {
      "source": "245",
      "target": "592"
    },
    {
      "source": "245",
      "target": "588"
    },
    {
      "source": "247",
      "target": "591"
    },
    {
      "source": "247",
      "target": "592"
    },
    {
      "source": "247",
      "target": "588"
    },
    {
      "source": "251",
      "target": "175"
    },
    {
      "source": "252",
      "target": "251"
    },
    {
      "source": "256",
      "target": "100"
    },
    {
      "source": "261",
      "target": "54"
    },
    {
      "source": "263",
      "target": "17"
    },
    {
      "source": "268",
      "target": "161"
    },
    {
      "source": "27",
      "target": "29"
    },
    {
      "source": "29",
      "target": "26"
    },
    {
      "source": "270",
      "target": "203"
    },
    {
      "source": "273",
      "target": "220"
    },
    {
      "source": "274",
      "target": "220"
    },
    {
      "source": "275",
      "target": "194"
    },
    {
      "source": "276",
      "target": "272"
    },
    {
      "source": "277",
      "target": "272"
    },
    {
      "source": "279",
      "target": "278"
    },
    {
      "source": "285",
      "target": "292"
    },
    {
      "source": "292",
      "target": "169"
    },
    {
      "source": "287",
      "target": "300"
    },
    {
      "source": "300",
      "target": "169"
    },
    {
      "source": "290",
      "target": "309"
    },
    {
      "source": "309",
      "target": "169"
    },
    {
      "source": "291",
      "target": "309"
    },
    {
      "source": "293",
      "target": "309"
    },
    {
      "source": "294",
      "target": "292"
    },
    {
      "source": "295",
      "target": "292"
    },
    {
      "source": "296",
      "target": "292"
    },
    {
      "source": "297",
      "target": "292"
    },
    {
      "source": "298",
      "target": "292"
    },
    {
      "source": "299",
      "target": "292"
    },
    {
      "source": "3",
      "target": "267"
    },
    {
      "source": "30",
      "target": "233"
    },
    {
      "source": "301",
      "target": "300"
    },
    {
      "source": "302",
      "target": "300"
    },
    {
      "source": "303",
      "target": "300"
    },
    {
      "source": "304",
      "target": "300"
    },
    {
      "source": "305",
      "target": "300"
    },
    {
      "source": "306",
      "target": "300"
    },
    {
      "source": "307",
      "target": "300"
    },
    {
      "source": "308",
      "target": "300"
    },
    {
      "source": "31",
      "target": "39"
    },
    {
      "source": "31",
      "target": "157"
    },
    {
      "source": "39",
      "target": "22"
    },
    {
      "source": "310",
      "target": "541"
    },
    {
      "source": "312",
      "target": "224"
    },
    {
      "source": "313",
      "target": "224"
    },
    {
      "source": "317",
      "target": "312"
    },
    {
      "source": "318",
      "target": "312"
    },
    {
      "source": "319",
      "target": "312"
    },
    {
      "source": "32",
      "target": "591"
    },
    {
      "source": "32",
      "target": "588"
    },
    {
      "source": "32",
      "target": "592"
    },
    {
      "source": "320",
      "target": "312"
    },
    {
      "source": "321",
      "target": "312"
    },
    {
      "source": "322",
      "target": "312"
    },
    {
      "source": "323",
      "target": "312"
    },
    {
      "source": "324",
      "target": "312"
    },
    {
      "source": "325",
      "target": "312"
    },
    {
      "source": "326",
      "target": "312"
    },
    {
      "source": "327",
      "target": "312"
    },
    {
      "source": "328",
      "target": "312"
    },
    {
      "source": "329",
      "target": "312"
    },
    {
      "source": "33",
      "target": "220"
    },
    {
      "source": "330",
      "target": "312"
    },
    {
      "source": "331",
      "target": "312"
    },
    {
      "source": "332",
      "target": "312"
    },
    {
      "source": "34",
      "target": "220"
    },
    {
      "source": "35",
      "target": "636"
    },
    {
      "source": "36",
      "target": "113"
    },
    {
      "source": "37",
      "target": "167"
    },
    {
      "source": "38",
      "target": "159"
    },
    {
      "source": "383",
      "target": "407"
    },
    {
      "source": "407",
      "target": "416"
    },
    {
      "source": "407",
      "target": "410"
    },
    {
      "source": "384",
      "target": "94"
    },
    {
      "source": "385",
      "target": "384"
    },
    {
      "source": "386",
      "target": "94"
    },
    {
      "source": "387",
      "target": "386"
    },
    {
      "source": "388",
      "target": "386"
    },
    {
      "source": "389",
      "target": "384"
    },
    {
      "source": "391",
      "target": "390"
    },
    {
      "source": "392",
      "target": "391"
    },
    {
      "source": "393",
      "target": "391"
    },
    {
      "source": "394",
      "target": "391"
    },
    {
      "source": "395",
      "target": "390"
    },
    {
      "source": "397",
      "target": "395"
    },
    {
      "source": "398",
      "target": "395"
    },
    {
      "source": "399",
      "target": "395"
    },
    {
      "source": "4",
      "target": "267"
    },
    {
      "source": "40",
      "target": "248"
    },
    {
      "source": "400",
      "target": "395"
    },
    {
      "source": "401",
      "target": "440"
    },
    {
      "source": "402",
      "target": "401"
    },
    {
      "source": "406",
      "target": "150"
    },
    {
      "source": "41",
      "target": "242"
    },
    {
      "source": "41",
      "target": "134"
    },
    {
      "source": "412",
      "target": "407"
    },
    {
      "source": "413",
      "target": "407"
    },
    {
      "source": "414",
      "target": "407"
    },
    {
      "source": "415",
      "target": "407"
    },
    {
      "source": "417",
      "target": "416"
    },
    {
      "source": "418",
      "target": "417"
    },
    {
      "source": "42",
      "target": "100"
    },
    {
      "source": "420",
      "target": "417"
    },
    {
      "source": "421",
      "target": "417"
    },
    {
      "source": "422",
      "target": "417"
    },
    {
      "source": "423",
      "target": "417"
    },
    {
      "source": "424",
      "target": "417"
    },
    {
      "source": "425",
      "target": "416"
    },
    {
      "source": "426",
      "target": "416"
    },
    {
      "source": "427",
      "target": "416"
    },
    {
      "source": "428",
      "target": "427"
    },
    {
      "source": "429",
      "target": "427"
    },
    {
      "source": "43",
      "target": "267"
    },
    {
      "source": "433",
      "target": "427"
    },
    {
      "source": "434",
      "target": "427"
    },
    {
      "source": "435",
      "target": "427"
    },
    {
      "source": "44",
      "target": "100"
    },
    {
      "source": "44",
      "target": "23"
    },
    {
      "source": "442",
      "target": "441"
    },
    {
      "source": "443",
      "target": "444"
    },
    {
      "source": "445",
      "target": "444"
    },
    {
      "source": "446",
      "target": "444"
    },
    {
      "source": "447",
      "target": "438"
    },
    {
      "source": "448",
      "target": "442"
    },
    {
      "source": "45",
      "target": "100"
    },
    {
      "source": "452",
      "target": "441"
    },
    {
      "source": "456",
      "target": "441"
    },
    {
      "source": "457",
      "target": "456"
    },
    {
      "source": "458",
      "target": "456"
    },
    {
      "source": "459",
      "target": "473"
    },
    {
      "source": "473",
      "target": "151"
    },
    {
      "source": "46",
      "target": "100"
    },
    {
      "source": "460",
      "target": "15"
    },
    {
      "source": "461",
      "target": "115"
    },
    {
      "source": "462",
      "target": "54"
    },
    {
      "source": "463",
      "target": "97"
    },
    {
      "source": "97",
      "target": "192"
    },
    {
      "source": "464",
      "target": "554"
    },
    {
      "source": "465",
      "target": "554"
    },
    {
      "source": "466",
      "target": "94"
    },
    {
      "source": "467",
      "target": "62"
    },
    {
      "source": "62",
      "target": "21"
    },
    {
      "source": "468",
      "target": "242"
    },
    {
      "source": "469",
      "target": "227"
    },
    {
      "source": "47",
      "target": "100"
    },
    {
      "source": "470",
      "target": "66"
    },
    {
      "source": "471",
      "target": "159"
    },
    {
      "source": "472",
      "target": "541"
    },
    {
      "source": "474",
      "target": "473"
    },
    {
      "source": "475",
      "target": "473"
    },
    {
      "source": "476",
      "target": "473"
    },
    {
      "source": "477",
      "target": "473"
    },
    {
      "source": "478",
      "target": "203"
    },
    {
      "source": "479",
      "target": "473"
    },
    {
      "source": "48",
      "target": "212"
    },
    {
      "source": "481",
      "target": "161"
    },
    {
      "source": "482",
      "target": "125"
    },
    {
      "source": "485",
      "target": "473"
    },
    {
      "source": "486",
      "target": "125"
    },
    {
      "source": "487",
      "target": "125"
    },
    {
      "source": "488",
      "target": "125"
    },
    {
      "source": "489",
      "target": "125"
    },
    {
      "source": "490",
      "target": "125"
    },
    {
      "source": "491",
      "target": "230"
    },
    {
      "source": "492",
      "target": "130"
    },
    {
      "source": "493",
      "target": "130"
    },
    {
      "source": "494",
      "target": "130"
    },
    {
      "source": "495",
      "target": "130"
    },
    {
      "source": "496",
      "target": "130"
    },
    {
      "source": "498",
      "target": "545"
    },
    {
      "source": "545",
      "target": "116"
    },
    {
      "source": "499",
      "target": "117"
    },
    {
      "source": "5",
      "target": "220"
    },
    {
      "source": "50",
      "target": "212"
    },
    {
      "source": "500",
      "target": "253"
    },
    {
      "source": "501",
      "target": "499"
    },
    {
      "source": "501",
      "target": "173"
    },
    {
      "source": "502",
      "target": "148"
    },
    {
      "source": "503",
      "target": "122"
    },
    {
      "source": "504",
      "target": "173"
    },
    {
      "source": "505",
      "target": "616"
    },
    {
      "source": "616",
      "target": "154"
    },
    {
      "source": "506",
      "target": "173"
    },
    {
      "source": "508",
      "target": "651"
    },
    {
      "source": "651",
      "target": "117"
    },
    {
      "source": "509",
      "target": "652"
    },
    {
      "source": "652",
      "target": "560"
    },
    {
      "source": "51",
      "target": "203"
    },
    {
      "source": "510",
      "target": "21"
    },
    {
      "source": "511",
      "target": "444"
    },
    {
      "source": "516",
      "target": "444"
    },
    {
      "source": "517",
      "target": "447"
    },
    {
      "source": "518",
      "target": "447"
    },
    {
      "source": "519",
      "target": "447"
    },
    {
      "source": "52",
      "target": "267"
    },
    {
      "source": "520",
      "target": "444"
    },
    {
      "source": "521",
      "target": "447"
    },
    {
      "source": "522",
      "target": "439"
    },
    {
      "source": "523",
      "target": "439"
    },
    {
      "source": "524",
      "target": "439"
    },
    {
      "source": "529",
      "target": "169"
    },
    {
      "source": "53",
      "target": "267"
    },
    {
      "source": "530",
      "target": "531"
    },
    {
      "source": "531",
      "target": "534"
    },
    {
      "source": "534",
      "target": "440"
    },
    {
      "source": "532",
      "target": "444"
    },
    {
      "source": "533",
      "target": "186"
    },
    {
      "source": "535",
      "target": "531"
    },
    {
      "source": "536",
      "target": "176"
    },
    {
      "source": "537",
      "target": "444"
    },
    {
      "source": "538",
      "target": "444"
    },
    {
      "source": "539",
      "target": "444"
    },
    {
      "source": "540",
      "target": "123"
    },
    {
      "source": "542",
      "target": "549"
    },
    {
      "source": "543",
      "target": "194"
    },
    {
      "source": "544",
      "target": "194"
    },
    {
      "source": "546",
      "target": "545"
    },
    {
      "source": "547",
      "target": "607"
    },
    {
      "source": "55",
      "target": "49"
    },
    {
      "source": "550",
      "target": "542"
    },
    {
      "source": "551",
      "target": "542"
    },
    {
      "source": "552",
      "target": "542"
    },
    {
      "source": "555",
      "target": "560"
    },
    {
      "source": "556",
      "target": "542"
    },
    {
      "source": "558",
      "target": "542"
    },
    {
      "source": "559",
      "target": "601"
    },
    {
      "source": "601",
      "target": "607"
    },
    {
      "source": "561",
      "target": "653"
    },
    {
      "source": "653",
      "target": "560"
    },
    {
      "source": "562",
      "target": "17"
    },
    {
      "source": "563",
      "target": "17"
    },
    {
      "source": "564",
      "target": "542"
    },
    {
      "source": "565",
      "target": "49"
    },
    {
      "source": "568",
      "target": "569"
    },
    {
      "source": "569",
      "target": "116"
    },
    {
      "source": "57",
      "target": "157"
    },
    {
      "source": "571",
      "target": "161"
    },
    {
      "source": "572",
      "target": "165"
    },
    {
      "source": "573",
      "target": "169"
    },
    {
      "source": "574",
      "target": "169"
    },
    {
      "source": "575",
      "target": "169"
    },
    {
      "source": "576",
      "target": "169"
    },
    {
      "source": "577",
      "target": "169"
    },
    {
      "source": "578",
      "target": "176"
    },
    {
      "source": "579",
      "target": "542"
    },
    {
      "source": "58",
      "target": "1"
    },
    {
      "source": "58",
      "target": "180"
    },
    {
      "source": "580",
      "target": "169"
    },
    {
      "source": "581",
      "target": "580"
    },
    {
      "source": "582",
      "target": "607"
    },
    {
      "source": "583",
      "target": "582"
    },
    {
      "source": "584",
      "target": "582"
    },
    {
      "source": "585",
      "target": "582"
    },
    {
      "source": "587",
      "target": "103"
    },
    {
      "source": "63",
      "target": "242"
    },
    {
      "source": "589",
      "target": "603"
    },
    {
      "source": "603",
      "target": "607"
    },
    {
      "source": "59",
      "target": "196"
    },
    {
      "source": "590",
      "target": "603"
    },
    {
      "source": "595",
      "target": "594"
    },
    {
      "source": "596",
      "target": "595"
    },
    {
      "source": "597",
      "target": "126"
    },
    {
      "source": "598",
      "target": "194"
    },
    {
      "source": "599",
      "target": "195"
    },
    {
      "source": "6",
      "target": "137"
    },
    {
      "source": "60",
      "target": "593"
    },
    {
      "source": "600",
      "target": "560"
    },
    {
      "source": "604",
      "target": "601"
    },
    {
      "source": "605",
      "target": "601"
    },
    {
      "source": "606",
      "target": "620"
    },
    {
      "source": "620",
      "target": "212"
    },
    {
      "source": "608",
      "target": "97"
    },
    {
      "source": "609",
      "target": "157"
    },
    {
      "source": "61",
      "target": "593"
    },
    {
      "source": "610",
      "target": "240"
    },
    {
      "source": "611",
      "target": "616"
    },
    {
      "source": "612",
      "target": "292"
    },
    {
      "source": "613",
      "target": "292"
    },
    {
      "source": "614",
      "target": "186"
    },
    {
      "source": "615",
      "target": "616"
    },
    {
      "source": "617",
      "target": "616"
    },
    {
      "source": "618",
      "target": "292"
    },
    {
      "source": "619",
      "target": "292"
    },
    {
      "source": "621",
      "target": "189"
    },
    {
      "source": "622",
      "target": "189"
    },
    {
      "source": "623",
      "target": "189"
    },
    {
      "source": "625",
      "target": "624"
    },
    {
      "source": "626",
      "target": "395"
    },
    {
      "source": "627",
      "target": "148"
    },
    {
      "source": "628",
      "target": "627"
    },
    {
      "source": "630",
      "target": "616"
    },
    {
      "source": "631",
      "target": "616"
    },
    {
      "source": "632",
      "target": "616"
    },
    {
      "source": "633",
      "target": "194"
    },
    {
      "source": "634",
      "target": "651"
    },
    {
      "source": "634",
      "target": "545"
    },
    {
      "source": "637",
      "target": "150"
    },
    {
      "source": "638",
      "target": "452"
    },
    {
      "source": "639",
      "target": "545"
    },
    {
      "source": "64",
      "target": "267"
    },
    {
      "source": "640",
      "target": "251"
    },
    {
      "source": "641",
      "target": "159"
    },
    {
      "source": "642",
      "target": "17"
    },
    {
      "source": "643",
      "target": "309"
    },
    {
      "source": "644",
      "target": "653"
    },
    {
      "source": "645",
      "target": "652"
    },
    {
      "source": "646",
      "target": "169"
    },
    {
      "source": "647",
      "target": "150"
    },
    {
      "source": "648",
      "target": "150"
    },
    {
      "source": "649",
      "target": "635"
    },
    {
      "source": "65",
      "target": "157"
    },
    {
      "source": "650",
      "target": "17"
    },
    {
      "source": "654",
      "target": "504"
    },
    {
      "source": "655",
      "target": "572"
    },
    {
      "source": "656",
      "target": "98"
    },
    {
      "source": "657",
      "target": "186"
    },
    {
      "source": "660",
      "target": "251"
    },
    {
      "source": "661",
      "target": "121"
    },
    {
      "source": "662",
      "target": "94"
    },
    {
      "source": "663",
      "target": "74"
    },
    {
      "source": "663",
      "target": "184"
    },
    {
      "source": "664",
      "target": "115"
    },
    {
      "source": "665",
      "target": "276"
    },
    {
      "source": "666",
      "target": "125"
    },
    {
      "source": "667",
      "target": "616"
    },
    {
      "source": "668",
      "target": "115"
    },
    {
      "source": "669",
      "target": "184"
    },
    {
      "source": "67",
      "target": "100"
    },
    {
      "source": "67",
      "target": "135"
    },
    {
      "source": "670",
      "target": "444"
    },
    {
      "source": "671",
      "target": "447"
    },
    {
      "source": "672",
      "target": "444"
    },
    {
      "source": "673",
      "target": "444"
    },
    {
      "source": "674",
      "target": "447"
    },
    {
      "source": "675",
      "target": "116"
    },
    {
      "source": "676",
      "target": "248"
    },
    {
      "source": "677",
      "target": "534"
    },
    {
      "source": "678",
      "target": "444"
    },
    {
      "source": "679",
      "target": "1"
    },
    {
      "source": "679",
      "target": "180"
    },
    {
      "source": "68",
      "target": "233"
    },
    {
      "source": "680",
      "target": "1"
    },
    {
      "source": "680",
      "target": "180"
    },
    {
      "source": "681",
      "target": "1"
    },
    {
      "source": "681",
      "target": "180"
    },
    {
      "source": "682",
      "target": "212"
    },
    {
      "source": "69",
      "target": "233"
    },
    {
      "source": "691",
      "target": "690"
    },
    {
      "source": "692",
      "target": "691"
    },
    {
      "source": "693",
      "target": "691"
    },
    {
      "source": "694",
      "target": "169"
    },
    {
      "source": "695",
      "target": "616"
    },
    {
      "source": "696",
      "target": "663"
    },
    {
      "source": "697",
      "target": "194"
    },
    {
      "source": "698",
      "target": "542"
    },
    {
      "source": "699",
      "target": "651"
    },
    {
      "source": "7",
      "target": "66"
    },
    {
      "source": "70",
      "target": "49"
    },
    {
      "source": "700",
      "target": "161"
    },
    {
      "source": "701",
      "target": "94"
    },
    {
      "source": "702",
      "target": "180"
    },
    {
      "source": "71",
      "target": "267"
    },
    {
      "source": "72",
      "target": "267"
    },
    {
      "source": "73",
      "target": "165"
    },
    {
      "source": "75",
      "target": "176"
    },
    {
      "source": "76",
      "target": "126"
    },
    {
      "source": "78",
      "target": "267"
    },
    {
      "source": "79",
      "target": "267"
    },
    {
      "source": "8",
      "target": "100"
    },
    {
      "source": "80",
      "target": "267"
    },
    {
      "source": "81",
      "target": "268"
    },
    {
      "source": "83",
      "target": "250"
    },
    {
      "source": "84",
      "target": "250"
    },
    {
      "source": "85",
      "target": "580"
    },
    {
      "source": "86",
      "target": "591"
    },
    {
      "source": "86",
      "target": "588"
    },
    {
      "source": "86",
      "target": "592"
    },
    {
      "source": "87",
      "target": "115"
    },
    {
      "source": "88",
      "target": "248"
    },
    {
      "source": "89",
      "target": "151"
    },
    {
      "source": "9",
      "target": "100"
    },
    {
      "source": "90",
      "target": "272"
    },
    {
      "source": "90",
      "target": "114"
    },
    {
      "source": "92",
      "target": "128"
    },
    {
      "source": "93",
      "target": "268"
    },
    {
      "source": "95",
      "target": "54"
    },
    {
      "source": "96",
      "target": "603"
    }
  ]
}