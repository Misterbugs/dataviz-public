{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-168: Windows ::DATA Alternate Data Stream</b><br>An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple \"files\" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.",
      "color": "#94ebff",
      "size": 10,
      "label": "Windows ::DATA Alternate Data Stream",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/168.html",
      "id": "168"
    },
    {
      "Description": "<b>CAPEC-655: Avoid Security Tool Identification by Adding Data</b><br>An adversary adds data to a file to increase the file size beyond what security tools are capable of handling in an attempt to mask their actions. \n In addition to this, adding data to a file also changes the file's hash, frustrating security tools that look for known bad files by their hash.",
      "color": "#94ebff",
      "size": 10,
      "label": "Avoid Security Tool Identification by Adding Data",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/655.html",
      "id": "655"
    },
    {
      "Description": "<b>CAPEC-11: Cause Web Server Misclassification</b><br>An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cause Web Server Misclassification",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/11.html",
      "id": "11"
    },
    {
      "Description": "<b>CAPEC-572: Artificially Inflate File Sizes</b><br>An adversary modifies file contents by adding data to files for several reasons. Many different attacks could \u201cfollow\u201d this pattern resulting in numerous outcomes. Adding data to a file could also result in a Denial of Service condition for devices with limited storage capacity.",
      "color": "#75aaff",
      "size": 18,
      "label": "Artificially Inflate File Sizes",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/572.html",
      "id": "572"
    },
    {
      "Description": "<b>CAPEC-635: Alternative Execution Due to Deceptive Filenames</b><br>The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.",
      "color": "#75aaff",
      "size": 18,
      "label": "Alternative Execution Due to Deceptive Filenames",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/635.html",
      "id": "635"
    },
    {
      "Description": "<b>CAPEC-649: Adding a Space to a File Extension</b><br>An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.",
      "color": "#94ebff",
      "size": 10,
      "label": "Adding a Space to a File Extension",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/649.html",
      "id": "649"
    },
    {
      "Description": "<b>CAPEC-35: Leverage Executable Code in Non-Executable Files</b><br>An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.",
      "color": "#94ebff",
      "size": 10,
      "label": "Leverage Executable Code in Non-Executable Files",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/35.html",
      "id": "35"
    },
    {
      "Description": "<b>CAPEC-165: File Manipulation</b><br>An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.",
      "color": "#2176ff",
      "size": 30,
      "label": "File Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/165.html",
      "id": "165"
    },
    {
      "Description": "<b>CAPEC-73: User-Controlled Filename</b><br>An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.",
      "color": "#75aaff",
      "size": 18,
      "label": "User-Controlled Filename",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/73.html",
      "id": "73"
    },
    {
      "Description": "<b>CAPEC-636: Hiding Malicious Data or Code within Files</b><br>Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.",
      "color": "#75aaff",
      "size": 18,
      "label": "Hiding Malicious Data or Code within Files",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/636.html",
      "id": "636"
    }
  ],
  "links": [
    {
      "source": "168",
      "target": "636"
    },
    {
      "source": "655",
      "target": "572"
    },
    {
      "source": "11",
      "target": "635"
    },
    {
      "source": "572",
      "target": "165"
    },
    {
      "source": "635",
      "target": "165"
    },
    {
      "source": "649",
      "target": "635"
    },
    {
      "source": "35",
      "target": "636"
    },
    {
      "source": "73",
      "target": "165"
    },
    {
      "source": "636",
      "target": "165"
    }
  ]
}