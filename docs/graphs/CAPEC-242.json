{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-32: XSS Through HTTP Query Strings</b><br>An adversary embeds malicious script code in the parameters of an HTTP query<br>string and convinces a victim to submit the HTTP request that contains the query<br>string to a vulnerable web application. The web application then procedes to use<br>the values parameters without properly validation them first and generates the<br>HTML code that will be executed by the victim's browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Through HTTP Query Strings",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/32.html",
      "id": "32"
    },
    {
      "Description": "<b>CAPEC-199: XSS Using Alternate Syntax</b><br>An adversary uses alternate forms of keywords or commands that result in the<br>same action as the primary form but which may not be caught by filters. For<br>example, many keywords are processed in a case insensitive manner. If the site's<br>web filtering algorithm does not convert all tags into a consistent case before<br>the comparison with forbidden keywords it is possible to bypass filters (e.g.,<br>incomplete black lists) by using an alternate case structure. For example, the<br>\"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass<br>filters where \"script\" is the only form tested. Other variants using different<br>syntax representations are also possible as well as using pollution<br>meta-characters or entities that are eventually ignored by the rendering engine.<br>The attack can result in the execution of otherwise prohibited functionality.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Alternate Syntax",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/199.html",
      "id": "199"
    },
    {
      "Description": "<b>CAPEC-18: XSS Targeting Non-Script Elements</b><br>This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are<br>embedded in elements that are not expected to host scripts such as image tags<br>(<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be<br>subject to the same input validation, output validation, and other content<br>filtering and checking routines, so this can create an opportunity for an<br>adversary to tunnel through the application's elements and launch a XSS attack<br>through other elements. As with all remote attacks, it is important to<br>differentiate the ability to launch an attack (such as probing an internal<br>network for unpatched servers) and the ability of the remote adversary to<br>collect and interpret the output of said attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting Non-Script Elements",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/18.html",
      "id": "18"
    },
    {
      "Description": "<b>CAPEC-19: Embedding Scripts within Scripts</b><br>An adversary leverages the capability to execute their own script by embedding<br>it within other scripts that the target software is likely to execute due to<br>programs' vulnerabilities that are brought on by allowing remote hosts to<br>execute scripts.",
      "color": "#75aaff",
      "size": 18,
      "label": "Embedding Scripts within Scripts",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/19.html",
      "id": "19"
    },
    {
      "Description": "<b>CAPEC-44: Overflow Binary Resource File</b><br>An attack of this type exploits a buffer overflow vulnerability in the handling<br>of binary resources. Binary resources may include music files like MP3, image<br>files like JPEG files, and any other binary file. These attacks may pass<br>unnoticed to the client machine through normal usage of files, such as a browser<br>loading a seemingly innocent JPEG file. This can allow the adversary access to<br>the execution stack and execute arbitrary code in the target process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Overflow Binary Resource File",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/44.html",
      "id": "44"
    },
    {
      "Description": "<b>CAPEC-41: Using Meta-characters in E-mail Headers to Inject Malicious Payloads</b><br>This type of attack involves an attacker leveraging meta-characters in email<br>headers to inject improper behavior into email programs. Email software has<br>become increasingly sophisticated and feature-rich. In addition, email<br>applications are ubiquitous and connected directly to the Web making them ideal<br>targets to launch and propagate attacks. As the user demand for new<br>functionality in email applications grows, they become more like browsers with<br>complex rendering and plug in routines. As more email functionality is included<br>and abstracted from the user, this creates opportunities for attackers.<br>Virtually all email applications do not list email header information by<br>default, however the email header contains valuable attacker vectors for the<br>attacker to exploit particularly if the behavior of the email client application<br>is known. Meta-characters are hidden from the user, but can contain scripts,<br>enumerations, probes, and other attacks against the user's system.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/41.html",
      "id": "41"
    },
    {
      "Description": "<b>CAPEC-468: Generic Cross-Browser Cross-Domain Theft</b><br>An attacker makes use of Cascading Style Sheets (CSS) injection to steal data<br>cross domain from the victim's browser. The attack works by abusing the<br>standards relating to loading of CSS: 1. Send cookies on any load of CSS<br>(including cross-domain) 2. When parsing returned CSS ignore all data that does<br>not make sense before a valid CSS descriptor is found by the CSS parser.",
      "color": "#75aaff",
      "size": 18,
      "label": "Generic Cross-Browser Cross-Domain Theft",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/468.html",
      "id": "468"
    },
    {
      "Description": "<b>CAPEC-209: XSS Using MIME Type Mismatch</b><br>An adversary creates a file with scripting content but where the specified MIME<br>type of the file is such that scripting is not expected. The adversary tricks<br>the victim into accessing a URL that responds with the script file. Some<br>browsers will detect that the specified MIME type of the file does not match the<br>actual type of its content and will automatically switch to using an interpreter<br>for the real content type. If the browser does not invoke script filters before<br>doing this, the adversary's script may run on the target unsanitized, possibly<br>revealing the victim's cookies or executing arbitrary script in their browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using MIME Type Mismatch",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/209.html",
      "id": "209"
    },
    {
      "Description": "<b>CAPEC-243: XSS Targeting HTML Attributes</b><br>An adversary inserts commands to perform cross-site scripting (XSS) actions in<br>HTML attributes. Many filters do not adequately sanitize attributes against the<br>presence of potentially dangerous commands even if they adequately sanitize<br>tags. For example, dangerous expressions could be inserted into a style<br>attribute in an anchor tag, resulting in the execution of malicious code when<br>the resulting page is rendered. If a victim is tricked into viewing the rendered<br>page the attack proceeds like a normal XSS attack, possibly resulting in the<br>loss of sensitive cookies or other malicious activities.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting HTML Attributes",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/243.html",
      "id": "243"
    },
    {
      "Description": "<b>CAPEC-592: Stored XSS</b><br>An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious<br>script is persistently \"stored\" within the data storage of a vulnerable web<br>application as valid input.",
      "color": "#94ebff",
      "size": 10,
      "label": "Stored XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/592.html",
      "id": "592"
    },
    {
      "Description": "<b>CAPEC-247: XSS Using Invalid Characters</b><br>An adversary inserts invalid characters in identifiers to bypass application<br>filtering of input. Filters may not scan beyond invalid characters but during<br>later stages of processing content that follows these invalid characters may<br>still be processed. This allows the adversary to sneak prohibited commands past<br>filters and perform normally prohibited operations. Invalid characters may<br>include null, carriage return, line feed or tab in an identifier. Successful<br>bypassing of the filter can result in a XSS attack, resulting in the disclosure<br>of web cookies or possibly other results.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Invalid Characters",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/247.html",
      "id": "247"
    },
    {
      "Description": "<b>CAPEC-244: XSS Targeting URI Placeholders</b><br>An attack of this type exploits the ability of most browsers to interpret<br>\"data\", \"javascript\" or other URI schemes as client-side executable content<br>placeholders. This attack consists of passing a malicious URI in an anchor tag<br>HREF attribute or any other similar attributes in other HTML tags. Such<br>malicious URI contains, for example, a base64 encoded HTML content with an<br>embedded cross-site scripting payload. The attack is executed when the browser<br>interprets the malicious content i.e., for example, when the victim clicks on<br>the malicious link.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting URI Placeholders",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/244.html",
      "id": "244"
    },
    {
      "Description": "<b>CAPEC-86: XSS Through HTTP Headers</b><br>An adversary exploits web applications that generate web content, such as links<br>in a HTML page, based on unvalidated or improperly validated data submitted by<br>other actors. XSS in HTTP Headers attacks target the HTTP headers which are<br>hidden from most users and may not be validated by web applications.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Through HTTP Headers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/86.html",
      "id": "86"
    },
    {
      "Description": "<b>CAPEC-245: XSS Using Doubled Characters</b><br>The adversary bypasses input validation by using doubled characters in order to<br>perform a cross-site scripting attack. Some filters fail to recognize dangerous<br>sequences if they are preceded by repeated characters. For example, by doubling<br>the < before a script command, (<<script or %3C%3script using URI encoding) the<br>filters of some web applications may fail to recognize the presence of a script<br>tag. If the targeted server is vulnerable to this type of bypass, the adversary<br>can create a crafted URL or other trap to cause a victim to view a page on the<br>targeted server where the malicious content is executed, as per a normal XSS<br>attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Doubled Characters",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/245.html",
      "id": "245"
    },
    {
      "Description": "<b>CAPEC-588: DOM-Based XSS</b><br>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious<br>script is inserted into the client-side HTML being parsed by a web browser.<br>Content served by a vulnerable web application includes script code used to<br>manipulate the Document Object Model (DOM). This script code either does not<br>properly validate input, or does not perform proper output encoding, thus<br>creating an opportunity for an adversary to inject a malicious script launch a<br>XSS attack. A key distinction between other XSS attacks and DOM-based attacks is<br>that in other XSS attacks, the malicious script runs when the vulnerable web<br>page is initially loaded, while a DOM-based attack executes sometime after the<br>page loads. Another distinction of DOM-based attacks is that in some cases, the<br>malicious script is never sent to the vulnerable web server at all. An attack<br>like this is guaranteed to bypass any server-side filtering attempts to protect<br>users.",
      "color": "#94ebff",
      "size": 10,
      "label": "DOM-Based XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/588.html",
      "id": "588"
    },
    {
      "Description": "<b>CAPEC-242: Code Injection</b><br>An adversary exploits a weakness in input validation on the target to inject new<br>code into that which is currently executing. This differs from code inclusion in<br>that code inclusion involves the addition or replacement of a reference to a<br>code file, which is subsequently loaded by the target and used as part of the<br>code of some application.",
      "color": "#2176ff",
      "size": 30,
      "label": "Code Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/242.html",
      "id": "242"
    },
    {
      "Description": "<b>CAPEC-63: Cross-Site Scripting (XSS)</b><br>An adversary embeds malicious scripts in content that will be served to web<br>browsers. The goal of the attack is for the target software, the client-side<br>browser, to execute the script with the users' privilege level. An attack of<br>this type exploits a programs' vulnerabilities that are brought on by allowing<br>remote hosts to execute code and scripts. Web browsers, for example, have some<br>simple security controls in place, but if a remote attacker is allowed to<br>execute scripts (through injecting them in to user-generated content like<br>bulletin boards) then these controls may be bypassed. Further, these attacks are<br>very difficult for an end user to detect.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cross-Site Scripting (XSS)",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/63.html",
      "id": "63"
    },
    {
      "Description": "<b>CAPEC-198: XSS Targeting Error Pages</b><br>An adversary distributes a link (or possibly some other query structure) with a<br>request to a third party web server that is malformed and also contains a block<br>of exploit code in order to have the exploit become live code in the resulting<br>error page.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting Error Pages",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/198.html",
      "id": "198"
    },
    {
      "Description": "<b>CAPEC-23: File Content Injection</b><br>An adversary poisons files with a malicious payload (targeting the file systems<br>accessible by the target software), which may be passed through by standard<br>channels such as via email, and standard web content like PDF and multimedia<br>files. The adversary exploits known vulnerabilities or handling routines in the<br>target processes, in order to exploit the host's trust in executing remote<br>content, including binary files.",
      "color": "#75aaff",
      "size": 18,
      "label": "File Content Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/23.html",
      "id": "23"
    },
    {
      "Description": "<b>CAPEC-591: Reflected XSS</b><br>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious<br>script is \"reflected\" off a vulnerable web application and then executed by a<br>victim's browser. The process starts with an adversary delivering a malicious<br>script to a victim and convincing the victim to send the script to the<br>vulnerable web application.",
      "color": "#94ebff",
      "size": 10,
      "label": "Reflected XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/591.html",
      "id": "591"
    }
  ],
  "links": [
    {
      "source": "32",
      "target": "591"
    },
    {
      "source": "32",
      "target": "588"
    },
    {
      "source": "32",
      "target": "592"
    },
    {
      "source": "199",
      "target": "591"
    },
    {
      "source": "199",
      "target": "592"
    },
    {
      "source": "199",
      "target": "588"
    },
    {
      "source": "18",
      "target": "591"
    },
    {
      "source": "18",
      "target": "592"
    },
    {
      "source": "18",
      "target": "588"
    },
    {
      "source": "19",
      "target": "242"
    },
    {
      "source": "44",
      "target": "23"
    },
    {
      "source": "41",
      "target": "242"
    },
    {
      "source": "468",
      "target": "242"
    },
    {
      "source": "209",
      "target": "592"
    },
    {
      "source": "243",
      "target": "591"
    },
    {
      "source": "243",
      "target": "592"
    },
    {
      "source": "243",
      "target": "588"
    },
    {
      "source": "592",
      "target": "63"
    },
    {
      "source": "247",
      "target": "591"
    },
    {
      "source": "247",
      "target": "592"
    },
    {
      "source": "247",
      "target": "588"
    },
    {
      "source": "244",
      "target": "591"
    },
    {
      "source": "244",
      "target": "592"
    },
    {
      "source": "244",
      "target": "588"
    },
    {
      "source": "86",
      "target": "591"
    },
    {
      "source": "86",
      "target": "588"
    },
    {
      "source": "86",
      "target": "592"
    },
    {
      "source": "245",
      "target": "591"
    },
    {
      "source": "245",
      "target": "592"
    },
    {
      "source": "245",
      "target": "588"
    },
    {
      "source": "588",
      "target": "63"
    },
    {
      "source": "63",
      "target": "242"
    },
    {
      "source": "198",
      "target": "591"
    },
    {
      "source": "198",
      "target": "592"
    },
    {
      "source": "198",
      "target": "588"
    },
    {
      "source": "23",
      "target": "242"
    },
    {
      "source": "591",
      "target": "63"
    }
  ]
}