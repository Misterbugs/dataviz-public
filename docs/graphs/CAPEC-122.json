{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-562: Modify Shared File</b><br>An adversary manipulates the files in a shared location by adding malicious<br>programs, scripts, or exploit code to valid content. Once a user opens the<br>shared content, the tainted content is executed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Modify Shared File",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/562.html",
      "id": "562"
    },
    {
      "Description": "<b>CAPEC-503: WebView Exposure</b><br>An adversary, through a malicious web page, accesses application specific<br>functionality by leveraging interfaces registered through WebView's<br>addJavascriptInterface API. Once an interface is registered to WebView through<br>addJavascriptInterface, it becomes global and all pages loaded in the WebView<br>can call this interface.",
      "color": "#75aaff",
      "size": 18,
      "label": "WebView Exposure",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/503.html",
      "id": "503"
    },
    {
      "Description": "<b>CAPEC-17: Using Malicious Files</b><br>An attack of this type exploits a system's configuration that allows an<br>adversary to either directly access an executable file, for example through<br>shell access; or in a possible worst case allows an adversary to upload a file<br>and then execute it. Web servers, ftp servers, and message oriented middleware<br>systems which have many integration points are particularly vulnerable, because<br>both the programmers and the administrators must be in synch regarding the<br>interfaces and the correct privileges for each interface.",
      "color": "#75aaff",
      "size": 18,
      "label": "Using Malicious Files",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/17.html",
      "id": "17"
    },
    {
      "Description": "<b>CAPEC-650: Upload a Web Shell to a Web Server</b><br>By exploiting insufficient permissions, it is possible to upload a web shell to<br>a web server in such a way that it can be executed remotely. This shell can have<br>various capabilities, thereby acting as a \"gateway\" to the underlying web<br>server. The shell might execute at the higher permission level of the web<br>server, providing the ability the execute malicious code at elevated levels.",
      "color": "#94ebff",
      "size": 10,
      "label": "Upload a Web Shell to a Web Server",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/650.html",
      "id": "650"
    },
    {
      "Description": "<b>CAPEC-180: Exploiting Incorrectly Configured Access Control Security Levels</b><br>An attacker exploits a weakness in the configuration of access controls and is<br>able to bypass the intended protection that these measures guard against and<br>thereby obtain unauthorized access to the system or network. Sensitive<br>functionality should always be protected with access controls. However<br>configuring all but the most trivial access control systems can be very<br>complicated and there are many opportunities for mistakes. If an attacker can<br>learn of incorrectly configured access security settings, they may be able to<br>exploit this in an attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploiting Incorrectly Configured Access Control Security Levels",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/180.html",
      "id": "180"
    },
    {
      "Description": "<b>CAPEC-680: Exploitation of Improperly Controlled Registers</b><br>An adversary exploits missing or incorrectly configured access control within<br>registers to read/write data that is not meant to be obtained or modified by a<br>user.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploitation of Improperly Controlled Registers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/680.html",
      "id": "680"
    },
    {
      "Description": "<b>CAPEC-681: Exploitation of Improperly Controlled Hardware Security Identifiers</b><br>An adversary takes advantage of missing or incorrectly configured security<br>identifiers (e.g., tokens), which are used for access control within a<br>System-on-Chip (SoC), to read/write data or execute a given action.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploitation of Improperly Controlled Hardware Security Identifiers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/681.html",
      "id": "681"
    },
    {
      "Description": "<b>CAPEC-201: Serialized Data External Linking</b><br>An adversary creates a serialized data file (e.g. XML, YAML, etc...) that<br>contains an external data reference. Because serialized data parsers may not<br>validate documents with external references, there may be no checks on the<br>nature of the reference in the external data. This can allow an adversary to<br>open arbitrary files or connections, which may further lead to the adversary<br>gaining access to information on the system that they would normally be unable<br>to obtain.",
      "color": "#94ebff",
      "size": 10,
      "label": "Serialized Data External Linking",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/201.html",
      "id": "201"
    },
    {
      "Description": "<b>CAPEC-122: Privilege Abuse</b><br>An adversary is able to exploit features of the target that should be reserved<br>for privileged users or administrators but are exposed to use by lower or<br>non-privileged accounts. Access to sensitive information and functionality must<br>be controlled to ensure that only authorized users are able to access these<br>resources.",
      "color": "#2176ff",
      "size": 30,
      "label": "Privilege Abuse",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/122.html",
      "id": "122"
    },
    {
      "Description": "<b>CAPEC-563: Add Malicious File to Shared Webroot</b><br>An adversaries may add malicious content to a website through the open file<br>share and then browse to that content with a web browser to cause the server to<br>execute the content. The malicious content will typically run under the context<br>and permissions of the web server process, often resulting in local system or<br>administrative privileges depending on how the web server is configured.",
      "color": "#94ebff",
      "size": 10,
      "label": "Add Malicious File to Shared Webroot",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/563.html",
      "id": "563"
    },
    {
      "Description": "<b>CAPEC-1: Accessing Functionality Not Properly Constrained by ACLs</b><br>In applications, particularly web applications, access to functionality is<br>mitigated by an authorization framework. This framework maps Access Control<br>Lists (ACLs) to elements of the application's functionality; particularly URL's<br>for web apps. In the case that the administrator failed to specify an ACL for a<br>particular element, an attacker may be able to access it with impunity. An<br>attacker with the ability to access functionality not properly constrained by<br>ACLs can obtain sensitive information and possibly compromise the entire<br>application. Such an attacker can access resources that must be available only<br>to users at a higher privilege level, can access management sections of the<br>application, or can run queries for data that they otherwise not supposed to.",
      "color": "#75aaff",
      "size": 18,
      "label": "Accessing Functionality Not Properly Constrained by ACLs",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/1.html",
      "id": "1"
    },
    {
      "Description": "<b>CAPEC-177: Create files with the same name as files protected with a higher classification</b><br>An attacker exploits file location algorithms in an operating system or<br>application by creating a file with the same name as a protected or privileged<br>file. The attacker could manipulate the system if the attacker-created file is<br>trusted by the operating system or an application component that attempts to<br>load the original file. Applications often load or include external files, such<br>as libraries or configuration files. These files should be protected against<br>malicious manipulation. However, if the application only uses the name of the<br>file when locating it, an attacker may be able to create a file with the same<br>name and place it in a directory that the application will search before the<br>directory with the legitimate file is searched. Because the attackers' file is<br>discovered first, it would be used by the target application. This attack can be<br>extremely destructive if the referenced file is executable and/or is granted<br>special privileges based solely on having a particular name.",
      "color": "#94ebff",
      "size": 10,
      "label": "Create files with the same name as files protected with a higher classification",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/177.html",
      "id": "177"
    },
    {
      "Description": "<b>CAPEC-58: Restful Privilege Elevation</b><br>An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method<br>allowing them to perform various malicious actions upon server data due to lack<br>of access control mechanisms implemented within the application service<br>accepting HTTP messages.",
      "color": "#94ebff",
      "size": 10,
      "label": "Restful Privilege Elevation",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/58.html",
      "id": "58"
    },
    {
      "Description": "<b>CAPEC-702: Exploiting Incorrect Chaining or Granularity of Hardware Debug Components</b><br>An adversary exploits incorrect chaining or granularity of hardware debug<br>components in order to gain unauthorized access to debug functionality on a<br>chip. This happens when authorization is not checked on a per function basis and<br>is assumed for a chain or group of debug functionality.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploiting Incorrect Chaining or Granularity of Hardware Debug Components",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/702.html",
      "id": "702"
    },
    {
      "Description": "<b>CAPEC-263: Force Use of Corrupted Files</b><br>This describes an attack where an application is forced to use a file that an<br>attacker has corrupted. The result is often a denial of service caused by the<br>application being unable to process the corrupted file, but other results,<br>including the disabling of filters or access controls (if the application fails<br>in an unsafe way rather than failing by locking down) or buffer overflows are<br>possible.",
      "color": "#94ebff",
      "size": 10,
      "label": "Force Use of Corrupted Files",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/263.html",
      "id": "263"
    },
    {
      "Description": "<b>CAPEC-679: Exploitation of Improperly Configured or Implemented Memory Protections</b><br>An adversary takes advantage of missing or incorrectly configured access control<br>within memory to read/write data or inject malicious code into said memory.",
      "color": "#94ebff",
      "size": 10,
      "label": "Exploitation of Improperly Configured or Implemented Memory Protections",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/679.html",
      "id": "679"
    },
    {
      "Description": "<b>CAPEC-642: Replace Binaries</b><br>Adversaries know that certain binaries will be regularly executed as part of<br>normal processing. If these binaries are not protected with the appropriate file<br>system permissions, it could be possible to replace them with malware. This<br>malware might be executed at higher system permission levels. A variation of<br>this pattern is to discover self-extracting installation packages that unpack<br>binaries to directories with weak file permissions which it does not clean up<br>appropriately. These binaries can be replaced by malware, which can then be<br>executed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Replace Binaries",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/642.html",
      "id": "642"
    }
  ],
  "links": [
    {
      "source": "562",
      "target": "17"
    },
    {
      "source": "503",
      "target": "122"
    },
    {
      "source": "17",
      "target": "122"
    },
    {
      "source": "650",
      "target": "17"
    },
    {
      "source": "180",
      "target": "122"
    },
    {
      "source": "680",
      "target": "1"
    },
    {
      "source": "680",
      "target": "180"
    },
    {
      "source": "681",
      "target": "1"
    },
    {
      "source": "681",
      "target": "180"
    },
    {
      "source": "201",
      "target": "122"
    },
    {
      "source": "563",
      "target": "17"
    },
    {
      "source": "1",
      "target": "122"
    },
    {
      "source": "177",
      "target": "17"
    },
    {
      "source": "58",
      "target": "1"
    },
    {
      "source": "58",
      "target": "180"
    },
    {
      "source": "702",
      "target": "180"
    },
    {
      "source": "263",
      "target": "17"
    },
    {
      "source": "679",
      "target": "1"
    },
    {
      "source": "679",
      "target": "180"
    },
    {
      "source": "642",
      "target": "17"
    }
  ]
}