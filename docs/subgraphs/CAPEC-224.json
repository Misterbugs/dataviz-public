{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-310: Scanning for Vulnerable Software</b><br>An attacker engages in scanning activity to find vulnerable software versions or<br>types, such as operating system versions or network services. Vulnerable or<br>exploitable network configurations, such as improperly firewalled systems, or<br>misconfigured systems in the DMZ or external network, provide windows of<br>opportunity for an attacker. Common types of vulnerable software include<br>unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on<br>open ports that the attacker has identified. Attackers usually begin probing for<br>vulnerable software once the external network has been port scanned and<br>potential targets have been revealed.",
      "color": "#94ebff",
      "size": 10,
      "label": "Scanning for Vulnerable Software",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/310.html",
      "id": "310"
    },
    {
      "Description": "<b>CAPEC-541: Application Fingerprinting</b><br>An adversary engages in fingerprinting activities to determine the type or<br>version of an application installed on a remote target.",
      "color": "#75aaff",
      "size": 18,
      "label": "Application Fingerprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/541.html",
      "id": "541"
    },
    {
      "Description": "<b>CAPEC-317: IP ID Sequencing Probe</b><br>This OS fingerprinting probe analyzes the IP 'ID' field sequence number<br>generation algorithm of a remote host. Operating systems generate IP 'ID'<br>numbers differently, allowing an attacker to identify the operating system of<br>the host by examining how is assigns ID numbers when generating response<br>packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so<br>ID sequence generation differs from implementation to implementation. There are<br>two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing<br>the IP 'ID' sequence generation algorithm for one protocol used by a host and<br>Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values<br>spanning multiple protocols, such as between ICMP and TCP.",
      "color": "#94ebff",
      "size": 10,
      "label": "IP ID Sequencing Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/317.html",
      "id": "317"
    },
    {
      "Description": "<b>CAPEC-170: Web Application Fingerprinting</b><br>An attacker sends a series of probes to a web application in order to elicit<br>version-dependent and type-dependent behavior that assists in identifying the<br>target. An attacker could learn information such as software versions, error<br>pages, and response headers, variations in implementations of the HTTP protocol,<br>directory structures, and other similar information about the targeted service.<br>This information can then be used by an attacker to formulate a targeted attack<br>plan. While web application fingerprinting is not intended to be damaging<br>(although certain activities, such as network scans, can sometimes cause<br>disruptions to vulnerable applications inadvertently) it may often pave the way<br>for more damaging attacks.",
      "color": "#94ebff",
      "size": 10,
      "label": "Web Application Fingerprinting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/170.html",
      "id": "170"
    },
    {
      "Description": "<b>CAPEC-331: ICMP IP Total Length Field Probe</b><br>An adversary sends a UDP packet to a closed port on the target machine to<br>solicit an IP Header's total length field value within the echoed 'Port<br>Unreachable\" error message. This type of behavior is useful for building a<br>signature-base of operating system responses, particularly when error messages<br>contain other types of information that is useful identifying specific operating<br>system responses.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP IP Total Length Field Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/331.html",
      "id": "331"
    },
    {
      "Description": "<b>CAPEC-224: Fingerprinting</b><br>An adversary compares output from a target system to known indicators that<br>uniquely identify specific details about the target. Most commonly,<br>fingerprinting is done to determine operating system and application versions.<br>Fingerprinting can be done passively as well as actively. Fingerprinting by<br>itself is not usually detrimental to the target. However, the information<br>gathered through fingerprinting often enables an adversary to discover existing<br>weaknesses in the target.",
      "color": "#2176ff",
      "size": 30,
      "label": "Fingerprinting",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/224.html",
      "id": "224"
    },
    {
      "Description": "<b>CAPEC-312: Active OS Fingerprinting</b><br>An adversary engages in activity to detect the operating system or firmware<br>version of a remote target by interrogating a device, server, or platform with a<br>probe designed to solicit behavior that will reveal information about the<br>operating systems or firmware in the environment. Operating System detection is<br>possible because implementations of common protocols (Such as IP or TCP) differ<br>in distinct ways. While the implementation differences are not sufficient to<br>'break' compatibility with the protocol the differences are detectable because<br>the target will respond in unique ways to specific probing activity that breaks<br>the semantic or logical rules of packet construction for a protocol. Different<br>operating systems will have a unique response to the anomalous input, providing<br>the basis to fingerprint the OS behavior. This type of OS fingerprinting can<br>distinguish between operating system types and versions.",
      "color": "#75aaff",
      "size": 18,
      "label": "Active OS Fingerprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/312.html",
      "id": "312"
    },
    {
      "Description": "<b>CAPEC-322: TCP (ISN) Greatest Common Divisor Probe</b><br>This OS fingerprinting probe sends a number of TCP SYN packets to an open port<br>of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK<br>response packets is analyzed to determine the smallest number that the target<br>host uses when incrementing sequence numbers. This information can be useful for<br>identifying an operating system because particular operating systems and<br>versions increment sequence numbers using different values. The result of the<br>analysis is then compared against a database of OS behaviors to determine the OS<br>type and/or version.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP (ISN) Greatest Common Divisor Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/322.html",
      "id": "322"
    },
    {
      "Description": "<b>CAPEC-321: TCP Sequence Number Probe</b><br>This OS fingerprinting probe tests the target system's assignment of TCP<br>sequence numbers. One common way to test TCP Sequence Number generation is to<br>send a probe packet to an open port on the target and then compare the how the<br>Sequence Number generated by the target relates to the Acknowledgement Number in<br>the probe packet. Different operating systems assign Sequence Numbers<br>differently, so a fingerprint of the operating system can be obtained by<br>categorizing the relationship between the acknowledgement number and sequence<br>number as follows: 1) the Sequence Number generated by the target is Zero, 2)<br>the Sequence Number generated by the target is the same as the acknowledgement<br>number in the probe, 3) the Sequence Number generated by the target is the<br>acknowledgement number plus one, or 4) the Sequence Number is any other non-zero<br>number.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Sequence Number Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/321.html",
      "id": "321"
    },
    {
      "Description": "<b>CAPEC-319: IP (DF) 'Don't Fragment Bit' Echoing Probe</b><br>This OS fingerprinting probe tests to determine if the remote host echoes back<br>the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP<br>datagram with the DF bit set to a closed port on the remote host to observe<br>whether the 'DF' bit is set in the response packet. Some operating systems will<br>echo the bit in the ICMP error message while others will zero out the bit in the<br>response packet.",
      "color": "#94ebff",
      "size": 10,
      "label": "IP (DF) 'Don't Fragment Bit' Echoing Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/319.html",
      "id": "319"
    },
    {
      "Description": "<b>CAPEC-323: TCP (ISN) Counter Rate Probe</b><br>This OS detection probe measures the average rate of initial sequence number<br>increments during a period of time. Sequence numbers are incremented using a<br>time-based algorithm and are susceptible to a timing analysis that can determine<br>the number of increments per unit time. The result of this analysis is then<br>compared against a database of operating systems and versions to determine<br>likely operation system matches.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP (ISN) Counter Rate Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/323.html",
      "id": "323"
    },
    {
      "Description": "<b>CAPEC-328: TCP 'RST' Flag Checksum Probe</b><br>This OS fingerprinting probe performs a checksum on any ASCII data contained<br>within the data portion or a RST packet. Some operating systems will report a<br>human-readable text message in the payload of a 'RST' (reset) packet when<br>specific types of connection errors occur. RFC 1122 allows text payloads within<br>reset packets but not all operating systems or routers implement this<br>functionality.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP 'RST' Flag Checksum Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/328.html",
      "id": "328"
    },
    {
      "Description": "<b>CAPEC-332: ICMP IP 'ID' Field Error Message Probe</b><br>An adversary sends a UDP datagram having an assigned value to its internet<br>identification field (ID) to a closed port on a target to observe the manner in<br>which this bit is echoed back in the ICMP error message. This allows the<br>attacker to construct a fingerprint of specific OS behaviors.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP IP 'ID' Field Error Message Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/332.html",
      "id": "332"
    },
    {
      "Description": "<b>CAPEC-324: TCP (ISN) Sequence Predictability Probe</b><br>This type of operating system probe attempts to determine an estimate for how<br>predictable the sequence number generation algorithm is for a remote host.<br>Statistical techniques, such as standard deviation, can be used to determine how<br>predictable the sequence number generation is for a system. This result can then<br>be compared to a database of operating system behaviors to determine a likely<br>match for operating system and version.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP (ISN) Sequence Predictability Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/324.html",
      "id": "324"
    },
    {
      "Description": "<b>CAPEC-472: Browser Fingerprinting</b><br>An attacker carefully crafts small snippets of Java Script to efficiently detect<br>the type of browser the potential victim is using. Many web-based attacks need<br>prior knowledge of the web browser including the version of browser to ensure<br>successful exploitation of a vulnerability. Having this knowledge allows an<br>attacker to target the victim with attacks that specifically exploit known or<br>zero day weaknesses in the type and version of the browser used by the victim.<br>Automating this process via Java Script as a part of the same delivery system<br>used to exploit the browser is considered more efficient as the attacker can<br>supply a browser fingerprinting method and integrate it with exploit code, all<br>contained in Java Script and in response to the same web page request by the<br>browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "Browser Fingerprinting",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/472.html",
      "id": "472"
    },
    {
      "Description": "<b>CAPEC-318: IP 'ID' Echoed Byte-Order Probe</b><br>This OS fingerprinting probe tests to determine if the remote host echoes back<br>the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with<br>an arbitrary IP 'ID' value to a closed port on the remote host to observe the<br>manner in which this bit is echoed back in the ICMP error message. The<br>identification field (ID) is typically utilized for reassembling a fragmented<br>packet. Some operating systems or router firmware reverse the bit order of the<br>ID field when echoing the IP Header portion of the original datagram within an<br>ICMP error message.",
      "color": "#94ebff",
      "size": 10,
      "label": "IP 'ID' Echoed Byte-Order Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/318.html",
      "id": "318"
    },
    {
      "Description": "<b>CAPEC-329: ICMP Error Message Quoting Probe</b><br>An adversary uses a technique to generate an ICMP Error message (Port<br>Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded,<br>Parameter Problem) from a target and then analyze the amount of data returned or<br>\"Quoted\" from the originating request that generated the ICMP error message.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP Error Message Quoting Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/329.html",
      "id": "329"
    },
    {
      "Description": "<b>CAPEC-327: TCP Options Probe</b><br>This OS fingerprinting probe analyzes the type and order of any TCP header<br>options present within a response segment. Most operating systems use unique<br>ordering and different option sets when options are present. RFC 793 does not<br>specify a required order when options are present, so different implementations<br>use unique ways of ordering or structuring TCP options. TCP options can be<br>generated by ordinary TCP traffic.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Options Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/327.html",
      "id": "327"
    },
    {
      "Description": "<b>CAPEC-320: TCP Timestamp Probe</b><br>This OS fingerprinting probe examines the remote server's implementation of TCP<br>timestamps. Not all operating systems implement timestamps within the TCP<br>header, but when timestamps are used then this provides the attacker with a<br>means to guess the operating system of the target. The attacker begins by<br>probing any active TCP service in order to get response which contains a TCP<br>timestamp. Different Operating systems update the timestamp value using<br>different intervals. This type of analysis is most accurate when multiple<br>timestamp responses are received and then analyzed. TCP timestamps can be found<br>in the TCP Options field of the TCP header.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Timestamp Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/320.html",
      "id": "320"
    },
    {
      "Description": "<b>CAPEC-325: TCP Congestion Control Flag (ECN) Probe</b><br>This OS fingerprinting probe checks to see if the remote host supports explicit<br>congestion notification (ECN) messaging. ECN messaging was designed to allow<br>routers to notify a remote host when signal congestion problems are occurring.<br>Explicit Congestion Notification messaging is defined by RFC 3168. Different<br>operating systems and versions may or may not implement ECN notifications, or<br>may respond uniquely to particular ECN flag types.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Congestion Control Flag (ECN) Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/325.html",
      "id": "325"
    },
    {
      "Description": "<b>CAPEC-313: Passive OS Fingerprinting</b><br>An adversary engages in activity to detect the version or type of OS software in<br>a an environment by passively monitoring communication between devices, nodes,<br>or applications. Passive techniques for operating system detection send no<br>actual probes to a target, but monitor network or client-server communication<br>between nodes in order to identify operating systems based on observed behavior<br>as compared to a database of known signatures or values. While passive OS<br>fingerprinting is not usually as reliable as active methods, it is generally<br>better able to evade detection.",
      "color": "#75aaff",
      "size": 18,
      "label": "Passive OS Fingerprinting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/313.html",
      "id": "313"
    },
    {
      "Description": "<b>CAPEC-326: TCP Initial Window Size Probe</b><br>This OS fingerprinting probe checks the initial TCP Window size. TCP stacks<br>limit the range of sequence numbers allowable within a session to maintain the<br>\"connected\" state within TCP protocol logic. The initial window size specifies a<br>range of acceptable sequence numbers that will qualify as a response to an ACK<br>packet within a session. Various operating systems use different Initial window<br>sizes. The initial window size can be sampled by establishing an ordinary TCP<br>connection.",
      "color": "#94ebff",
      "size": 10,
      "label": "TCP Initial Window Size Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/326.html",
      "id": "326"
    },
    {
      "Description": "<b>CAPEC-330: ICMP Error Message Echoing Integrity Probe</b><br>An adversary uses a technique to generate an ICMP Error message (Port<br>Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded,<br>Parameter Problem) from a target and then analyze the integrity of data returned<br>or \"Quoted\" from the originating request that generated the error message.",
      "color": "#94ebff",
      "size": 10,
      "label": "ICMP Error Message Echoing Integrity Probe",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/330.html",
      "id": "330"
    }
  ],
  "links": [
    {
      "source": "310",
      "target": "541"
    },
    {
      "source": "541",
      "target": "224"
    },
    {
      "source": "317",
      "target": "312"
    },
    {
      "source": "170",
      "target": "541"
    },
    {
      "source": "331",
      "target": "312"
    },
    {
      "source": "312",
      "target": "224"
    },
    {
      "source": "322",
      "target": "312"
    },
    {
      "source": "321",
      "target": "312"
    },
    {
      "source": "319",
      "target": "312"
    },
    {
      "source": "323",
      "target": "312"
    },
    {
      "source": "328",
      "target": "312"
    },
    {
      "source": "332",
      "target": "312"
    },
    {
      "source": "324",
      "target": "312"
    },
    {
      "source": "472",
      "target": "541"
    },
    {
      "source": "318",
      "target": "312"
    },
    {
      "source": "329",
      "target": "312"
    },
    {
      "source": "327",
      "target": "312"
    },
    {
      "source": "320",
      "target": "312"
    },
    {
      "source": "325",
      "target": "312"
    },
    {
      "source": "313",
      "target": "224"
    },
    {
      "source": "326",
      "target": "312"
    },
    {
      "source": "330",
      "target": "312"
    }
  ]
}