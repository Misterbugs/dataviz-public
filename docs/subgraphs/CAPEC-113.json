{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-36: Using Unpublished Interfaces or Functionality</b><br>An adversary searches for and invokes interfaces or functionality that the<br>target system designers did not intend to be publicly available. If interfaces<br>fail to authenticate requests, the attacker may be able to invoke functionality<br>they are not authorized for.",
      "color": "#75aaff",
      "size": 18,
      "label": "Using Unpublished Interfaces or Functionality",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/36.html",
      "id": "36"
    },
    {
      "Description": "<b>CAPEC-160: Exploit Script-Based APIs</b><br>Some APIs support scripting instructions as arguments. Methods that take<br>scripted instructions (or references to scripted instructions) can be very<br>flexible and powerful. However, if an attacker can specify the script that<br>serves as input to these methods they can gain access to a great deal of<br>functionality. For example, HTML pages support <script> tags that allow<br>scripting languages to be embedded in the page and then interpreted by the<br>receiving web browser. If the content provider is malicious, these scripts can<br>compromise the client application. Some applications may even execute the<br>scripts under their own identity (rather than the identity of the user providing<br>the script) which can allow attackers to perform activities that would otherwise<br>be denied to them.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploit Script-Based APIs",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/160.html",
      "id": "160"
    },
    {
      "Description": "<b>CAPEC-133: Try All Common Switches</b><br>An attacker attempts to invoke all common switches and options in the target<br>application for the purpose of discovering weaknesses in the target. For<br>example, in some applications, adding a --debug switch causes debugging<br>information to be displayed, which can sometimes reveal sensitive processing or<br>configuration information to an attacker. This attack differs from other forms<br>of API abuse in that the attacker is indiscriminately attempting to invoke<br>options in the hope that one of them will work rather than specifically<br>targeting a known option. Nonetheless, even if the attacker is familiar with the<br>published options of a targeted application this attack method may still be<br>fruitful as it might discover unpublicized functionality.",
      "color": "#75aaff",
      "size": 18,
      "label": "Try All Common Switches",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/133.html",
      "id": "133"
    },
    {
      "Description": "<b>CAPEC-661: Root/Jailbreak Detection Evasion via Debugging</b><br>An adversary inserts a debugger into the program entry point of a mobile<br>application to modify the application binary, with the goal of evading<br>Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices<br>in order to gain administrative control over the mobile operating system and/or<br>to install third-party mobile applications that are not provided by authorized<br>application stores (e.g. Google Play Store and Apple App Store).<br>Rooting/Jailbreaking a mobile device also provides users with access to system<br>debuggers and disassemblers, which can be leveraged to exploit applications by<br>dumping the application's memory at runtime in order to remove or bypass<br>signature verification methods. This further allows the adversary to evade<br>Root/Jailbreak detection mechanisms, which can result in execution of<br>administrative commands, obtaining confidential data, impersonating legitimate<br>users of the application, and more.",
      "color": "#94ebff",
      "size": 10,
      "label": "Root/Jailbreak Detection Evasion via Debugging",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/661.html",
      "id": "661"
    },
    {
      "Description": "<b>CAPEC-113: Interface Manipulation</b><br>An adversary manipulates the use or processing of an interface (e.g. Application<br>Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse<br>impact upon the security of the system implementing the interface. This can<br>allow the adversary to bypass access control and/or execute functionality not<br>intended by the interface implementation, possibly compromising the system which<br>integrates the interface. Interface manipulation can take on a number of forms<br>including forcing the unexpected use of an interface or the use of an interface<br>in an unintended way.",
      "color": "#2176ff",
      "size": 30,
      "label": "Interface Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/113.html",
      "id": "113"
    },
    {
      "Description": "<b>CAPEC-121: Exploit Non-Production Interfaces</b><br>An adversary exploits a sample, demonstration, test, or debug interface that is<br>unintentionally enabled on a production system, with the goal of gleaning<br>information or leveraging functionality that would otherwise be unavailable.",
      "color": "#75aaff",
      "size": 18,
      "label": "Exploit Non-Production Interfaces",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/121.html",
      "id": "121"
    }
  ],
  "links": [
    {
      "source": "36",
      "target": "113"
    },
    {
      "source": "160",
      "target": "113"
    },
    {
      "source": "133",
      "target": "113"
    },
    {
      "source": "661",
      "target": "121"
    },
    {
      "source": "121",
      "target": "113"
    }
  ]
}