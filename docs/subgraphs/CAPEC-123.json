{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-123: Buffer Manipulation</b><br>An adversary manipulates an application's interaction with a buffer in an<br>attempt to read or modify data they shouldn't have access to. Buffer attacks are<br>distinguished in that it is the buffer space itself that is the target of the<br>attack rather than any code responsible for interpreting the content of the<br>buffer. In virtually all buffer attacks the content that is placed in the buffer<br>is immaterial. Instead, most buffer attacks involve retrieving or providing more<br>input than can be stored in the allocated buffer, resulting in the reading or<br>overwriting of other unintended program memory.",
      "color": "#2176ff",
      "size": 30,
      "label": "Buffer Manipulation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/123.html",
      "id": "123"
    },
    {
      "Description": "<b>CAPEC-45: Buffer Overflow via Symbolic Links</b><br>This type of attack leverages the use of symbolic links to cause buffer<br>overflows. An adversary can try to create or manipulate a symbolic link file<br>such that its contents result in out of bounds data. When the target software<br>processes the symbolic link file, it could potentially overflow internal buffers<br>with insufficient bounds checking.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow via Symbolic Links",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/45.html",
      "id": "45"
    },
    {
      "Description": "<b>CAPEC-63: Cross-Site Scripting (XSS)</b><br>An adversary embeds malicious scripts in content that will be served to web<br>browsers. The goal of the attack is for the target software, the client-side<br>browser, to execute the script with the users' privilege level. An attack of<br>this type exploits a programs' vulnerabilities that are brought on by allowing<br>remote hosts to execute code and scripts. Web browsers, for example, have some<br>simple security controls in place, but if a remote attacker is allowed to<br>execute scripts (through injecting them in to user-generated content like<br>bulletin boards) then these controls may be bypassed. Further, these attacks are<br>very difficult for an end user to detect.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cross-Site Scripting (XSS)",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/63.html",
      "id": "63"
    },
    {
      "Description": "<b>CAPEC-256: SOAP Array Overflow</b><br>An attacker sends a SOAP request with an array whose actual length exceeds the<br>length indicated in the request. If the server processing the transmission<br>naively trusts the specified size, then an attacker can intentionally understate<br>the size of the array, possibly resulting in a buffer overflow if the server<br>attempts to read the entire data set into the memory it allocated for a smaller<br>array.",
      "color": "#94ebff",
      "size": 10,
      "label": "SOAP Array Overflow",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/256.html",
      "id": "256"
    },
    {
      "Description": "<b>CAPEC-44: Overflow Binary Resource File</b><br>An attack of this type exploits a buffer overflow vulnerability in the handling<br>of binary resources. Binary resources may include music files like MP3, image<br>files like JPEG files, and any other binary file. These attacks may pass<br>unnoticed to the client machine through normal usage of files, such as a browser<br>loading a seemingly innocent JPEG file. This can allow the adversary access to<br>the execution stack and execute arbitrary code in the target process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Overflow Binary Resource File",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/44.html",
      "id": "44"
    },
    {
      "Description": "<b>CAPEC-138: Reflection Injection</b><br>An adversary supplies a value to the target application which is then used by<br>reflection methods to identify a class, method, or field. For example, in the<br>Java programming language the reflection libraries permit an application to<br>inspect, load, and invoke classes and their components by name. If an adversary<br>can control the input into these methods including the name of the<br>class/method/field or the parameters passed to methods, they can cause the<br>targeted application to invoke incorrect methods, read random fields, or even to<br>load and utilize malicious classes that the adversary created. This can lead to<br>the application revealing sensitive information, returning incorrect results, or<br>even having the adversary take control of the targeted application.",
      "color": "#75aaff",
      "size": 18,
      "label": "Reflection Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/138.html",
      "id": "138"
    },
    {
      "Description": "<b>CAPEC-23: File Content Injection</b><br>An adversary poisons files with a malicious payload (targeting the file systems<br>accessible by the target software), which may be passed through by standard<br>channels such as via email, and standard web content like PDF and multimedia<br>files. The adversary exploits known vulnerabilities or handling routines in the<br>target processes, in order to exploit the host's trust in executing remote<br>content, including binary files.",
      "color": "#75aaff",
      "size": 18,
      "label": "File Content Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/23.html",
      "id": "23"
    },
    {
      "Description": "<b>CAPEC-178: Cross-Site Flashing</b><br>An attacker is able to trick the victim into executing a Flash document that<br>passes commands or calls to a Flash player browser plugin, allowing the attacker<br>to exploit native Flash functionality in the client browser. This attack pattern<br>occurs where an attacker can provide a crafted link to a Flash document (SWF<br>file) which, when followed, will cause additional malicious instructions to be<br>executed. The attacker does not need to serve or control the Flash document. The<br>attack takes advantage of the fact that Flash files can reference external URLs.<br>If variables that serve as URLs that the Flash application references can be<br>controlled through parameters, then by creating a link that includes values for<br>those parameters, an attacker can cause arbitrary content to be referenced and<br>possibly executed by the targeted Flash application.",
      "color": "#94ebff",
      "size": 10,
      "label": "Cross-Site Flashing",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/178.html",
      "id": "178"
    },
    {
      "Description": "<b>CAPEC-32: XSS Through HTTP Query Strings</b><br>An adversary embeds malicious script code in the parameters of an HTTP query<br>string and convinces a victim to submit the HTTP request that contains the query<br>string to a vulnerable web application. The web application then procedes to use<br>the values parameters without properly validation them first and generates the<br>HTML code that will be executed by the victim's browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Through HTTP Query Strings",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/32.html",
      "id": "32"
    },
    {
      "Description": "<b>CAPEC-19: Embedding Scripts within Scripts</b><br>An adversary leverages the capability to execute their own script by embedding<br>it within other scripts that the target software is likely to execute due to<br>programs' vulnerabilities that are brought on by allowing remote hosts to<br>execute scripts.",
      "color": "#75aaff",
      "size": 18,
      "label": "Embedding Scripts within Scripts",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/19.html",
      "id": "19"
    },
    {
      "Description": "<b>CAPEC-14: Client-side Injection-induced Buffer Overflow</b><br>This type of attack exploits a buffer overflow vulnerability in targeted client<br>software through injection of malicious content from a custom-built hostile<br>service. This hostile service is created to deliver the correct content to the<br>client software. For example, if the client-side application is a browser, the<br>service will host a webpage that the browser loads.",
      "color": "#94ebff",
      "size": 10,
      "label": "Client-side Injection-induced Buffer Overflow",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/14.html",
      "id": "14"
    },
    {
      "Description": "<b>CAPEC-592: Stored XSS</b><br>An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious<br>script is persistently \"stored\" within the data storage of a vulnerable web<br>application as valid input.",
      "color": "#94ebff",
      "size": 10,
      "label": "Stored XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/592.html",
      "id": "592"
    },
    {
      "Description": "<b>CAPEC-24: Filter Failure through Buffer Overflow</b><br>In this attack, the idea is to cause an active filter to fail by causing an<br>oversized transaction. An attacker may try to feed overly long input strings to<br>the program in an attempt to overwhelm the filter (by causing a buffer overflow)<br>and hoping that the filter does not fail securely (i.e. the user input is let<br>into the system unfiltered).",
      "color": "#94ebff",
      "size": 10,
      "label": "Filter Failure through Buffer Overflow",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/24.html",
      "id": "24"
    },
    {
      "Description": "<b>CAPEC-18: XSS Targeting Non-Script Elements</b><br>This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are<br>embedded in elements that are not expected to host scripts such as image tags<br>(<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be<br>subject to the same input validation, output validation, and other content<br>filtering and checking routines, so this can create an opportunity for an<br>adversary to tunnel through the application's elements and launch a XSS attack<br>through other elements. As with all remote attacks, it is important to<br>differentiate the ability to launch an attack (such as probing an internal<br>network for unpatched servers) and the ability of the remote adversary to<br>collect and interpret the output of said attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting Non-Script Elements",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/18.html",
      "id": "18"
    },
    {
      "Description": "<b>CAPEC-247: XSS Using Invalid Characters</b><br>An adversary inserts invalid characters in identifiers to bypass application<br>filtering of input. Filters may not scan beyond invalid characters but during<br>later stages of processing content that follows these invalid characters may<br>still be processed. This allows the adversary to sneak prohibited commands past<br>filters and perform normally prohibited operations. Invalid characters may<br>include null, carriage return, line feed or tab in an identifier. Successful<br>bypassing of the filter can result in a XSS attack, resulting in the disclosure<br>of web cookies or possibly other results.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Invalid Characters",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/247.html",
      "id": "247"
    },
    {
      "Description": "<b>CAPEC-86: XSS Through HTTP Headers</b><br>An adversary exploits web applications that generate web content, such as links<br>in a HTML page, based on unvalidated or improperly validated data submitted by<br>other actors. XSS in HTTP Headers attacks target the HTTP headers which are<br>hidden from most users and may not be validated by web applications.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Through HTTP Headers",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/86.html",
      "id": "86"
    },
    {
      "Description": "<b>CAPEC-15: Command Delimiters</b><br>An attack of this type exploits a programs' vulnerabilities that allows an<br>attacker's commands to be concatenated onto a legitimate command with the intent<br>of targeting other resources such as the file system or database. The system<br>that uses a filter or denylist input validation, as opposed to allowlist<br>validation is vulnerable to an attacker who predicts delimiters (or combinations<br>of delimiters) not present in the filter or denylist. As with other injection<br>attacks, the attacker uses the command delimiter payload as an entry point to<br>tunnel through the application and activate additional attacks through SQL<br>queries, shell commands, network scanning, and so on.",
      "color": "#75aaff",
      "size": 18,
      "label": "Command Delimiters",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/15.html",
      "id": "15"
    },
    {
      "Description": "<b>CAPEC-41: Using Meta-characters in E-mail Headers to Inject Malicious Payloads</b><br>This type of attack involves an attacker leveraging meta-characters in email<br>headers to inject improper behavior into email programs. Email software has<br>become increasingly sophisticated and feature-rich. In addition, email<br>applications are ubiquitous and connected directly to the Web making them ideal<br>targets to launch and propagate attacks. As the user demand for new<br>functionality in email applications grows, they become more like browsers with<br>complex rendering and plug in routines. As more email functionality is included<br>and abstracted from the user, this creates opportunities for attackers.<br>Virtually all email applications do not list email header information by<br>default, however the email header contains valuable attacker vectors for the<br>attacker to exploit particularly if the behavior of the email client application<br>is known. Meta-characters are hidden from the user, but can contain scripts,<br>enumerations, probes, and other attacks against the user's system.",
      "color": "#94ebff",
      "size": 10,
      "label": "Using Meta-characters in E-mail Headers to Inject Malicious Payloads",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/41.html",
      "id": "41"
    },
    {
      "Description": "<b>CAPEC-468: Generic Cross-Browser Cross-Domain Theft</b><br>An attacker makes use of Cascading Style Sheets (CSS) injection to steal data<br>cross domain from the victim's browser. The attack works by abusing the<br>standards relating to loading of CSS: 1. Send cookies on any load of CSS<br>(including cross-domain) 2. When parsing returned CSS ignore all data that does<br>not make sense before a valid CSS descriptor is found by the CSS parser.",
      "color": "#75aaff",
      "size": 18,
      "label": "Generic Cross-Browser Cross-Domain Theft",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/468.html",
      "id": "468"
    },
    {
      "Description": "<b>CAPEC-242: Code Injection</b><br>An adversary exploits a weakness in input validation on the target to inject new<br>code into that which is currently executing. This differs from code inclusion in<br>that code inclusion involves the addition or replacement of a reference to a<br>code file, which is subsequently loaded by the target and used as part of the<br>code of some application.",
      "color": "#2176ff",
      "size": 30,
      "label": "Code Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/242.html",
      "id": "242"
    },
    {
      "Description": "<b>CAPEC-540: Overread Buffers</b><br>An adversary attacks a target by providing input that causes an application to<br>read beyond the boundary of a defined buffer. This typically occurs when a value<br>influencing where to start or stop reading is set to reflect positions outside<br>of the valid memory location of the buffer. This type of attack may result in<br>exposure of sensitive information, a system crash, or arbitrary code execution.",
      "color": "#75aaff",
      "size": 18,
      "label": "Overread Buffers",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/540.html",
      "id": "540"
    },
    {
      "Description": "<b>CAPEC-243: XSS Targeting HTML Attributes</b><br>An adversary inserts commands to perform cross-site scripting (XSS) actions in<br>HTML attributes. Many filters do not adequately sanitize attributes against the<br>presence of potentially dangerous commands even if they adequately sanitize<br>tags. For example, dangerous expressions could be inserted into a style<br>attribute in an anchor tag, resulting in the execution of malicious code when<br>the resulting page is rendered. If a victim is tricked into viewing the rendered<br>page the attack proceeds like a normal XSS attack, possibly resulting in the<br>loss of sensitive cookies or other malicious activities.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting HTML Attributes",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/243.html",
      "id": "243"
    },
    {
      "Description": "<b>CAPEC-244: XSS Targeting URI Placeholders</b><br>An attack of this type exploits the ability of most browsers to interpret<br>\"data\", \"javascript\" or other URI schemes as client-side executable content<br>placeholders. This attack consists of passing a malicious URI in an anchor tag<br>HREF attribute or any other similar attributes in other HTML tags. Such<br>malicious URI contains, for example, a base64 encoded HTML content with an<br>embedded cross-site scripting payload. The attack is executed when the browser<br>interprets the malicious content i.e., for example, when the victim clicks on<br>the malicious link.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting URI Placeholders",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/244.html",
      "id": "244"
    },
    {
      "Description": "<b>CAPEC-10: Buffer Overflow via Environment Variables</b><br>This attack pattern involves causing a buffer overflow through manipulation of<br>environment variables. Once the adversary finds that they can modify an<br>environment variable, they may try to overflow associated buffers. This attack<br>leverages implicit trust often placed in environment variables.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow via Environment Variables",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/10.html",
      "id": "10"
    },
    {
      "Description": "<b>CAPEC-134: Email Injection</b><br>An adversary manipulates the headers and content of an email message by<br>injecting data via the use of delimiter characters native to the protocol.",
      "color": "#75aaff",
      "size": 18,
      "label": "Email Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/134.html",
      "id": "134"
    },
    {
      "Description": "<b>CAPEC-588: DOM-Based XSS</b><br>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious<br>script is inserted into the client-side HTML being parsed by a web browser.<br>Content served by a vulnerable web application includes script code used to<br>manipulate the Document Object Model (DOM). This script code either does not<br>properly validate input, or does not perform proper output encoding, thus<br>creating an opportunity for an adversary to inject a malicious script launch a<br>XSS attack. A key distinction between other XSS attacks and DOM-based attacks is<br>that in other XSS attacks, the malicious script runs when the vulnerable web<br>page is initially loaded, while a DOM-based attack executes sometime after the<br>page loads. Another distinction of DOM-based attacks is that in some cases, the<br>malicious script is never sent to the vulnerable web server at all. An attack<br>like this is guaranteed to bypass any server-side filtering attempts to protect<br>users.",
      "color": "#94ebff",
      "size": 10,
      "label": "DOM-Based XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/588.html",
      "id": "588"
    },
    {
      "Description": "<b>CAPEC-8: Buffer Overflow in an API Call</b><br>This attack targets libraries or shared code modules which are vulnerable to<br>buffer overflow attacks. An adversary who has knowledge of known vulnerable<br>libraries or shared code can easily target software that makes use of these<br>libraries. All clients that make use of the code library thus become vulnerable<br>by association. This has a very broad effect on security across a system,<br>usually affecting more than one software process.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow in an API Call",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/8.html",
      "id": "8"
    },
    {
      "Description": "<b>CAPEC-135: Format String Injection</b><br>An adversary includes formatting characters in a string input field on the<br>target application. Most applications assume that users will provide static text<br>and may respond unpredictably to the presence of formatting character. For<br>example, in certain functions of the C programming languages such as printf, the<br>formatting character %s will print the contents of a memory location expecting<br>this location to identify a string and the formatting character %n prints the<br>number of DWORD written in the memory. An adversary can use this to read or<br>write to memory locations or files, or simply to manipulate the value of the<br>resulting text in unexpected ways. Reading or writing memory may result in<br>program crashes and writing memory could result in the execution of arbitrary<br>code if the adversary can write to the program stack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Format String Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/135.html",
      "id": "135"
    },
    {
      "Description": "<b>CAPEC-46: Overflow Variables and Tags</b><br>This type of attack leverages the use of tags or variables from a formatted<br>configuration data to cause buffer overflow. The adversary crafts a malicious<br>HTML page or configuration file that includes oversized strings, thus causing an<br>overflow.",
      "color": "#94ebff",
      "size": 10,
      "label": "Overflow Variables and Tags",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/46.html",
      "id": "46"
    },
    {
      "Description": "<b>CAPEC-591: Reflected XSS</b><br>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious<br>script is \"reflected\" off a vulnerable web application and then executed by a<br>victim's browser. The process starts with an adversary delivering a malicious<br>script to a victim and convincing the victim to send the script to the<br>vulnerable web application.",
      "color": "#94ebff",
      "size": 10,
      "label": "Reflected XSS",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/591.html",
      "id": "591"
    },
    {
      "Description": "<b>CAPEC-47: Buffer Overflow via Parameter Expansion</b><br>In this attack, the target software is given input that the adversary knows will<br>be modified and expanded in size during processing. This attack relies on the<br>target software failing to anticipate that the expanded data may exceed some<br>internal limit, thereby creating a buffer overflow.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow via Parameter Expansion",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/47.html",
      "id": "47"
    },
    {
      "Description": "<b>CAPEC-100: Overflow Buffers</b><br>Buffer Overflow attacks target improper or missing bounds checking on buffer<br>operations, typically triggered by input injected by an adversary. As a<br>consequence, an adversary is able to write past the boundaries of allocated<br>buffer regions in memory, causing a program crash or potentially redirection of<br>execution as per the adversaries' choice.",
      "color": "#75aaff",
      "size": 18,
      "label": "Overflow Buffers",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/100.html",
      "id": "100"
    },
    {
      "Description": "<b>CAPEC-9: Buffer Overflow in Local Command-Line Utilities</b><br>This attack targets command-line utilities available in a number of shells. An<br>adversary can leverage a vulnerability found in a command-line utility to<br>escalate privilege to root.",
      "color": "#94ebff",
      "size": 10,
      "label": "Buffer Overflow in Local Command-Line Utilities",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/9.html",
      "id": "9"
    },
    {
      "Description": "<b>CAPEC-209: XSS Using MIME Type Mismatch</b><br>An adversary creates a file with scripting content but where the specified MIME<br>type of the file is such that scripting is not expected. The adversary tricks<br>the victim into accessing a URL that responds with the script file. Some<br>browsers will detect that the specified MIME type of the file does not match the<br>actual type of its content and will automatically switch to using an interpreter<br>for the real content type. If the browser does not invoke script filters before<br>doing this, the adversary's script may run on the target unsanitized, possibly<br>revealing the victim's cookies or executing arbitrary script in their browser.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using MIME Type Mismatch",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/209.html",
      "id": "209"
    },
    {
      "Description": "<b>CAPEC-460: HTTP Parameter Pollution (HPP)</b><br>An adversary adds duplicate HTTP GET/POST parameters by injecting query string<br>delimiters. Via HPP it may be possible to override existing hardcoded HTTP<br>parameters, modify the application behaviors, access and, potentially exploit,<br>uncontrollable variables, and bypass input validation checkpoints and WAF rules.",
      "color": "#94ebff",
      "size": 10,
      "label": "HTTP Parameter Pollution (HPP)",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/460.html",
      "id": "460"
    },
    {
      "Description": "<b>CAPEC-42: MIME Conversion</b><br>An attacker exploits a weakness in the MIME conversion routine to cause a buffer<br>overflow and gain control over the mail server machine. The MIME system is<br>designed to allow various different information formats to be interpreted and<br>sent via e-mail. Attack points exist when data are converted to MIME compatible<br>format and back.",
      "color": "#94ebff",
      "size": 10,
      "label": "MIME Conversion",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/42.html",
      "id": "42"
    },
    {
      "Description": "<b>CAPEC-245: XSS Using Doubled Characters</b><br>The adversary bypasses input validation by using doubled characters in order to<br>perform a cross-site scripting attack. Some filters fail to recognize dangerous<br>sequences if they are preceded by repeated characters. For example, by doubling<br>the < before a script command, (<<script or %3C%3script using URI encoding) the<br>filters of some web applications may fail to recognize the presence of a script<br>tag. If the targeted server is vulnerable to this type of bypass, the adversary<br>can create a crafted URL or other trap to cause a victim to view a page on the<br>targeted server where the malicious content is executed, as per a normal XSS<br>attack.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Doubled Characters",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/245.html",
      "id": "245"
    },
    {
      "Description": "<b>CAPEC-182: Flash Injection</b><br>An attacker tricks a victim to execute malicious flash content that executes<br>commands or makes flash calls specified by the attacker. One example of this<br>attack is cross-site flashing, an attacker controlled parameter to a reference<br>call loads from content specified by the attacker.",
      "color": "#75aaff",
      "size": 18,
      "label": "Flash Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/182.html",
      "id": "182"
    },
    {
      "Description": "<b>CAPEC-174: Flash Parameter Injection</b><br>An adversary takes advantage of improper data validation to inject malicious<br>global parameters into a Flash file embedded within an HTML document. Flash<br>files can leverage user-submitted data to configure the Flash document and<br>access the embedding HTML document.",
      "color": "#94ebff",
      "size": 10,
      "label": "Flash Parameter Injection",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/174.html",
      "id": "174"
    },
    {
      "Description": "<b>CAPEC-137: Parameter Injection</b><br>An adversary manipulates the content of request parameters for the purpose of<br>undermining the security of the target. Some parameter encodings use text<br>characters as separators. For example, parameters in a HTTP GET message are<br>encoded as name-value pairs separated by an ampersand (&). If an attacker can<br>supply text strings that are used to fill in these parameters, then they can<br>inject special characters used in the encoding scheme to add or modify<br>parameters. For example, if user input is fed directly into an HTTP GET request<br>and the user provides the value \"myInput&new_param=myValue\", then the input<br>parameter is set to myInput, but a new parameter (new_param) is also added with<br>a value of myValue. This can significantly change the meaning of the query that<br>is processed by the server. Any encoding scheme where parameters are identified<br>and separated by text characters is potentially vulnerable to this attack - the<br>HTTP GET encoding used above is just one example.",
      "color": "#2176ff",
      "size": 30,
      "label": "Parameter Injection",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/137.html",
      "id": "137"
    },
    {
      "Description": "<b>CAPEC-198: XSS Targeting Error Pages</b><br>An adversary distributes a link (or possibly some other query structure) with a<br>request to a third party web server that is malformed and also contains a block<br>of exploit code in order to have the exploit become live code in the resulting<br>error page.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Targeting Error Pages",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/198.html",
      "id": "198"
    },
    {
      "Description": "<b>CAPEC-6: Argument Injection</b><br>An attacker changes the behavior or state of a targeted application through<br>injecting data or command syntax through the targets use of non-validated and<br>non-filtered arguments of exposed services or methods.",
      "color": "#75aaff",
      "size": 18,
      "label": "Argument Injection",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/6.html",
      "id": "6"
    },
    {
      "Description": "<b>CAPEC-199: XSS Using Alternate Syntax</b><br>An adversary uses alternate forms of keywords or commands that result in the<br>same action as the primary form but which may not be caught by filters. For<br>example, many keywords are processed in a case insensitive manner. If the site's<br>web filtering algorithm does not convert all tags into a consistent case before<br>the comparison with forbidden keywords it is possible to bypass filters (e.g.,<br>incomplete black lists) by using an alternate case structure. For example, the<br>\"script\" tag using the alternate forms of \"Script\" or \"ScRiPt\" may bypass<br>filters where \"script\" is the only form tested. Other variants using different<br>syntax representations are also possible as well as using pollution<br>meta-characters or entities that are eventually ignored by the rendering engine.<br>The attack can result in the execution of otherwise prohibited functionality.",
      "color": "#94ebff",
      "size": 10,
      "label": "XSS Using Alternate Syntax",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/199.html",
      "id": "199"
    },
    {
      "Description": "<b>CAPEC-67: String Format Overflow in syslog()</b><br>This attack targets applications and software that uses the syslog() function<br>insecurely. If an application does not explicitely use a format string parameter<br>in a call to syslog(), user input can be placed in the format string parameter<br>leading to a format string injection attack. Adversaries can then inject<br>malicious format string commands into the function call leading to a buffer<br>overflow. There are many reported software vulnerabilities with the root cause<br>being a misuse of the syslog() function.",
      "color": "#94ebff",
      "size": 10,
      "label": "String Format Overflow in syslog()",
      "label_class": "node-label-small",
      "url": "https://capec.mitre.org/data/definitions/67.html",
      "id": "67"
    }
  ],
  "links": [
    {
      "source": "45",
      "target": "100"
    },
    {
      "source": "63",
      "target": "242"
    },
    {
      "source": "256",
      "target": "100"
    },
    {
      "source": "44",
      "target": "100"
    },
    {
      "source": "44",
      "target": "23"
    },
    {
      "source": "138",
      "target": "137"
    },
    {
      "source": "23",
      "target": "242"
    },
    {
      "source": "178",
      "target": "182"
    },
    {
      "source": "32",
      "target": "591"
    },
    {
      "source": "32",
      "target": "588"
    },
    {
      "source": "32",
      "target": "592"
    },
    {
      "source": "19",
      "target": "242"
    },
    {
      "source": "14",
      "target": "100"
    },
    {
      "source": "592",
      "target": "63"
    },
    {
      "source": "24",
      "target": "100"
    },
    {
      "source": "18",
      "target": "591"
    },
    {
      "source": "18",
      "target": "592"
    },
    {
      "source": "18",
      "target": "588"
    },
    {
      "source": "247",
      "target": "591"
    },
    {
      "source": "247",
      "target": "592"
    },
    {
      "source": "247",
      "target": "588"
    },
    {
      "source": "86",
      "target": "591"
    },
    {
      "source": "86",
      "target": "588"
    },
    {
      "source": "86",
      "target": "592"
    },
    {
      "source": "15",
      "target": "137"
    },
    {
      "source": "41",
      "target": "242"
    },
    {
      "source": "41",
      "target": "134"
    },
    {
      "source": "468",
      "target": "242"
    },
    {
      "source": "540",
      "target": "123"
    },
    {
      "source": "243",
      "target": "591"
    },
    {
      "source": "243",
      "target": "592"
    },
    {
      "source": "243",
      "target": "588"
    },
    {
      "source": "244",
      "target": "591"
    },
    {
      "source": "244",
      "target": "592"
    },
    {
      "source": "244",
      "target": "588"
    },
    {
      "source": "10",
      "target": "100"
    },
    {
      "source": "134",
      "target": "137"
    },
    {
      "source": "588",
      "target": "63"
    },
    {
      "source": "8",
      "target": "100"
    },
    {
      "source": "135",
      "target": "137"
    },
    {
      "source": "46",
      "target": "100"
    },
    {
      "source": "591",
      "target": "63"
    },
    {
      "source": "47",
      "target": "100"
    },
    {
      "source": "100",
      "target": "123"
    },
    {
      "source": "9",
      "target": "100"
    },
    {
      "source": "209",
      "target": "592"
    },
    {
      "source": "460",
      "target": "15"
    },
    {
      "source": "42",
      "target": "100"
    },
    {
      "source": "245",
      "target": "591"
    },
    {
      "source": "245",
      "target": "592"
    },
    {
      "source": "245",
      "target": "588"
    },
    {
      "source": "182",
      "target": "137"
    },
    {
      "source": "174",
      "target": "182"
    },
    {
      "source": "198",
      "target": "591"
    },
    {
      "source": "198",
      "target": "592"
    },
    {
      "source": "198",
      "target": "588"
    },
    {
      "source": "6",
      "target": "137"
    },
    {
      "source": "199",
      "target": "591"
    },
    {
      "source": "199",
      "target": "592"
    },
    {
      "source": "199",
      "target": "588"
    },
    {
      "source": "67",
      "target": "100"
    },
    {
      "source": "67",
      "target": "135"
    }
  ]
}