{
  "directed": true,
  "multigraph": false,
  "graph": {},
  "nodes": [
    {
      "Description": "<b>CAPEC-30: Hijacking a Privileged Thread of Execution</b><br>An adversary hijacks a privileged thread of execution by injecting malicious<br>code into a running process. By using a privleged thread to do their bidding,<br>adversaries can evade process-based detection that would stop an attack that<br>creates a new process. This can lead to an adversary gaining access to the<br>process's memory and can also enable elevated privileges. The most common way to<br>perform this attack is by suspending an existing thread and manipulating its<br>memory.",
      "color": "#75aaff",
      "size": 18,
      "label": "Hijacking a Privileged Thread of Execution",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/30.html",
      "id": "30"
    },
    {
      "Description": "<b>CAPEC-104: Cross Zone Scripting</b><br>An attacker is able to cause a victim to load content into their web-browser<br>that bypasses security zone controls and gain access to increased privileges to<br>execute scripting code or other web objects such as unsigned ActiveX controls or<br>applets. This is a privilege elevation attack targeted at zone-based web-browser<br>security.",
      "color": "#75aaff",
      "size": 18,
      "label": "Cross Zone Scripting",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/104.html",
      "id": "104"
    },
    {
      "Description": "<b>CAPEC-233: Privilege Escalation</b><br>An adversary exploits a weakness enabling them to elevate their privilege and<br>perform an action that they are not supposed to be authorized to perform.",
      "color": "#2176ff",
      "size": 30,
      "label": "Privilege Escalation",
      "label_class": "node-label-big",
      "url": "https://capec.mitre.org/data/definitions/233.html",
      "id": "233"
    },
    {
      "Description": "<b>CAPEC-68: Subvert Code-signing Facilities</b><br>Many languages use code signing facilities to vouch for code's identity and to<br>thus tie code to its assigned privileges within an environment. Subverting this<br>mechanism can be instrumental in an attacker escalating privilege. Any means of<br>subverting the way that a virtual machine enforces code signing classifies for<br>this style of attack.",
      "color": "#75aaff",
      "size": 18,
      "label": "Subvert Code-signing Facilities",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/68.html",
      "id": "68"
    },
    {
      "Description": "<b>CAPEC-69: Target Programs with Elevated Privileges</b><br>This attack targets programs running with elevated privileges. The adversary<br>tries to leverage a vulnerability in the running program and get arbitrary code<br>to execute with elevated privileges.",
      "color": "#75aaff",
      "size": 18,
      "label": "Target Programs with Elevated Privileges",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/69.html",
      "id": "69"
    },
    {
      "Description": "<b>CAPEC-234: Hijacking a privileged process</b><br>An adversary gains control of a process that is assigned elevated privileges in<br>order to execute arbitrary code with those privileges. Some processes are<br>assigned elevated privileges on an operating system, usually through association<br>with a particular user, group, or role. If an attacker can hijack this process,<br>they will be able to assume its level of privilege in order to execute their own<br>code.",
      "color": "#75aaff",
      "size": 18,
      "label": "Hijacking a privileged process",
      "label_class": "node-label-medium",
      "url": "https://capec.mitre.org/data/definitions/234.html",
      "id": "234"
    }
  ],
  "links": [
    {
      "source": "30",
      "target": "233"
    },
    {
      "source": "104",
      "target": "233"
    },
    {
      "source": "68",
      "target": "233"
    },
    {
      "source": "69",
      "target": "233"
    },
    {
      "source": "234",
      "target": "233"
    }
  ]
}